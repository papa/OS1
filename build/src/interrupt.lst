GAS LISTING /tmp/ccDjKDlk.s 			page 1


   1              		.file	"interrupt.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	interrupt
   9              	interrupt:
  10              	.LFB21:
  11              		.file 1 "src/interrupt.cpp"
   1:src/interrupt.cpp **** //
   2:src/interrupt.cpp **** // Created by os on 4/12/22.
   3:src/interrupt.cpp **** //
   4:src/interrupt.cpp **** 
   5:src/interrupt.cpp **** #include "../h/interrupt.h"
   6:src/interrupt.cpp **** 
   7:src/interrupt.cpp **** const uint64 bntOne = 1UL << 63;
   8:src/interrupt.cpp **** const uint64 bntZero = 0;
   9:src/interrupt.cpp **** 
  10:src/interrupt.cpp **** const uint64 hwInterrupt = bntOne + 9UL;
  11:src/interrupt.cpp **** const uint64 operationInterrupt = bntZero + 2UL;
  12:src/interrupt.cpp **** const uint64 addrReadInterrupt = bntZero + 5UL;
  13:src/interrupt.cpp **** const uint64 addrWriteInterrupt = bntZero + 7UL;
  14:src/interrupt.cpp **** const uint64 ecallUserInterrupt = bntZero + 8UL;
  15:src/interrupt.cpp **** const uint64 ecallSystemInterupt = bntZero + 9UL;
  16:src/interrupt.cpp **** 
  17:src/interrupt.cpp **** extern "C" void interrupt() {
  12              		.loc 1 17 29
  13              		.cfi_startproc
  14 0000 130101FE 		addi	sp,sp,-32
  15              		.cfi_def_cfa_offset 32
  16 0004 233C1100 		sd	ra,24(sp)
  17 0008 23388100 		sd	s0,16(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040102 		addi	s0,sp,32
  21              		.cfi_def_cfa 8, 0
  18:src/interrupt.cpp **** 
  19:src/interrupt.cpp ****     uint64 scause = Riscv::r_scause();
  22              		.loc 1 19 5
  23              	.LBB14:
  24              	.LBB15:
  25              		.file 2 "src/../h/Riscv.h"
   1:src/../h/Riscv.h **** //
   2:src/../h/Riscv.h **** // Created by os on 4/27/22.
   3:src/../h/Riscv.h **** //
   4:src/../h/Riscv.h **** 
   5:src/../h/Riscv.h **** #ifndef PROJECT_BASE_V1_0_RISCV_H
   6:src/../h/Riscv.h **** #define PROJECT_BASE_V1_0_RISCV_H
   7:src/../h/Riscv.h **** 
   8:src/../h/Riscv.h **** #include "../lib/hw.h"
   9:src/../h/Riscv.h **** 
  10:src/../h/Riscv.h **** class Riscv
  11:src/../h/Riscv.h **** {
  12:src/../h/Riscv.h **** private:
  13:src/../h/Riscv.h **** 
  14:src/../h/Riscv.h **** public:
GAS LISTING /tmp/ccDjKDlk.s 			page 2


  15:src/../h/Riscv.h ****     static void initSystem();
  16:src/../h/Riscv.h **** 
  17:src/../h/Riscv.h ****     static void pushRegisters();
  18:src/../h/Riscv.h ****     static void popRegisters();
  19:src/../h/Riscv.h **** 
  20:src/../h/Riscv.h ****     static uint64 r_scause();
  21:src/../h/Riscv.h ****     static void w_scause(uint64 scause);
  22:src/../h/Riscv.h **** 
  23:src/../h/Riscv.h ****     static uint64 r_sepc();
  24:src/../h/Riscv.h ****     static void w_sepc(uint64 sepc);
  25:src/../h/Riscv.h **** 
  26:src/../h/Riscv.h ****     static uint64 r_stvec();
  27:src/../h/Riscv.h ****     static void w_stvec(uint64 stvec);
  28:src/../h/Riscv.h **** 
  29:src/../h/Riscv.h ****     static uint64 r_stval();
  30:src/../h/Riscv.h ****     static void w_stval(uint64 stval);
  31:src/../h/Riscv.h **** 
  32:src/../h/Riscv.h ****     enum BitMaskSip
  33:src/../h/Riscv.h ****     {
  34:src/../h/Riscv.h ****         SIP_SSIE = (1 << 1),
  35:src/../h/Riscv.h ****         SIP_STIE = (1 << 5),
  36:src/../h/Riscv.h ****         SIP_SEIE = (1 << 9),
  37:src/../h/Riscv.h ****     };
  38:src/../h/Riscv.h **** 
  39:src/../h/Riscv.h ****     //todo
  40:src/../h/Riscv.h ****     //| i & na sip da se primene
  41:src/../h/Riscv.h ****     static void ms_sip(uint64 mask);
  42:src/../h/Riscv.h **** 
  43:src/../h/Riscv.h ****     static void mc_sip(uint64 mask);
  44:src/../h/Riscv.h **** 
  45:src/../h/Riscv.h ****     static uint64 r_sip();
  46:src/../h/Riscv.h **** 
  47:src/../h/Riscv.h ****     static void w_sip(uint64 sip);
  48:src/../h/Riscv.h **** 
  49:src/../h/Riscv.h ****     enum BitMaskSstatus
  50:src/../h/Riscv.h ****     {
  51:src/../h/Riscv.h ****         SSTATUS_SIE = (1 << 1),
  52:src/../h/Riscv.h ****         SSTATUS_SPIE = (1 << 5),
  53:src/../h/Riscv.h ****         SSTATUS_SPP = (1 << 8),
  54:src/../h/Riscv.h ****     };
  55:src/../h/Riscv.h **** 
  56:src/../h/Riscv.h ****     static void ms_sstatus(uint64 mask);
  57:src/../h/Riscv.h **** 
  58:src/../h/Riscv.h ****     static void mc_sstatus(uint64 mask);
  59:src/../h/Riscv.h **** 
  60:src/../h/Riscv.h ****     static uint64 r_sstatus();
  61:src/../h/Riscv.h **** 
  62:src/../h/Riscv.h ****     static void w_sstatus(uint64 sstatus);
  63:src/../h/Riscv.h **** };
  64:src/../h/Riscv.h **** 
  65:src/../h/Riscv.h **** inline uint64 Riscv::r_scause() {
  66:src/../h/Riscv.h ****     uint64 volatile scause;
  26              		.loc 2 66 5
  67:src/../h/Riscv.h ****     __asm__ volatile("csrr %0, scause" : "=r"(scause));
  27              		.loc 2 67 5
  28              		.loc 2 67 55 is_stmt 0
  29              	#APP
GAS LISTING /tmp/ccDjKDlk.s 			page 3


  30              	# 67 "src/../h/Riscv.h" 1
  68              	    return scause;
  31              		csrr a5, scause
  32              	# 0 "" 2
  33              	#NO_APP
  34 0014 2330F4FE 		sd	a5,-32(s0)
  35              		.loc 2 68 5 is_stmt 1
  36              		.loc 2 68 12 is_stmt 0
  37 0018 033704FE 		ld	a4,-32(s0)
  38              	.LVL0:
  39              	.LBE15:
  40              	.LBE14:
  20:src/interrupt.cpp ****     switch(scause) {
  41              		.loc 1 20 5 is_stmt 1
  42              	.LBB16:
  43 001c 93079000 		li	a5,9
  44 0020 630EF700 		beq	a4,a5,.L6
  45              	.LVL1:
  46              	.L2:
  47              	.LBE16:
  21:src/interrupt.cpp **** 
  22:src/interrupt.cpp ****         case hwInterrupt: // todo
  23:src/interrupt.cpp ****             break;
  24:src/interrupt.cpp **** 
  25:src/interrupt.cpp ****         case operationInterrupt: // todo
  26:src/interrupt.cpp ****             break;
  27:src/interrupt.cpp **** 
  28:src/interrupt.cpp ****         case addrReadInterrupt: // todo
  29:src/interrupt.cpp ****             break;
  30:src/interrupt.cpp **** 
  31:src/interrupt.cpp ****         case addrWriteInterrupt: // todo
  32:src/interrupt.cpp ****             break;
  33:src/interrupt.cpp **** 
  34:src/interrupt.cpp ****         case ecallUserInterrupt: // todo
  35:src/interrupt.cpp **** 
  36:src/interrupt.cpp ****             break;
  37:src/interrupt.cpp **** 
  38:src/interrupt.cpp ****         case ecallSystemInterupt:
  39:src/interrupt.cpp **** 
  40:src/interrupt.cpp ****             uint64 operation = 0;
  41:src/interrupt.cpp ****             __asm__ volatile("mv %0, a0" :  "=r"(operation));
  42:src/interrupt.cpp **** 
  43:src/interrupt.cpp ****             if(operation == (uint64)MemoryAllocator::MEM_ALLOC) {
  44:src/interrupt.cpp ****                 size_t size;
  45:src/interrupt.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(size));
  46:src/interrupt.cpp ****                 size*=MEM_BLOCK_SIZE;
  47:src/interrupt.cpp ****                 void* allocatedAddr = MemoryAllocator::tryToAllocateFragment(size);
  48:src/interrupt.cpp ****                 __asm__ volatile("mv a0,%0" : : "r"((uint64)allocatedAddr));
  49:src/interrupt.cpp ****             }
  50:src/interrupt.cpp ****             else if(operation == (uint64)MemoryAllocator::MEM_FREE){
  51:src/interrupt.cpp ****                 uint64 addr = 0;
  52:src/interrupt.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(addr));
  53:src/interrupt.cpp ****                 MemoryAllocator::tryToFreeSegment((void*)addr);
  54:src/interrupt.cpp ****             }
  55:src/interrupt.cpp ****             else if(operation == (uint64)PCB::THREAD_CREATE)
  56:src/interrupt.cpp ****             {
  57:src/interrupt.cpp ****                 //thread create
GAS LISTING /tmp/ccDjKDlk.s 			page 4


  58:src/interrupt.cpp **** 
  59:src/interrupt.cpp ****                 //__asm__ volatile("mv %0, a1" : "=r"(size));
  60:src/interrupt.cpp ****             }
  61:src/interrupt.cpp **** 
  62:src/interrupt.cpp **** 
  63:src/interrupt.cpp **** 
  64:src/interrupt.cpp **** 
  65:src/interrupt.cpp ****             uint64 sepc = Riscv::r_sepc();
  66:src/interrupt.cpp ****             sepc+=4;
  67:src/interrupt.cpp ****             Riscv::w_sepc(sepc);
  68:src/interrupt.cpp ****             break;
  69:src/interrupt.cpp ****     }
  70:src/interrupt.cpp **** 
  71:src/interrupt.cpp ****     //todo
  72:src/interrupt.cpp ****     //sta od ovoga treba da se uradi
  73:src/interrupt.cpp **** 
  74:src/interrupt.cpp ****     //uint64 sepc;
  75:src/interrupt.cpp ****     //asm volatile("csrr %0, sepc" : "=r" (sepc));
  76:src/interrupt.cpp ****     //sepc+=4;
  77:src/interrupt.cpp ****     //asm volatile("csrw sepc, %0" : : "r" (sepc));
  78:src/interrupt.cpp **** 
  79:src/interrupt.cpp ****     //uint64 sip;
  80:src/interrupt.cpp ****     //asm volatile("csrr %0, sip" : "=r" (sip));
  81:src/interrupt.cpp ****     //sip &= ~2;
  82:src/interrupt.cpp ****     //asm volatile("csrw sip, %0" : : "r" (sip));
  83:src/interrupt.cpp **** 
  84:src/interrupt.cpp ****     //uint64 sie;
  85:src/interrupt.cpp ****     //asm volatile("csrr %0, sie" : "=r"(sie));
  86:src/interrupt.cpp ****     //sie &= ~2;
  87:src/interrupt.cpp ****     //asm volatile("csrw sie, %0" : : "r" (sie));
  88:src/interrupt.cpp **** 
  89:src/interrupt.cpp ****     console_handler();
  48              		.loc 1 89 5
  49              		.loc 1 89 20 is_stmt 0
  50 0024 97000000 		call	console_handler@plt
  50      E7800000 
  51              	.LVL2:
  90:src/interrupt.cpp **** }
  52              		.loc 1 90 1
  53 002c 83308101 		ld	ra,24(sp)
  54              		.cfi_remember_state
  55              		.cfi_restore 1
  56 0030 03340101 		ld	s0,16(sp)
  57              		.cfi_restore 8
  58              		.cfi_def_cfa 2, 32
  59 0034 13010102 		addi	sp,sp,32
  60              		.cfi_def_cfa_offset 0
  61 0038 67800000 		jr	ra
  62              	.LVL3:
  63              	.L6:
  64              		.cfi_restore_state
  65              	.LBB30:
  66              	.LBB17:
  38:src/interrupt.cpp **** 
  67              		.loc 1 38 9 is_stmt 1
  40:src/interrupt.cpp ****             __asm__ volatile("mv %0, a0" :  "=r"(operation));
  68              		.loc 1 40 13
GAS LISTING /tmp/ccDjKDlk.s 			page 5


  41:src/interrupt.cpp **** 
  69              		.loc 1 41 13
  41:src/interrupt.cpp **** 
  70              		.loc 1 41 61 is_stmt 0
  71              	#APP
  72              	# 41 "src/interrupt.cpp" 1
  73              		mv a5, a0
  74              	# 0 "" 2
  75              	.LVL4:
  43:src/interrupt.cpp ****                 size_t size;
  76              		.loc 1 43 13 is_stmt 1
  77              	#NO_APP
  78              	.LBB18:
  79 0040 13071000 		li	a4,1
  80              	.LVL5:
  81 0044 6382E702 		beq	a5,a4,.L7
  82              	.LBE18:
  83              	.LBE17:
  84              	.LBE30:
  50:src/interrupt.cpp ****                 uint64 addr = 0;
  85              		.loc 1 50 18
  86              	.LBB31:
  87              	.LBB29:
  88              	.LBB23:
  89              	.LBB19:
  90 0048 13072000 		li	a4,2
  91 004c 638AE702 		beq	a5,a4,.L8
  92              	.LVL6:
  93              	.L4:
  94              	.LBE19:
  95              	.LBE23:
  65:src/interrupt.cpp ****             sepc+=4;
  96              		.loc 1 65 13
  97              	.LBB24:
  98              	.LBB25:
  69:src/../h/Riscv.h **** }
  70:src/../h/Riscv.h **** 
  71:src/../h/Riscv.h **** inline void Riscv::w_scause(uint64 scause) {
  72:src/../h/Riscv.h ****     __asm__ volatile("csrw scause, %0" : :"r"(scause));
  73:src/../h/Riscv.h **** }
  74:src/../h/Riscv.h **** 
  75:src/../h/Riscv.h **** inline uint64 Riscv::r_sepc() {
  76:src/../h/Riscv.h ****     uint64 volatile sepc;
  99              		.loc 2 76 5
  77:src/../h/Riscv.h ****     __asm__ volatile("csrr %0, sepc" : "=r"(sepc));
 100              		.loc 2 77 5
 101              		.loc 2 77 51 is_stmt 0
 102              	#APP
 103              	# 77 "src/../h/Riscv.h" 1
  78              	    return sepc;
 104              		csrr a5, sepc
 105              	# 0 "" 2
 106              	#NO_APP
 107 0054 2334F4FE 		sd	a5,-24(s0)
 108              		.loc 2 78 5 is_stmt 1
 109              		.loc 2 78 12 is_stmt 0
 110 0058 833784FE 		ld	a5,-24(s0)
GAS LISTING /tmp/ccDjKDlk.s 			page 6


 111              	.LVL7:
 112              	.LBE25:
 113              	.LBE24:
  66:src/interrupt.cpp ****             Riscv::w_sepc(sepc);
 114              		.loc 1 66 13 is_stmt 1
  66:src/interrupt.cpp ****             Riscv::w_sepc(sepc);
 115              		.loc 1 66 17 is_stmt 0
 116 005c 93874700 		addi	a5,a5,4
 117              	.LVL8:
  67:src/interrupt.cpp ****             break;
 118              		.loc 1 67 13 is_stmt 1
 119              	.LBB26:
 120              	.LBB27:
  79:src/../h/Riscv.h **** }
  80:src/../h/Riscv.h **** 
  81:src/../h/Riscv.h **** inline void Riscv::w_sepc(uint64 sepc) {
  82:src/../h/Riscv.h ****     __asm__ volatile("csrw sepc, %0" : :"r"(sepc));
 121              		.loc 2 82 5
 122              		.loc 2 82 51 is_stmt 0
 123              	#APP
 124              	# 82 "src/../h/Riscv.h" 1
  83              	}
 125              		csrw sepc, a5
 126              	# 0 "" 2
 127              		.loc 2 83 1
 128              	#NO_APP
 129 0064 6FF01FFC 		j	.L2
 130              	.LVL9:
 131              	.L7:
 132              	.LBE27:
 133              	.LBE26:
 134              	.LBB28:
 135              	.LBB21:
  44:src/interrupt.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(size));
 136              		.loc 1 44 17 is_stmt 1
  45:src/interrupt.cpp ****                 size*=MEM_BLOCK_SIZE;
 137              		.loc 1 45 17
  45:src/interrupt.cpp ****                 size*=MEM_BLOCK_SIZE;
 138              		.loc 1 45 59 is_stmt 0
 139              	#APP
 140              	# 45 "src/interrupt.cpp" 1
 141              		mv a0, a1
 142              	# 0 "" 2
 143              	.LVL10:
  46:src/interrupt.cpp ****                 void* allocatedAddr = MemoryAllocator::tryToAllocateFragment(size);
 144              		.loc 1 46 17 is_stmt 1
  47:src/interrupt.cpp ****                 __asm__ volatile("mv a0,%0" : : "r"((uint64)allocatedAddr));
 145              		.loc 1 47 17
  47:src/interrupt.cpp ****                 __asm__ volatile("mv a0,%0" : : "r"((uint64)allocatedAddr));
 146              		.loc 1 47 77 is_stmt 0
 147              	#NO_APP
 148 006c 13156500 		slli	a0,a0,6
 149              	.LVL11:
 150 0070 97000000 		call	_ZN15MemoryAllocator21tryToAllocateFragmentEm@plt
 150      E7800000 
 151              	.LVL12:
  48:src/interrupt.cpp ****             }
GAS LISTING /tmp/ccDjKDlk.s 			page 7


 152              		.loc 1 48 17 is_stmt 1
  48:src/interrupt.cpp ****             }
 153              		.loc 1 48 76 is_stmt 0
 154              	#APP
 155              	# 48 "src/interrupt.cpp" 1
 156              		mv a0,a0
 157              	# 0 "" 2
 158              	#NO_APP
 159              	.LBE21:
 160 007c 6FF05FFD 		j	.L4
 161              	.LVL13:
 162              	.L8:
 163              	.LBB22:
 164              	.LBB20:
  51:src/interrupt.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(addr));
 165              		.loc 1 51 17 is_stmt 1
  52:src/interrupt.cpp ****                 MemoryAllocator::tryToFreeSegment((void*)addr);
 166              		.loc 1 52 17
  52:src/interrupt.cpp ****                 MemoryAllocator::tryToFreeSegment((void*)addr);
 167              		.loc 1 52 59 is_stmt 0
 168              	#APP
 169              	# 52 "src/interrupt.cpp" 1
 170              		mv a0, a1
 171              	# 0 "" 2
 172              	.LVL14:
  53:src/interrupt.cpp ****             }
 173              		.loc 1 53 17 is_stmt 1
  53:src/interrupt.cpp ****             }
 174              		.loc 1 53 50 is_stmt 0
 175              	#NO_APP
 176 0084 97000000 		call	_ZN15MemoryAllocator16tryToFreeSegmentEPv@plt
 176      E7800000 
 177              	.LVL15:
 178              	.LBE20:
 179 008c 6FF05FFC 		j	.L4
 180              	.LBE22:
 181              	.LBE28:
 182              	.LBE29:
 183              	.LBE31:
 184              		.cfi_endproc
 185              	.LFE21:
 187              		.globl	ecallSystemInterupt
 188              		.globl	ecallUserInterrupt
 189              		.globl	addrWriteInterrupt
 190              		.globl	addrReadInterrupt
 191              		.globl	operationInterrupt
 192              		.globl	hwInterrupt
 193              		.globl	bntZero
 194              		.globl	bntOne
 195              		.section	.rodata
 196              		.align	3
 199              	ecallSystemInterupt:
 200 0000 09000000 		.dword	9
 200      00000000 
 203              	ecallUserInterrupt:
 204 0008 08000000 		.dword	8
 204      00000000 
GAS LISTING /tmp/ccDjKDlk.s 			page 8


 207              	addrWriteInterrupt:
 208 0010 07000000 		.dword	7
 208      00000000 
 211              	addrReadInterrupt:
 212 0018 05000000 		.dword	5
 212      00000000 
 215              	operationInterrupt:
 216 0020 02000000 		.dword	2
 216      00000000 
 219              	hwInterrupt:
 220 0028 09000000 		.dword	-9223372036854775799
 220      00000080 
 223              	bntZero:
 224 0030 00000000 		.zero	8
 224      00000000 
 227              	bntOne:
 228 0038 00000000 		.dword	-9223372036854775808
 228      00000080 
 229              		.text
 230              	.Letext0:
 231              		.file 3 "src/../h/../lib/hw.h"
 232              		.file 4 "src/../h/MemoryAllocator.h"
 233              		.file 5 "src/../h/interrupt.h"
 234              		.file 6 "src/../h/../lib/console.h"
GAS LISTING /tmp/ccDjKDlk.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 interrupt.cpp
     /tmp/ccDjKDlk.s:9      .text:0000000000000000 interrupt
     /tmp/ccDjKDlk.s:13     .text:0000000000000000 .L0 
     /tmp/ccDjKDlk.s:14     .text:0000000000000000 .L0 
     /tmp/ccDjKDlk.s:15     .text:0000000000000004 .L0 
     /tmp/ccDjKDlk.s:18     .text:000000000000000c .L0 
     /tmp/ccDjKDlk.s:19     .text:000000000000000c .L0 
     /tmp/ccDjKDlk.s:21     .text:0000000000000010 .L0 
     /tmp/ccDjKDlk.s:26     .text:0000000000000010 .L0 
     /tmp/ccDjKDlk.s:27     .text:0000000000000010 .L0 
     /tmp/ccDjKDlk.s:28     .text:0000000000000010 .L0 
    src/../h/Riscv.h:67     .text:0000000000000010 .L0 
     /tmp/ccDjKDlk.s:36     .text:0000000000000018 .L0 
     /tmp/ccDjKDlk.s:37     .text:0000000000000018 .L0 
     /tmp/ccDjKDlk.s:43     .text:000000000000001c .L0 
     /tmp/ccDjKDlk.s:49     .text:0000000000000024 .L0 
     /tmp/ccDjKDlk.s:50     .text:0000000000000024 .L0 
     /tmp/ccDjKDlk.s:53     .text:000000000000002c .L0 
     /tmp/ccDjKDlk.s:54     .text:0000000000000030 .L0 
     /tmp/ccDjKDlk.s:55     .text:0000000000000030 .L0 
     /tmp/ccDjKDlk.s:57     .text:0000000000000034 .L0 
     /tmp/ccDjKDlk.s:58     .text:0000000000000034 .L0 
     /tmp/ccDjKDlk.s:60     .text:0000000000000038 .L0 
     /tmp/ccDjKDlk.s:64     .text:000000000000003c .L0 
     /tmp/ccDjKDlk.s:68     .text:000000000000003c .L0 
     /tmp/ccDjKDlk.s:69     .text:000000000000003c .L0 
     /tmp/ccDjKDlk.s:70     .text:000000000000003c .L0 
   src/interrupt.cpp:41     .text:000000000000003c .L0 
     /tmp/ccDjKDlk.s:79     .text:0000000000000040 .L0 
     /tmp/ccDjKDlk.s:90     .text:0000000000000048 .L0 
     /tmp/ccDjKDlk.s:99     .text:0000000000000050 .L0 
     /tmp/ccDjKDlk.s:100    .text:0000000000000050 .L0 
     /tmp/ccDjKDlk.s:101    .text:0000000000000050 .L0 
    src/../h/Riscv.h:77     .text:0000000000000050 .L0 
     /tmp/ccDjKDlk.s:109    .text:0000000000000058 .L0 
     /tmp/ccDjKDlk.s:110    .text:0000000000000058 .L0 
     /tmp/ccDjKDlk.s:115    .text:000000000000005c .L0 
     /tmp/ccDjKDlk.s:116    .text:000000000000005c .L0 
     /tmp/ccDjKDlk.s:121    .text:0000000000000060 .L0 
     /tmp/ccDjKDlk.s:122    .text:0000000000000060 .L0 
    src/../h/Riscv.h:82     .text:0000000000000060 .L0 
     /tmp/ccDjKDlk.s:129    .text:0000000000000064 .L0 
     /tmp/ccDjKDlk.s:137    .text:0000000000000068 .L0 
     /tmp/ccDjKDlk.s:138    .text:0000000000000068 .L0 
   src/interrupt.cpp:45     .text:0000000000000068 .L0 
     /tmp/ccDjKDlk.s:145    .text:000000000000006c .L0 
     /tmp/ccDjKDlk.s:146    .text:000000000000006c .L0 
     /tmp/ccDjKDlk.s:148    .text:000000000000006c .L0 
     /tmp/ccDjKDlk.s:153    .text:0000000000000078 .L0 
   src/interrupt.cpp:48     .text:0000000000000078 .L0 
     /tmp/ccDjKDlk.s:166    .text:0000000000000080 .L0 
     /tmp/ccDjKDlk.s:167    .text:0000000000000080 .L0 
   src/interrupt.cpp:52     .text:0000000000000080 .L0 
     /tmp/ccDjKDlk.s:174    .text:0000000000000084 .L0 
     /tmp/ccDjKDlk.s:176    .text:0000000000000084 .L0 
     /tmp/ccDjKDlk.s:184    .text:0000000000000090 .L0 
GAS LISTING /tmp/ccDjKDlk.s 			page 10


     /tmp/ccDjKDlk.s:199    .rodata:0000000000000000 ecallSystemInterupt
     /tmp/ccDjKDlk.s:203    .rodata:0000000000000008 ecallUserInterrupt
     /tmp/ccDjKDlk.s:207    .rodata:0000000000000010 addrWriteInterrupt
     /tmp/ccDjKDlk.s:211    .rodata:0000000000000018 addrReadInterrupt
     /tmp/ccDjKDlk.s:215    .rodata:0000000000000020 operationInterrupt
     /tmp/ccDjKDlk.s:219    .rodata:0000000000000028 hwInterrupt
     /tmp/ccDjKDlk.s:223    .rodata:0000000000000030 bntZero
     /tmp/ccDjKDlk.s:227    .rodata:0000000000000038 bntOne
     /tmp/ccDjKDlk.s:235    .text:0000000000000090 .L0 
     /tmp/ccDjKDlk.s:63     .text:000000000000003c .L6
     /tmp/ccDjKDlk.s:131    .text:0000000000000068 .L7
     /tmp/ccDjKDlk.s:162    .text:0000000000000080 .L8
     /tmp/ccDjKDlk.s:46     .text:0000000000000024 .L2
     /tmp/ccDjKDlk.s:93     .text:0000000000000050 .L4
     /tmp/ccDjKDlk.s:1020   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccDjKDlk.s:1737   .debug_str:0000000000000189 .LASF95
     /tmp/ccDjKDlk.s:1877   .debug_str:00000000000006b9 .LASF96
     /tmp/ccDjKDlk.s:1723   .debug_str:0000000000000106 .LASF97
     /tmp/ccDjKDlk.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccDjKDlk.s:230    .text:0000000000000090 .Letext0
     /tmp/ccDjKDlk.s:1685   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccDjKDlk.s:1799   .debug_str:0000000000000424 .LASF0
     /tmp/ccDjKDlk.s:1809   .debug_str:0000000000000474 .LASF1
     /tmp/ccDjKDlk.s:1789   .debug_str:00000000000003e9 .LASF2
     /tmp/ccDjKDlk.s:1775   .debug_str:0000000000000389 .LASF4
     /tmp/ccDjKDlk.s:1843   .debug_str:00000000000005a2 .LASF3
     /tmp/ccDjKDlk.s:1709   .debug_str:0000000000000088 .LASF5
     /tmp/ccDjKDlk.s:1813   .debug_str:0000000000000494 .LASF6
     /tmp/ccDjKDlk.s:1797   .debug_str:0000000000000411 .LASF7
     /tmp/ccDjKDlk.s:1859   .debug_str:000000000000061b .LASF8
     /tmp/ccDjKDlk.s:1763   .debug_str:00000000000002f2 .LASF9
     /tmp/ccDjKDlk.s:1821   .debug_str:00000000000004ee .LASF10
     /tmp/ccDjKDlk.s:1857   .debug_str:000000000000060c .LASF11
     /tmp/ccDjKDlk.s:1711   .debug_str:000000000000008f .LASF12
     /tmp/ccDjKDlk.s:1693   .debug_str:0000000000000034 .LASF13
     /tmp/ccDjKDlk.s:1721   .debug_str:00000000000000fa .LASF14
     /tmp/ccDjKDlk.s:1839   .debug_str:0000000000000574 .LASF15
     /tmp/ccDjKDlk.s:1725   .debug_str:0000000000000129 .LASF16
     /tmp/ccDjKDlk.s:1807   .debug_str:000000000000046e .LASF53
     /tmp/ccDjKDlk.s:1793   .debug_str:0000000000000401 .LASF17
     /tmp/ccDjKDlk.s:1757   .debug_str:00000000000002b3 .LASF19
     /tmp/ccDjKDlk.s:1707   .debug_str:000000000000007a .LASF18
     /tmp/ccDjKDlk.s:1743   .debug_str:0000000000000249 .LASF20
     /tmp/ccDjKDlk.s:1851   .debug_str:00000000000005da .LASF21
     /tmp/ccDjKDlk.s:1689   .debug_str:0000000000000008 .LASF22
     /tmp/ccDjKDlk.s:1695   .debug_str:0000000000000044 .LASF23
     /tmp/ccDjKDlk.s:1849   .debug_str:00000000000005c5 .LASF25
     /tmp/ccDjKDlk.s:1741   .debug_str:0000000000000240 .LASF27
     /tmp/ccDjKDlk.s:1739   .debug_str:000000000000022b .LASF29
     /tmp/ccDjKDlk.s:1845   .debug_str:00000000000005b4 .LASF24
     /tmp/ccDjKDlk.s:1829   .debug_str:000000000000051f .LASF26
     /tmp/ccDjKDlk.s:1837   .debug_str:000000000000056d .LASF28
     /tmp/ccDjKDlk.s:1853   .debug_str:00000000000005e7 .LASF30
     /tmp/ccDjKDlk.s:1755   .debug_str:00000000000002ab .LASF31
     /tmp/ccDjKDlk.s:1727   .debug_str:000000000000013f .LASF32
     /tmp/ccDjKDlk.s:1687   .debug_str:0000000000000000 .LASF33
     /tmp/ccDjKDlk.s:1769   .debug_str:0000000000000331 .LASF34
GAS LISTING /tmp/ccDjKDlk.s 			page 11


     /tmp/ccDjKDlk.s:1745   .debug_str:0000000000000264 .LASF35
     /tmp/ccDjKDlk.s:1717   .debug_str:00000000000000dc .LASF36
     /tmp/ccDjKDlk.s:1881   .debug_str:00000000000006d6 .LASF37
     /tmp/ccDjKDlk.s:1747   .debug_str:000000000000026c .LASF38
     /tmp/ccDjKDlk.s:1801   .debug_str:0000000000000431 .LASF39
     /tmp/ccDjKDlk.s:1869   .debug_str:0000000000000676 .LASF40
     /tmp/ccDjKDlk.s:1703   .debug_str:0000000000000068 .LASF41
     /tmp/ccDjKDlk.s:1753   .debug_str:0000000000000298 .LASF42
     /tmp/ccDjKDlk.s:1759   .debug_str:00000000000002cb .LASF43
     /tmp/ccDjKDlk.s:1855   .debug_str:00000000000005fa .LASF44
     /tmp/ccDjKDlk.s:1701   .debug_str:0000000000000062 .LASF45
     /tmp/ccDjKDlk.s:1883   .debug_str:00000000000006de .LASF46
     /tmp/ccDjKDlk.s:1879   .debug_str:00000000000006cb .LASF47
     /tmp/ccDjKDlk.s:1841   .debug_str:000000000000058a .LASF48
     /tmp/ccDjKDlk.s:1777   .debug_str:0000000000000390 .LASF49
     /tmp/ccDjKDlk.s:1785   .debug_str:00000000000003c1 .LASF50
     /tmp/ccDjKDlk.s:1719   .debug_str:00000000000000f0 .LASF51
     /tmp/ccDjKDlk.s:1773   .debug_str:0000000000000373 .LASF52
     /tmp/ccDjKDlk.s:1791   .debug_str:00000000000003f7 .LASF76
     /tmp/ccDjKDlk.s:1767   .debug_str:000000000000031b .LASF78
     /tmp/ccDjKDlk.s:1787   .debug_str:00000000000003d9 .LASF54
     /tmp/ccDjKDlk.s:1811   .debug_str:0000000000000487 .LASF57
     /tmp/ccDjKDlk.s:1833   .debug_str:0000000000000545 .LASF55
     /tmp/ccDjKDlk.s:1795   .debug_str:000000000000040c .LASF56
     /tmp/ccDjKDlk.s:1691   .debug_str:0000000000000022 .LASF58
     /tmp/ccDjKDlk.s:1871   .debug_str:0000000000000689 .LASF59
     /tmp/ccDjKDlk.s:1729   .debug_str:0000000000000153 .LASF60
     /tmp/ccDjKDlk.s:1733   .debug_str:0000000000000166 .LASF61
     /tmp/ccDjKDlk.s:1781   .debug_str:00000000000003a7 .LASF62
     /tmp/ccDjKDlk.s:1847   .debug_str:00000000000005bb .LASF63
     /tmp/ccDjKDlk.s:1861   .debug_str:000000000000062b .LASF64
     /tmp/ccDjKDlk.s:1863   .debug_str:0000000000000635 .LASF66
     /tmp/ccDjKDlk.s:1825   .debug_str:0000000000000502 .LASF65
     /tmp/ccDjKDlk.s:1761   .debug_str:00000000000002d1 .LASF67
     /tmp/ccDjKDlk.s:1705   .debug_str:000000000000006f .LASF68
     /tmp/ccDjKDlk.s:1835   .debug_str:000000000000054a .LASF69
     /tmp/ccDjKDlk.s:1765   .debug_str:0000000000000300 .LASF70
     /tmp/ccDjKDlk.s:1713   .debug_str:000000000000009f .LASF71
     /tmp/ccDjKDlk.s:1865   .debug_str:0000000000000656 .LASF72
     /tmp/ccDjKDlk.s:1771   .debug_str:0000000000000345 .LASF73
     /tmp/ccDjKDlk.s:1873   .debug_str:0000000000000692 .LASF74
     /tmp/ccDjKDlk.s:1803   .debug_str:0000000000000438 .LASF75
     /tmp/ccDjKDlk.s:1783   .debug_str:00000000000003b0 .LASF77
     /tmp/ccDjKDlk.s:1817   .debug_str:00000000000004ba .LASF79
     /tmp/ccDjKDlk.s:1749   .debug_str:0000000000000280 .LASF80
     /tmp/ccDjKDlk.s:1805   .debug_str:0000000000000467 .LASF81
     /tmp/ccDjKDlk.s:1715   .debug_str:00000000000000d4 .LASF82
     /tmp/ccDjKDlk.s:1779   .debug_str:000000000000039b .LASF83
     /tmp/ccDjKDlk.s:1831   .debug_str:0000000000000532 .LASF84
     /tmp/ccDjKDlk.s:1875   .debug_str:00000000000006a7 .LASF85
     /tmp/ccDjKDlk.s:1815   .debug_str:00000000000004a7 .LASF86
     /tmp/ccDjKDlk.s:1751   .debug_str:0000000000000285 .LASF87
     /tmp/ccDjKDlk.s:1827   .debug_str:000000000000050b .LASF88
     /tmp/ccDjKDlk.s:1819   .debug_str:00000000000004e4 .LASF89
     /tmp/ccDjKDlk.s:10     .text:0000000000000000 .LFB21
     /tmp/ccDjKDlk.s:185    .text:0000000000000090 .LFE21
     /tmp/ccDjKDlk.s:1697   .debug_str:000000000000004d .LASF90
GAS LISTING /tmp/ccDjKDlk.s 			page 12


     /tmp/ccDjKDlk.s:1585   .debug_loc:0000000000000000 .LLST0
     /tmp/ccDjKDlk.s:1677   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccDjKDlk.s:1867   .debug_str:000000000000066c .LASF91
     /tmp/ccDjKDlk.s:1596   .debug_loc:0000000000000036 .LLST1
     /tmp/ccDjKDlk.s:1731   .debug_str:0000000000000161 .LASF92
     /tmp/ccDjKDlk.s:1616   .debug_loc:0000000000000093 .LLST2
     /tmp/ccDjKDlk.s:135    .text:0000000000000068 .LBB21
     /tmp/ccDjKDlk.s:159    .text:000000000000007c .LBE21
     /tmp/ccDjKDlk.s:1623   .debug_loc:00000000000000b6 .LLST4
     /tmp/ccDjKDlk.s:1699   .debug_str:0000000000000054 .LASF93
     /tmp/ccDjKDlk.s:1638   .debug_loc:00000000000000f0 .LLST5
     /tmp/ccDjKDlk.s:151    .text:0000000000000078 .LVL12
     /tmp/ccDjKDlk.s:164    .text:0000000000000080 .LBB20
     /tmp/ccDjKDlk.s:178    .text:000000000000008c .LBE20
     /tmp/ccDjKDlk.s:1823   .debug_str:00000000000004fd .LASF94
     /tmp/ccDjKDlk.s:1645   .debug_loc:0000000000000113 .LLST3
     /tmp/ccDjKDlk.s:177    .text:000000000000008c .LVL15
     /tmp/ccDjKDlk.s:97     .text:0000000000000050 .LBB24
     /tmp/ccDjKDlk.s:113    .text:000000000000005c .LBE24
     /tmp/ccDjKDlk.s:119    .text:0000000000000060 .LBB26
     /tmp/ccDjKDlk.s:133    .text:0000000000000068 .LBE26
     /tmp/ccDjKDlk.s:1657   .debug_loc:000000000000014a .LLST6
     /tmp/ccDjKDlk.s:23     .text:0000000000000010 .LBB14
     /tmp/ccDjKDlk.s:40     .text:000000000000001c .LBE14
     /tmp/ccDjKDlk.s:51     .text:000000000000002c .LVL2
     /tmp/ccDjKDlk.s:1735   .debug_str:0000000000000179 .LASF98
     /tmp/ccDjKDlk.s:38     .text:000000000000001c .LVL0
     /tmp/ccDjKDlk.s:45     .text:0000000000000024 .LVL1
     /tmp/ccDjKDlk.s:62     .text:000000000000003c .LVL3
     /tmp/ccDjKDlk.s:80     .text:0000000000000044 .LVL5
     /tmp/ccDjKDlk.s:75     .text:0000000000000040 .LVL4
     /tmp/ccDjKDlk.s:92     .text:0000000000000050 .LVL6
     /tmp/ccDjKDlk.s:130    .text:0000000000000068 .LVL9
     /tmp/ccDjKDlk.s:161    .text:0000000000000080 .LVL13
     /tmp/ccDjKDlk.s:111    .text:000000000000005c .LVL7
     /tmp/ccDjKDlk.s:143    .text:000000000000006c .LVL10
     /tmp/ccDjKDlk.s:149    .text:0000000000000070 .LVL11
     /tmp/ccDjKDlk.s:172    .text:0000000000000084 .LVL14
     /tmp/ccDjKDlk.s:117    .text:0000000000000060 .LVL8
     /tmp/ccDjKDlk.s:236    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccDjKDlk.s:66     .text:000000000000003c .LBB17
     /tmp/ccDjKDlk.s:83     .text:0000000000000048 .LBE17
     /tmp/ccDjKDlk.s:87     .text:0000000000000048 .LBB29
     /tmp/ccDjKDlk.s:182    .text:0000000000000090 .LBE29

UNDEFINED SYMBOLS
console_handler
_ZN15MemoryAllocator21tryToAllocateFragmentEm
_ZN15MemoryAllocator16tryToFreeSegmentEPv
