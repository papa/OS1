GAS LISTING /tmp/cck1qGYV.s 			page 1


   1              		.file	"interrupt.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	interrupt
   9              	interrupt:
  10              	.LFB0:
  11              		.file 1 "src/interrupt.cpp"
   1:src/interrupt.cpp **** //
   2:src/interrupt.cpp **** // Created by os on 4/12/22.
   3:src/interrupt.cpp **** //
   4:src/interrupt.cpp **** 
   5:src/interrupt.cpp **** #include "../h/interrupt.h"
   6:src/interrupt.cpp **** 
   7:src/interrupt.cpp **** const uint64 bntOne = 1UL << 63;
   8:src/interrupt.cpp **** const uint64 bntZero = 0;
   9:src/interrupt.cpp **** 
  10:src/interrupt.cpp **** const uint64 hwInterrupt = bntOne + 9UL;
  11:src/interrupt.cpp **** const uint64 operationInterrupt = bntZero + 2UL;
  12:src/interrupt.cpp **** const uint64 addrReadInterrupt = bntZero + 5UL;
  13:src/interrupt.cpp **** const uint64 addrWriteInterrupt = bntZero + 7UL;
  14:src/interrupt.cpp **** const uint64 ecallUserInterrupt = bntZero + 8UL;
  15:src/interrupt.cpp **** const uint64 ecallSystemInterupt = bntZero + 9UL;
  16:src/interrupt.cpp **** 
  17:src/interrupt.cpp **** extern "C" void interrupt() {
  12              		.loc 1 17 29
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  18:src/interrupt.cpp **** 
  19:src/interrupt.cpp ****     uint64 scause;
  22              		.loc 1 19 5
  20:src/interrupt.cpp ****     __asm__ volatile("csrr %0,scause":"=r"(scause));
  23              		.loc 1 20 5
  24              		.loc 1 20 52 is_stmt 0
  25              	#APP
  26              	# 20 "src/interrupt.cpp" 1
  21              	    switch(scause) {
  27              		csrr a4,scause
  28              	# 0 "" 2
  29              	.LVL0:
  30              		.loc 1 21 5 is_stmt 1
  31              	#NO_APP
  32              	.LBB2:
  33 0014 93079000 		li	a5,9
  34 0018 630EF700 		beq	a4,a5,.L5
  35              	.LVL1:
  36              	.L2:
  37              	.LBE2:
GAS LISTING /tmp/cck1qGYV.s 			page 2


  22:src/interrupt.cpp **** 
  23:src/interrupt.cpp ****         case hwInterrupt: // todo
  24:src/interrupt.cpp ****             break;
  25:src/interrupt.cpp **** 
  26:src/interrupt.cpp ****         case operationInterrupt: // todo
  27:src/interrupt.cpp ****             break;
  28:src/interrupt.cpp **** 
  29:src/interrupt.cpp ****         case addrReadInterrupt: // todo
  30:src/interrupt.cpp ****             break;
  31:src/interrupt.cpp **** 
  32:src/interrupt.cpp ****         case addrWriteInterrupt: // todo
  33:src/interrupt.cpp ****             break;
  34:src/interrupt.cpp **** 
  35:src/interrupt.cpp ****         case ecallUserInterrupt: // todo
  36:src/interrupt.cpp **** 
  37:src/interrupt.cpp ****             break;
  38:src/interrupt.cpp **** 
  39:src/interrupt.cpp ****         case ecallSystemInterupt:
  40:src/interrupt.cpp **** 
  41:src/interrupt.cpp ****             uint64 operation = 0;
  42:src/interrupt.cpp ****             __asm__ volatile("mv %0, a0" :  "=r"(operation));
  43:src/interrupt.cpp **** 
  44:src/interrupt.cpp ****             if(operation == (uint64)MEM_ALLOC) {
  45:src/interrupt.cpp ****                 size_t size;
  46:src/interrupt.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(size));
  47:src/interrupt.cpp ****                 size*=MEM_BLOCK_SIZE;
  48:src/interrupt.cpp ****                 void* allocatedAddr = tryToAllocateFragment(size);
  49:src/interrupt.cpp ****                 __asm__ volatile("mv a0,%0" : : "r"((uint64)allocatedAddr));
  50:src/interrupt.cpp ****             }
  51:src/interrupt.cpp ****             else if(operation == (uint64)MEM_FREE){
  52:src/interrupt.cpp ****                 uint64 addr = 0;
  53:src/interrupt.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(addr));
  54:src/interrupt.cpp ****                 tryToFreeSegment((void*)addr);
  55:src/interrupt.cpp ****             }
  56:src/interrupt.cpp ****             else if(operation == (uint64)0x11)
  57:src/interrupt.cpp ****             {
  58:src/interrupt.cpp ****                 //thread create
  59:src/interrupt.cpp **** 
  60:src/interrupt.cpp ****                 //__asm__ volatile("mv %0, a1" : "=r"(size));
  61:src/interrupt.cpp ****             }
  62:src/interrupt.cpp **** 
  63:src/interrupt.cpp **** 
  64:src/interrupt.cpp **** 
  65:src/interrupt.cpp **** 
  66:src/interrupt.cpp ****             //uint64 sepc;
  67:src/interrupt.cpp ****             //asm volatile("csrr %0, sepc" : "=r" (sepc));
  68:src/interrupt.cpp ****             //sepc+=4;
  69:src/interrupt.cpp ****             //asm volatile("csrw sepc, %0" : : "r" (sepc));
  70:src/interrupt.cpp **** 
  71:src/interrupt.cpp ****             break;
  72:src/interrupt.cpp ****     }
  73:src/interrupt.cpp **** 
  74:src/interrupt.cpp ****     //todo
  75:src/interrupt.cpp ****     //sta od ovoga treba da se uradi
  76:src/interrupt.cpp **** 
  77:src/interrupt.cpp ****     //uint64 sepc;
  78:src/interrupt.cpp ****     //asm volatile("csrr %0, sepc" : "=r" (sepc));
GAS LISTING /tmp/cck1qGYV.s 			page 3


  79:src/interrupt.cpp ****     //sepc+=4;
  80:src/interrupt.cpp ****     //asm volatile("csrw sepc, %0" : : "r" (sepc));
  81:src/interrupt.cpp **** 
  82:src/interrupt.cpp ****     //uint64 sip;
  83:src/interrupt.cpp ****     //asm volatile("csrr %0, sip" : "=r" (sip));
  84:src/interrupt.cpp ****     //sip &= ~2;
  85:src/interrupt.cpp ****     //asm volatile("csrw sip, %0" : : "r" (sip));
  86:src/interrupt.cpp **** 
  87:src/interrupt.cpp ****     //uint64 sie;
  88:src/interrupt.cpp ****     //asm volatile("csrr %0, sie" : "=r"(sie));
  89:src/interrupt.cpp ****     //sie &= ~2;
  90:src/interrupt.cpp ****     //asm volatile("csrw sie, %0" : : "r" (sie));
  91:src/interrupt.cpp **** 
  92:src/interrupt.cpp ****     console_handler();
  38              		.loc 1 92 5
  39              		.loc 1 92 20 is_stmt 0
  40 001c 97000000 		call	console_handler@plt
  40      E7800000 
  41              	.LVL2:
  93:src/interrupt.cpp **** }
  42              		.loc 1 93 1
  43 0024 83308100 		ld	ra,8(sp)
  44              		.cfi_remember_state
  45              		.cfi_restore 1
  46 0028 03340100 		ld	s0,0(sp)
  47              		.cfi_restore 8
  48              		.cfi_def_cfa 2, 16
  49 002c 13010101 		addi	sp,sp,16
  50              		.cfi_def_cfa_offset 0
  51 0030 67800000 		jr	ra
  52              	.LVL3:
  53              	.L5:
  54              		.cfi_restore_state
  55              	.LBB10:
  56              	.LBB3:
  39:src/interrupt.cpp **** 
  57              		.loc 1 39 9 is_stmt 1
  41:src/interrupt.cpp ****             __asm__ volatile("mv %0, a0" :  "=r"(operation));
  58              		.loc 1 41 13
  42:src/interrupt.cpp **** 
  59              		.loc 1 42 13
  42:src/interrupt.cpp **** 
  60              		.loc 1 42 61 is_stmt 0
  61              	#APP
  62              	# 42 "src/interrupt.cpp" 1
  63              		mv a5, a0
  64              	# 0 "" 2
  65              	.LVL4:
  44:src/interrupt.cpp ****                 size_t size;
  66              		.loc 1 44 13 is_stmt 1
  67              	#NO_APP
  68              	.LBB4:
  44:src/interrupt.cpp ****                 size_t size;
  69              		.loc 1 44 29 is_stmt 0
  70 0038 17070000 		la	a4,MEM_ALLOC
  70      03370700 
  71              	.LVL5:
GAS LISTING /tmp/cck1qGYV.s 			page 4


  72 0040 03270700 		lw	a4,0(a4)
  44:src/interrupt.cpp ****                 size_t size;
  73              		.loc 1 44 13
  74 0044 6302F702 		beq	a4,a5,.L6
  75              	.LBE4:
  76              	.LBE3:
  77              	.LBE10:
  51:src/interrupt.cpp ****                 uint64 addr = 0;
  78              		.loc 1 51 18 is_stmt 1
  79              	.LBB11:
  80              	.LBB9:
  81              	.LBB8:
  82              	.LBB5:
  51:src/interrupt.cpp ****                 uint64 addr = 0;
  83              		.loc 1 51 34 is_stmt 0
  84 0048 17070000 		la	a4,MEM_FREE
  84      03370700 
  85 0050 03270700 		lw	a4,0(a4)
  51:src/interrupt.cpp ****                 uint64 addr = 0;
  86              		.loc 1 51 18
  87 0054 E314F7FC 		bne	a4,a5,.L2
  88              	.LBB6:
  52:src/interrupt.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(addr));
  89              		.loc 1 52 17 is_stmt 1
  90              	.LVL6:
  53:src/interrupt.cpp ****                 tryToFreeSegment((void*)addr);
  91              		.loc 1 53 17
  53:src/interrupt.cpp ****                 tryToFreeSegment((void*)addr);
  92              		.loc 1 53 59 is_stmt 0
  93              	#APP
  94              	# 53 "src/interrupt.cpp" 1
  95              		mv a0, a1
  96              	# 0 "" 2
  97              	.LVL7:
  54:src/interrupt.cpp ****             }
  98              		.loc 1 54 17 is_stmt 1
  54:src/interrupt.cpp ****             }
  99              		.loc 1 54 33 is_stmt 0
 100              	#NO_APP
 101 005c 97000000 		call	tryToFreeSegment@plt
 101      E7800000 
 102              	.LVL8:
 103              	.LBE6:
 104 0064 6FF09FFB 		j	.L2
 105              	.LVL9:
 106              	.L6:
 107              	.LBE5:
 108              	.LBB7:
  45:src/interrupt.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(size));
 109              		.loc 1 45 17 is_stmt 1
  46:src/interrupt.cpp ****                 size*=MEM_BLOCK_SIZE;
 110              		.loc 1 46 17
  46:src/interrupt.cpp ****                 size*=MEM_BLOCK_SIZE;
 111              		.loc 1 46 59 is_stmt 0
 112              	#APP
 113              	# 46 "src/interrupt.cpp" 1
 114              		mv a0, a1
GAS LISTING /tmp/cck1qGYV.s 			page 5


 115              	# 0 "" 2
 116              	.LVL10:
  47:src/interrupt.cpp ****                 void* allocatedAddr = tryToAllocateFragment(size);
 117              		.loc 1 47 17 is_stmt 1
  48:src/interrupt.cpp ****                 __asm__ volatile("mv a0,%0" : : "r"((uint64)allocatedAddr));
 118              		.loc 1 48 17
  48:src/interrupt.cpp ****                 __asm__ volatile("mv a0,%0" : : "r"((uint64)allocatedAddr));
 119              		.loc 1 48 60 is_stmt 0
 120              	#NO_APP
 121 006c 13156500 		slli	a0,a0,6
 122              	.LVL11:
 123 0070 97000000 		call	tryToAllocateFragment@plt
 123      E7800000 
 124              	.LVL12:
  49:src/interrupt.cpp ****             }
 125              		.loc 1 49 17 is_stmt 1
  49:src/interrupt.cpp ****             }
 126              		.loc 1 49 76 is_stmt 0
 127              	#APP
 128              	# 49 "src/interrupt.cpp" 1
 129              		mv a0,a0
 130              	# 0 "" 2
 131              	#NO_APP
 132              	.LBE7:
 133 007c 6FF01FFA 		j	.L2
 134              	.LBE8:
 135              	.LBE9:
 136              	.LBE11:
 137              		.cfi_endproc
 138              	.LFE0:
 140              		.globl	ecallSystemInterupt
 141              		.globl	ecallUserInterrupt
 142              		.globl	addrWriteInterrupt
 143              		.globl	addrReadInterrupt
 144              		.globl	operationInterrupt
 145              		.globl	hwInterrupt
 146              		.globl	bntZero
 147              		.globl	bntOne
 148              		.section	.rodata
 149              		.align	3
 152              	ecallSystemInterupt:
 153 0000 09000000 		.dword	9
 153      00000000 
 156              	ecallUserInterrupt:
 157 0008 08000000 		.dword	8
 157      00000000 
 160              	addrWriteInterrupt:
 161 0010 07000000 		.dword	7
 161      00000000 
 164              	addrReadInterrupt:
 165 0018 05000000 		.dword	5
 165      00000000 
 168              	operationInterrupt:
 169 0020 02000000 		.dword	2
 169      00000000 
 172              	hwInterrupt:
 173 0028 09000000 		.dword	-9223372036854775799
GAS LISTING /tmp/cck1qGYV.s 			page 6


 173      00000080 
 176              	bntZero:
 177 0030 00000000 		.zero	8
 177      00000000 
 180              	bntOne:
 181 0038 00000000 		.dword	-9223372036854775808
 181      00000080 
 182              		.text
 183              	.Letext0:
 184              		.file 2 "src/../h/../h/../lib/hw.h"
 185              		.file 3 "src/../h/../h/memoryHandler.h"
 186              		.file 4 "src/../h/interrupt.h"
 187              		.file 5 "src/../h/../lib/console.h"
GAS LISTING /tmp/cck1qGYV.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 interrupt.cpp
     /tmp/cck1qGYV.s:9      .text:0000000000000000 interrupt
     /tmp/cck1qGYV.s:13     .text:0000000000000000 .L0 
     /tmp/cck1qGYV.s:14     .text:0000000000000000 .L0 
     /tmp/cck1qGYV.s:15     .text:0000000000000004 .L0 
     /tmp/cck1qGYV.s:18     .text:000000000000000c .L0 
     /tmp/cck1qGYV.s:19     .text:000000000000000c .L0 
     /tmp/cck1qGYV.s:21     .text:0000000000000010 .L0 
     /tmp/cck1qGYV.s:23     .text:0000000000000010 .L0 
     /tmp/cck1qGYV.s:24     .text:0000000000000010 .L0 
   src/interrupt.cpp:20     .text:0000000000000010 .L0 
     /tmp/cck1qGYV.s:33     .text:0000000000000014 .L0 
     /tmp/cck1qGYV.s:39     .text:000000000000001c .L0 
     /tmp/cck1qGYV.s:40     .text:000000000000001c .L0 
     /tmp/cck1qGYV.s:43     .text:0000000000000024 .L0 
     /tmp/cck1qGYV.s:44     .text:0000000000000028 .L0 
     /tmp/cck1qGYV.s:45     .text:0000000000000028 .L0 
     /tmp/cck1qGYV.s:47     .text:000000000000002c .L0 
     /tmp/cck1qGYV.s:48     .text:000000000000002c .L0 
     /tmp/cck1qGYV.s:50     .text:0000000000000030 .L0 
     /tmp/cck1qGYV.s:54     .text:0000000000000034 .L0 
     /tmp/cck1qGYV.s:58     .text:0000000000000034 .L0 
     /tmp/cck1qGYV.s:59     .text:0000000000000034 .L0 
     /tmp/cck1qGYV.s:60     .text:0000000000000034 .L0 
   src/interrupt.cpp:42     .text:0000000000000034 .L0 
     /tmp/cck1qGYV.s:69     .text:0000000000000038 .L0 
     /tmp/cck1qGYV.s:70     .text:0000000000000038 .L0 
     /tmp/cck1qGYV.s:74     .text:0000000000000044 .L0 
     /tmp/cck1qGYV.s:83     .text:0000000000000048 .L0 
     /tmp/cck1qGYV.s:84     .text:0000000000000048 .L0 
     /tmp/cck1qGYV.s:87     .text:0000000000000054 .L0 
     /tmp/cck1qGYV.s:91     .text:0000000000000058 .L0 
     /tmp/cck1qGYV.s:92     .text:0000000000000058 .L0 
   src/interrupt.cpp:53     .text:0000000000000058 .L0 
     /tmp/cck1qGYV.s:99     .text:000000000000005c .L0 
     /tmp/cck1qGYV.s:101    .text:000000000000005c .L0 
     /tmp/cck1qGYV.s:110    .text:0000000000000068 .L0 
     /tmp/cck1qGYV.s:111    .text:0000000000000068 .L0 
   src/interrupt.cpp:46     .text:0000000000000068 .L0 
     /tmp/cck1qGYV.s:118    .text:000000000000006c .L0 
     /tmp/cck1qGYV.s:119    .text:000000000000006c .L0 
     /tmp/cck1qGYV.s:121    .text:000000000000006c .L0 
     /tmp/cck1qGYV.s:126    .text:0000000000000078 .L0 
   src/interrupt.cpp:49     .text:0000000000000078 .L0 
     /tmp/cck1qGYV.s:137    .text:0000000000000080 .L0 
     /tmp/cck1qGYV.s:152    .rodata:0000000000000000 ecallSystemInterupt
     /tmp/cck1qGYV.s:156    .rodata:0000000000000008 ecallUserInterrupt
     /tmp/cck1qGYV.s:160    .rodata:0000000000000010 addrWriteInterrupt
     /tmp/cck1qGYV.s:164    .rodata:0000000000000018 addrReadInterrupt
     /tmp/cck1qGYV.s:168    .rodata:0000000000000020 operationInterrupt
     /tmp/cck1qGYV.s:172    .rodata:0000000000000028 hwInterrupt
     /tmp/cck1qGYV.s:176    .rodata:0000000000000030 bntZero
     /tmp/cck1qGYV.s:180    .rodata:0000000000000038 bntOne
     /tmp/cck1qGYV.s:188    .text:0000000000000080 .L0 
     /tmp/cck1qGYV.s:70     .text:0000000000000038 .L0 
     /tmp/cck1qGYV.s:84     .text:0000000000000048 .L0 
GAS LISTING /tmp/cck1qGYV.s 			page 8


     /tmp/cck1qGYV.s:53     .text:0000000000000034 .L5
     /tmp/cck1qGYV.s:106    .text:0000000000000068 .L6
     /tmp/cck1qGYV.s:36     .text:000000000000001c .L2
     /tmp/cck1qGYV.s:615    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cck1qGYV.s:1006   .debug_str:0000000000000029 .LASF41
     /tmp/cck1qGYV.s:1036   .debug_str:0000000000000196 .LASF42
     /tmp/cck1qGYV.s:1066   .debug_str:000000000000027a .LASF43
     /tmp/cck1qGYV.s:5      .text:0000000000000000 .Ltext0
     /tmp/cck1qGYV.s:183    .text:0000000000000080 .Letext0
     /tmp/cck1qGYV.s:996    .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cck1qGYV.s:1052   .debug_str:0000000000000216 .LASF0
     /tmp/cck1qGYV.s:1014   .debug_str:00000000000000ee .LASF1
     /tmp/cck1qGYV.s:1030   .debug_str:0000000000000160 .LASF2
     /tmp/cck1qGYV.s:1010   .debug_str:00000000000000d9 .LASF4
     /tmp/cck1qGYV.s:1032   .debug_str:000000000000016e .LASF3
     /tmp/cck1qGYV.s:1002   .debug_str:000000000000001d .LASF5
     /tmp/cck1qGYV.s:998    .debug_str:0000000000000000 .LASF6
     /tmp/cck1qGYV.s:1026   .debug_str:000000000000013e .LASF7
     /tmp/cck1qGYV.s:1060   .debug_str:0000000000000244 .LASF8
     /tmp/cck1qGYV.s:1008   .debug_str:00000000000000cb .LASF9
     /tmp/cck1qGYV.s:1086   .debug_str:0000000000000315 .LASF10
     /tmp/cck1qGYV.s:1028   .debug_str:0000000000000151 .LASF11
     /tmp/cck1qGYV.s:1078   .debug_str:00000000000002e4 .LASF12
     /tmp/cck1qGYV.s:1064   .debug_str:000000000000026a .LASF13
     /tmp/cck1qGYV.s:1038   .debug_str:00000000000001a8 .LASF14
     /tmp/cck1qGYV.s:1018   .debug_str:0000000000000113 .LASF15
     /tmp/cck1qGYV.s:1062   .debug_str:0000000000000254 .LASF16
     /tmp/cck1qGYV.s:1080   .debug_str:00000000000002f4 .LASF19
     /tmp/cck1qGYV.s:1056   .debug_str:0000000000000235 .LASF17
     /tmp/cck1qGYV.s:1004   .debug_str:0000000000000024 .LASF18
     /tmp/cck1qGYV.s:1022   .debug_str:0000000000000130 .LASF20
     /tmp/cck1qGYV.s:1054   .debug_str:0000000000000223 .LASF21
     /tmp/cck1qGYV.s:1050   .debug_str:0000000000000208 .LASF22
     /tmp/cck1qGYV.s:1074   .debug_str:00000000000002c8 .LASF23
     /tmp/cck1qGYV.s:1042   .debug_str:00000000000001c7 .LASF24
     /tmp/cck1qGYV.s:1076   .debug_str:00000000000002db .LASF25
     /tmp/cck1qGYV.s:1068   .debug_str:000000000000029d .LASF26
     /tmp/cck1qGYV.s:1082   .debug_str:0000000000000301 .LASF27
     /tmp/cck1qGYV.s:1084   .debug_str:0000000000000309 .LASF28
     /tmp/cck1qGYV.s:1072   .debug_str:00000000000002b5 .LASF29
     /tmp/cck1qGYV.s:1016   .debug_str:0000000000000101 .LASF30
     /tmp/cck1qGYV.s:1048   .debug_str:00000000000001f5 .LASF31
     /tmp/cck1qGYV.s:1040   .debug_str:00000000000001b4 .LASF32
     /tmp/cck1qGYV.s:1046   .debug_str:00000000000001e1 .LASF33
     /tmp/cck1qGYV.s:1000   .debug_str:0000000000000013 .LASF44
     /tmp/cck1qGYV.s:10     .text:0000000000000000 .LFB0
     /tmp/cck1qGYV.s:138    .text:0000000000000080 .LFE0
     /tmp/cck1qGYV.s:1020   .debug_str:0000000000000129 .LASF34
     /tmp/cck1qGYV.s:921    .debug_loc:0000000000000000 .LLST0
     /tmp/cck1qGYV.s:988    .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cck1qGYV.s:1058   .debug_str:000000000000023a .LASF35
     /tmp/cck1qGYV.s:932    .debug_loc:0000000000000036 .LLST1
     /tmp/cck1qGYV.s:108    .text:0000000000000068 .LBB7
     /tmp/cck1qGYV.s:132    .text:000000000000007c .LBE7
     /tmp/cck1qGYV.s:948    .debug_loc:0000000000000080 .LLST3
     /tmp/cck1qGYV.s:1012   .debug_str:00000000000000e0 .LASF36
     /tmp/cck1qGYV.s:124    .text:0000000000000078 .LVL12
GAS LISTING /tmp/cck1qGYV.s 			page 9


     /tmp/cck1qGYV.s:88     .text:0000000000000058 .LBB6
     /tmp/cck1qGYV.s:103    .text:0000000000000064 .LBE6
     /tmp/cck1qGYV.s:1024   .debug_str:0000000000000139 .LASF37
     /tmp/cck1qGYV.s:963    .debug_loc:00000000000000ba .LLST2
     /tmp/cck1qGYV.s:102    .text:0000000000000064 .LVL8
     /tmp/cck1qGYV.s:41     .text:0000000000000024 .LVL2
     /tmp/cck1qGYV.s:1034   .debug_str:0000000000000180 .LASF38
     /tmp/cck1qGYV.s:1070   .debug_str:00000000000002a4 .LASF39
     /tmp/cck1qGYV.s:1044   .debug_str:00000000000001d1 .LASF40
     /tmp/cck1qGYV.s:29     .text:0000000000000014 .LVL0
     /tmp/cck1qGYV.s:35     .text:000000000000001c .LVL1
     /tmp/cck1qGYV.s:52     .text:0000000000000034 .LVL3
     /tmp/cck1qGYV.s:71     .text:0000000000000040 .LVL5
     /tmp/cck1qGYV.s:65     .text:0000000000000038 .LVL4
     /tmp/cck1qGYV.s:105    .text:0000000000000068 .LVL9
     /tmp/cck1qGYV.s:116    .text:000000000000006c .LVL10
     /tmp/cck1qGYV.s:122    .text:0000000000000070 .LVL11
     /tmp/cck1qGYV.s:90     .text:0000000000000058 .LVL6
     /tmp/cck1qGYV.s:97     .text:000000000000005c .LVL7
     /tmp/cck1qGYV.s:189    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cck1qGYV.s:56     .text:0000000000000034 .LBB3
     /tmp/cck1qGYV.s:76     .text:0000000000000048 .LBE3
     /tmp/cck1qGYV.s:80     .text:0000000000000048 .LBB9
     /tmp/cck1qGYV.s:135    .text:0000000000000080 .LBE9

UNDEFINED SYMBOLS
console_handler
MEM_ALLOC
MEM_FREE
tryToFreeSegment
tryToAllocateFragment
