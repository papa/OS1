GAS LISTING /tmp/ccqcvo40.s 			page 1


   1              		.file	"interrupt.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	interrupt
   9              	interrupt:
  10              	.LFB21:
  11              		.file 1 "src/interrupt.cpp"
   1:src/interrupt.cpp **** //
   2:src/interrupt.cpp **** // Created by os on 4/12/22.
   3:src/interrupt.cpp **** //
   4:src/interrupt.cpp **** 
   5:src/interrupt.cpp **** #include "../h/interrupt.h"
   6:src/interrupt.cpp **** 
   7:src/interrupt.cpp **** const uint64 bntOne = 1UL << 63;
   8:src/interrupt.cpp **** const uint64 bntZero = 0;
   9:src/interrupt.cpp **** 
  10:src/interrupt.cpp **** const uint64 hwInterrupt = bntOne + 9UL;
  11:src/interrupt.cpp **** const uint64 operationInterrupt = bntZero + 2UL;
  12:src/interrupt.cpp **** const uint64 addrReadInterrupt = bntZero + 5UL;
  13:src/interrupt.cpp **** const uint64 addrWriteInterrupt = bntZero + 7UL;
  14:src/interrupt.cpp **** const uint64 ecallUserInterrupt = bntZero + 8UL;
  15:src/interrupt.cpp **** const uint64 ecallSystemInterupt = bntZero + 9UL;
  16:src/interrupt.cpp **** 
  17:src/interrupt.cpp **** extern "C" void interrupt() {
  12              		.loc 1 17 29
  13              		.cfi_startproc
  14 0000 130101FD 		addi	sp,sp,-48
  15              		.cfi_def_cfa_offset 48
  16 0004 23341102 		sd	ra,40(sp)
  17 0008 23308102 		sd	s0,32(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040103 		addi	s0,sp,48
  21              		.cfi_def_cfa 8, 0
  18:src/interrupt.cpp **** 
  19:src/interrupt.cpp ****     uint64 scause = Riscv::r_scause();
  22              		.loc 1 19 5
  23              	.LBB18:
  24              	.LBB19:
  25              		.file 2 "src/../h/Riscv.h"
   1:src/../h/Riscv.h **** //
   2:src/../h/Riscv.h **** // Created by os on 4/27/22.
   3:src/../h/Riscv.h **** //
   4:src/../h/Riscv.h **** 
   5:src/../h/Riscv.h **** #ifndef PROJECT_BASE_V1_0_RISCV_H
   6:src/../h/Riscv.h **** #define PROJECT_BASE_V1_0_RISCV_H
   7:src/../h/Riscv.h **** 
   8:src/../h/Riscv.h **** #include "../lib/hw.h"
   9:src/../h/Riscv.h **** 
  10:src/../h/Riscv.h **** class Riscv
  11:src/../h/Riscv.h **** {
  12:src/../h/Riscv.h **** private:
  13:src/../h/Riscv.h **** 
  14:src/../h/Riscv.h **** public:
GAS LISTING /tmp/ccqcvo40.s 			page 2


  15:src/../h/Riscv.h ****     static void initSystem();
  16:src/../h/Riscv.h **** 
  17:src/../h/Riscv.h ****     static void pushRegisters();
  18:src/../h/Riscv.h ****     static void popRegisters();
  19:src/../h/Riscv.h **** 
  20:src/../h/Riscv.h ****     static uint64 r_scause();
  21:src/../h/Riscv.h ****     static void w_scause(uint64 scause);
  22:src/../h/Riscv.h **** 
  23:src/../h/Riscv.h ****     static uint64 r_sepc();
  24:src/../h/Riscv.h ****     static void w_sepc(uint64 sepc);
  25:src/../h/Riscv.h **** 
  26:src/../h/Riscv.h ****     static uint64 r_stvec();
  27:src/../h/Riscv.h ****     static void w_stvec(uint64 stvec);
  28:src/../h/Riscv.h **** 
  29:src/../h/Riscv.h ****     static uint64 r_stval();
  30:src/../h/Riscv.h ****     static void w_stval(uint64 stval);
  31:src/../h/Riscv.h **** 
  32:src/../h/Riscv.h ****     enum BitMaskSip
  33:src/../h/Riscv.h ****     {
  34:src/../h/Riscv.h ****         SIP_SSIE = (1 << 1),
  35:src/../h/Riscv.h ****         SIP_STIE = (1 << 5),
  36:src/../h/Riscv.h ****         SIP_SEIE = (1 << 9),
  37:src/../h/Riscv.h ****     };
  38:src/../h/Riscv.h **** 
  39:src/../h/Riscv.h ****     //todo
  40:src/../h/Riscv.h ****     //| i & na sip da se primene
  41:src/../h/Riscv.h ****     static void ms_sip(uint64 mask);
  42:src/../h/Riscv.h **** 
  43:src/../h/Riscv.h ****     static void mc_sip(uint64 mask);
  44:src/../h/Riscv.h **** 
  45:src/../h/Riscv.h ****     static uint64 r_sip();
  46:src/../h/Riscv.h **** 
  47:src/../h/Riscv.h ****     static void w_sip(uint64 sip);
  48:src/../h/Riscv.h **** 
  49:src/../h/Riscv.h ****     enum BitMaskSstatus
  50:src/../h/Riscv.h ****     {
  51:src/../h/Riscv.h ****         SSTATUS_SIE = (1 << 1),
  52:src/../h/Riscv.h ****         SSTATUS_SPIE = (1 << 5),
  53:src/../h/Riscv.h ****         SSTATUS_SPP = (1 << 8),
  54:src/../h/Riscv.h ****     };
  55:src/../h/Riscv.h **** 
  56:src/../h/Riscv.h ****     static void ms_sstatus(uint64 mask);
  57:src/../h/Riscv.h **** 
  58:src/../h/Riscv.h ****     static void mc_sstatus(uint64 mask);
  59:src/../h/Riscv.h **** 
  60:src/../h/Riscv.h ****     static uint64 r_sstatus();
  61:src/../h/Riscv.h **** 
  62:src/../h/Riscv.h ****     static void w_sstatus(uint64 sstatus);
  63:src/../h/Riscv.h **** };
  64:src/../h/Riscv.h **** 
  65:src/../h/Riscv.h **** inline uint64 Riscv::r_scause() {
  66:src/../h/Riscv.h ****     uint64 volatile scause;
  26              		.loc 2 66 5
  67:src/../h/Riscv.h ****     __asm__ volatile("csrr %0, scause" : "=r"(scause));
  27              		.loc 2 67 5
  28              		.loc 2 67 55 is_stmt 0
  29              	#APP
GAS LISTING /tmp/ccqcvo40.s 			page 3


  30              	# 67 "src/../h/Riscv.h" 1
  68              	    return scause;
  31              		csrr a5, scause
  32              	# 0 "" 2
  33              	#NO_APP
  34 0014 233CF4FC 		sd	a5,-40(s0)
  35              		.loc 2 68 5 is_stmt 1
  36              		.loc 2 68 12 is_stmt 0
  37 0018 033784FD 		ld	a4,-40(s0)
  38              	.LVL0:
  39              	.LBE19:
  40              	.LBE18:
  20:src/interrupt.cpp ****     switch(scause) {
  41              		.loc 1 20 5 is_stmt 1
  42              	.LBB20:
  43 001c 93079000 		li	a5,9
  44 0020 630AF700 		beq	a4,a5,.L6
  45              	.LVL1:
  46              	.L1:
  47              	.LBE20:
  21:src/interrupt.cpp **** 
  22:src/interrupt.cpp ****         case hwInterrupt: // todo
  23:src/interrupt.cpp ****             break;
  24:src/interrupt.cpp **** 
  25:src/interrupt.cpp ****         case operationInterrupt: // todo
  26:src/interrupt.cpp ****             break;
  27:src/interrupt.cpp **** 
  28:src/interrupt.cpp ****         case addrReadInterrupt: // todo
  29:src/interrupt.cpp ****             break;
  30:src/interrupt.cpp **** 
  31:src/interrupt.cpp ****         case addrWriteInterrupt: // todo
  32:src/interrupt.cpp ****             break;
  33:src/interrupt.cpp **** 
  34:src/interrupt.cpp ****         case ecallUserInterrupt: // todo
  35:src/interrupt.cpp **** 
  36:src/interrupt.cpp **** 
  37:src/interrupt.cpp **** 
  38:src/interrupt.cpp ****             break;
  39:src/interrupt.cpp **** 
  40:src/interrupt.cpp ****         case ecallSystemInterupt:
  41:src/interrupt.cpp **** 
  42:src/interrupt.cpp ****             uint64 operation = 1;
  43:src/interrupt.cpp ****             __asm__ volatile("mv %0, a0" :  "=r"(operation));
  44:src/interrupt.cpp **** 
  45:src/interrupt.cpp ****             if(operation == (uint64)MemoryAllocator::MEM_ALLOC) {
  46:src/interrupt.cpp ****                 size_t size;
  47:src/interrupt.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(size));
  48:src/interrupt.cpp ****                 size*=MEM_BLOCK_SIZE;
  49:src/interrupt.cpp ****                 void* allocatedAddr = MemoryAllocator::tryToAllocateFragment(size);
  50:src/interrupt.cpp ****                 __asm__ volatile("mv a0,%0" : : "r"((uint64)allocatedAddr));
  51:src/interrupt.cpp ****             }
  52:src/interrupt.cpp ****             else if(operation == (uint64)MemoryAllocator::MEM_FREE) {
  53:src/interrupt.cpp ****                 uint64 addr = 0;
  54:src/interrupt.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(addr));
  55:src/interrupt.cpp ****                 MemoryAllocator::tryToFreeSegment((void*)addr);
  56:src/interrupt.cpp ****             }
  57:src/interrupt.cpp ****             else if(operation == (uint64)PCB::THREAD_CREATE)
GAS LISTING /tmp/ccqcvo40.s 			page 4


  58:src/interrupt.cpp ****             {
  59:src/interrupt.cpp ****                 //thread create
  60:src/interrupt.cpp **** 
  61:src/interrupt.cpp ****                 //__asm__ volatile("mv %0, a1" : "=r"(size));
  62:src/interrupt.cpp ****             }
  63:src/interrupt.cpp **** 
  64:src/interrupt.cpp **** 
  65:src/interrupt.cpp ****             uint64 sepc = Riscv::r_sepc();
  66:src/interrupt.cpp ****             sepc+=4;
  67:src/interrupt.cpp ****             Riscv::w_sepc(sepc);
  68:src/interrupt.cpp **** 
  69:src/interrupt.cpp ****             uint64 sip = Riscv::r_sip();
  70:src/interrupt.cpp ****             sip&=~2;
  71:src/interrupt.cpp ****             Riscv::w_sip(sip);
  72:src/interrupt.cpp **** 
  73:src/interrupt.cpp ****             break;
  74:src/interrupt.cpp ****     }
  75:src/interrupt.cpp **** 
  76:src/interrupt.cpp ****     //todo
  77:src/interrupt.cpp ****     //sta od ovoga treba da se uradi
  78:src/interrupt.cpp **** 
  79:src/interrupt.cpp ****     //uint64 sepc;
  80:src/interrupt.cpp ****     //asm volatile("csrr %0, sepc" : "=r" (sepc));
  81:src/interrupt.cpp ****     //sepc+=4;
  82:src/interrupt.cpp ****     //asm volatile("csrw sepc, %0" : : "r" (sepc));
  83:src/interrupt.cpp **** 
  84:src/interrupt.cpp ****     //uint64 sip;
  85:src/interrupt.cpp ****     //asm volatile("csrr %0, sip" : "=r" (sip));
  86:src/interrupt.cpp ****     //sip &= ~2;
  87:src/interrupt.cpp ****     //asm volatile("csrw sip, %0" : : "r" (sip));
  88:src/interrupt.cpp **** 
  89:src/interrupt.cpp ****     //uint64 sie;
  90:src/interrupt.cpp ****     //asm volatile("csrr %0, sie" : "=r"(sie));
  91:src/interrupt.cpp ****     //sie &= ~2;
  92:src/interrupt.cpp ****     //asm volatile("csrw sie, %0" : : "r" (sie));
  93:src/interrupt.cpp **** 
  94:src/interrupt.cpp ****     //console_handler();
  95:src/interrupt.cpp **** }
  48              		.loc 1 95 1 is_stmt 0
  49 0024 83308102 		ld	ra,40(sp)
  50              		.cfi_remember_state
  51              		.cfi_restore 1
  52 0028 03340102 		ld	s0,32(sp)
  53              		.cfi_restore 8
  54              		.cfi_def_cfa 2, 48
  55 002c 13010103 		addi	sp,sp,48
  56              		.cfi_def_cfa_offset 0
  57 0030 67800000 		jr	ra
  58              	.LVL2:
  59              	.L6:
  60              		.cfi_restore_state
  61              	.LBB39:
  62              	.LBB21:
  40:src/interrupt.cpp **** 
  63              		.loc 1 40 9 is_stmt 1
  42:src/interrupt.cpp ****             __asm__ volatile("mv %0, a0" :  "=r"(operation));
  64              		.loc 1 42 13
GAS LISTING /tmp/ccqcvo40.s 			page 5


  43:src/interrupt.cpp **** 
  65              		.loc 1 43 13
  43:src/interrupt.cpp **** 
  66              		.loc 1 43 61 is_stmt 0
  67              	#APP
  68              	# 43 "src/interrupt.cpp" 1
  69              		mv a5, a0
  70              	# 0 "" 2
  71              	.LVL3:
  45:src/interrupt.cpp ****                 size_t size;
  72              		.loc 1 45 13 is_stmt 1
  73              	#NO_APP
  74              	.LBB22:
  75 0038 13071000 		li	a4,1
  76              	.LVL4:
  77 003c 638CE702 		beq	a5,a4,.L7
  78              	.LBE22:
  79              	.LBE21:
  80              	.LBE39:
  52:src/interrupt.cpp ****                 uint64 addr = 0;
  81              		.loc 1 52 18
  82              	.LBB40:
  83              	.LBB37:
  84              	.LBB27:
  85              	.LBB23:
  86 0040 13072000 		li	a4,2
  87 0044 6384E704 		beq	a5,a4,.L8
  88              	.LVL5:
  89              	.L4:
  90              	.LBE23:
  91              	.LBE27:
  65:src/interrupt.cpp ****             sepc+=4;
  92              		.loc 1 65 13
  93              	.LBB28:
  94              	.LBB29:
  69:src/../h/Riscv.h **** }
  70:src/../h/Riscv.h **** 
  71:src/../h/Riscv.h **** inline void Riscv::w_scause(uint64 scause) {
  72:src/../h/Riscv.h ****     __asm__ volatile("csrw scause, %0" : :"r"(scause));
  73:src/../h/Riscv.h **** }
  74:src/../h/Riscv.h **** 
  75:src/../h/Riscv.h **** inline uint64 Riscv::r_sepc() {
  76:src/../h/Riscv.h ****     uint64 volatile sepc;
  95              		.loc 2 76 5
  77:src/../h/Riscv.h ****     __asm__ volatile("csrr %0, sepc" : "=r"(sepc));
  96              		.loc 2 77 5
  97              		.loc 2 77 51 is_stmt 0
  98              	#APP
  99              	# 77 "src/../h/Riscv.h" 1
  78              	    return sepc;
 100              		csrr a5, sepc
 101              	# 0 "" 2
 102              	#NO_APP
 103 004c 2334F4FE 		sd	a5,-24(s0)
 104              		.loc 2 78 5 is_stmt 1
 105              		.loc 2 78 12 is_stmt 0
 106 0050 833784FE 		ld	a5,-24(s0)
GAS LISTING /tmp/ccqcvo40.s 			page 6


 107              	.LVL6:
 108              	.LBE29:
 109              	.LBE28:
  66:src/interrupt.cpp ****             Riscv::w_sepc(sepc);
 110              		.loc 1 66 13 is_stmt 1
  66:src/interrupt.cpp ****             Riscv::w_sepc(sepc);
 111              		.loc 1 66 17 is_stmt 0
 112 0054 93874700 		addi	a5,a5,4
 113              	.LVL7:
  67:src/interrupt.cpp **** 
 114              		.loc 1 67 13 is_stmt 1
 115              	.LBB30:
 116              	.LBB31:
  79:src/../h/Riscv.h **** }
  80:src/../h/Riscv.h **** 
  81:src/../h/Riscv.h **** inline void Riscv::w_sepc(uint64 sepc) {
  82:src/../h/Riscv.h ****     __asm__ volatile("csrw sepc, %0" : :"r"(sepc));
 117              		.loc 2 82 5
 118              		.loc 2 82 51 is_stmt 0
 119              	#APP
 120              	# 82 "src/../h/Riscv.h" 1
  83              	}
 121              		csrw sepc, a5
 122              	# 0 "" 2
 123              	.LVL8:
 124              	#NO_APP
 125              	.LBE31:
 126              	.LBE30:
  69:src/interrupt.cpp ****             sip&=~2;
 127              		.loc 1 69 13 is_stmt 1
 128              	.LBB32:
 129              	.LBB33:
  84:src/../h/Riscv.h **** 
  85:src/../h/Riscv.h **** inline uint64 Riscv::r_stvec() {
  86:src/../h/Riscv.h ****     uint64 volatile stvec;
  87:src/../h/Riscv.h ****     __asm__ volatile("csrr %0, stvec" : "=r"(stvec));
  88:src/../h/Riscv.h ****     return stvec;
  89:src/../h/Riscv.h **** }
  90:src/../h/Riscv.h **** 
  91:src/../h/Riscv.h **** inline void Riscv::w_stvec(uint64 stvec) {
  92:src/../h/Riscv.h ****     __asm__ volatile("csrw stvec, %0" : :"r"(stvec));
  93:src/../h/Riscv.h **** }
  94:src/../h/Riscv.h **** 
  95:src/../h/Riscv.h **** inline uint64 Riscv::r_stval() {
  96:src/../h/Riscv.h ****     uint64 volatile stval;
  97:src/../h/Riscv.h ****     __asm__ volatile("csrr %0, stval" : "=r"(stval));
  98:src/../h/Riscv.h ****     return stval;
  99:src/../h/Riscv.h **** }
 100:src/../h/Riscv.h **** 
 101:src/../h/Riscv.h **** inline void Riscv::w_stval(uint64 stval) {
 102:src/../h/Riscv.h ****     __asm__ volatile("csrw stval, %0" : :"r"(stval));
 103:src/../h/Riscv.h **** }
 104:src/../h/Riscv.h **** 
 105:src/../h/Riscv.h **** inline void Riscv::ms_sip(uint64 mask) {
 106:src/../h/Riscv.h ****     uint64 sip = r_sip();
 107:src/../h/Riscv.h ****     sip|=mask;
 108:src/../h/Riscv.h ****     w_sip(sip);
GAS LISTING /tmp/ccqcvo40.s 			page 7


 109:src/../h/Riscv.h **** }
 110:src/../h/Riscv.h **** 
 111:src/../h/Riscv.h **** inline void Riscv::mc_sip(uint64 mask) {
 112:src/../h/Riscv.h ****     uint64 sip = r_sip();
 113:src/../h/Riscv.h ****     sip&=mask;
 114:src/../h/Riscv.h ****     w_sip(sip);
 115:src/../h/Riscv.h **** }
 116:src/../h/Riscv.h **** 
 117:src/../h/Riscv.h **** inline uint64 Riscv::r_sip() {
 118:src/../h/Riscv.h ****     uint64 volatile sip;
 130              		.loc 2 118 5
 119:src/../h/Riscv.h ****     __asm__ volatile("csrr %0, sip" : "=r"(sip));
 131              		.loc 2 119 5
 132              		.loc 2 119 49 is_stmt 0
 133              	#APP
 134              	# 119 "src/../h/Riscv.h" 1
 120              	    return sip;
 135              		csrr a5, sip
 136              	# 0 "" 2
 137              	.LVL9:
 138              	#NO_APP
 139 0060 2330F4FE 		sd	a5,-32(s0)
 140              		.loc 2 120 5 is_stmt 1
 141              		.loc 2 120 12 is_stmt 0
 142 0064 833704FE 		ld	a5,-32(s0)
 143              	.LVL10:
 144              	.LBE33:
 145              	.LBE32:
  70:src/interrupt.cpp ****             Riscv::w_sip(sip);
 146              		.loc 1 70 13 is_stmt 1
  70:src/interrupt.cpp ****             Riscv::w_sip(sip);
 147              		.loc 1 70 16 is_stmt 0
 148 0068 93F7D7FF 		andi	a5,a5,-3
 149              	.LVL11:
  71:src/interrupt.cpp **** 
 150              		.loc 1 71 13 is_stmt 1
 151              	.LBB34:
 152              	.LBB35:
 121:src/../h/Riscv.h **** }
 122:src/../h/Riscv.h **** 
 123:src/../h/Riscv.h **** inline void Riscv::w_sip(uint64 sip) {
 124:src/../h/Riscv.h ****     __asm__ volatile("csrw sip, %0" : :"r"(sip));
 153              		.loc 2 124 5
 154              		.loc 2 124 49 is_stmt 0
 155              	#APP
 156              	# 124 "src/../h/Riscv.h" 1
 125              	}
 157              		csrw sip, a5
 158              	# 0 "" 2
 159              	.LVL12:
 160              	#NO_APP
 161              	.LBE35:
 162              	.LBE34:
 163              	.LBE37:
 164              	.LBE40:
 165              		.loc 1 95 1
 166 0070 6FF05FFB 		j	.L1
GAS LISTING /tmp/ccqcvo40.s 			page 8


 167              	.LVL13:
 168              	.L7:
 169              	.LBB41:
 170              	.LBB38:
 171              	.LBB36:
 172              	.LBB25:
  46:src/interrupt.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(size));
 173              		.loc 1 46 17 is_stmt 1
  47:src/interrupt.cpp ****                 size*=MEM_BLOCK_SIZE;
 174              		.loc 1 47 17
  47:src/interrupt.cpp ****                 size*=MEM_BLOCK_SIZE;
 175              		.loc 1 47 59 is_stmt 0
 176              	#APP
 177              	# 47 "src/interrupt.cpp" 1
 178              		mv a0, a1
 179              	# 0 "" 2
 180              	.LVL14:
  48:src/interrupt.cpp ****                 void* allocatedAddr = MemoryAllocator::tryToAllocateFragment(size);
 181              		.loc 1 48 17 is_stmt 1
  49:src/interrupt.cpp ****                 __asm__ volatile("mv a0,%0" : : "r"((uint64)allocatedAddr));
 182              		.loc 1 49 17
  49:src/interrupt.cpp ****                 __asm__ volatile("mv a0,%0" : : "r"((uint64)allocatedAddr));
 183              		.loc 1 49 77 is_stmt 0
 184              	#NO_APP
 185 0078 13156500 		slli	a0,a0,6
 186              	.LVL15:
 187 007c 97000000 		call	_ZN15MemoryAllocator21tryToAllocateFragmentEm@plt
 187      E7800000 
 188              	.LVL16:
  50:src/interrupt.cpp ****             }
 189              		.loc 1 50 17 is_stmt 1
  50:src/interrupt.cpp ****             }
 190              		.loc 1 50 76 is_stmt 0
 191              	#APP
 192              	# 50 "src/interrupt.cpp" 1
 193              		mv a0,a0
 194              	# 0 "" 2
 195              	#NO_APP
 196              	.LBE25:
 197 0088 6FF01FFC 		j	.L4
 198              	.LVL17:
 199              	.L8:
 200              	.LBB26:
 201              	.LBB24:
  53:src/interrupt.cpp ****                 __asm__ volatile("mv %0, a1" : "=r"(addr));
 202              		.loc 1 53 17 is_stmt 1
  54:src/interrupt.cpp ****                 MemoryAllocator::tryToFreeSegment((void*)addr);
 203              		.loc 1 54 17
  54:src/interrupt.cpp ****                 MemoryAllocator::tryToFreeSegment((void*)addr);
 204              		.loc 1 54 59 is_stmt 0
 205              	#APP
 206              	# 54 "src/interrupt.cpp" 1
 207              		mv a0, a1
 208              	# 0 "" 2
 209              	.LVL18:
  55:src/interrupt.cpp ****             }
 210              		.loc 1 55 17 is_stmt 1
GAS LISTING /tmp/ccqcvo40.s 			page 9


  55:src/interrupt.cpp ****             }
 211              		.loc 1 55 50 is_stmt 0
 212              	#NO_APP
 213 0090 97000000 		call	_ZN15MemoryAllocator16tryToFreeSegmentEPv@plt
 213      E7800000 
 214              	.LVL19:
 215              	.LBE24:
 216 0098 6FF01FFB 		j	.L4
 217              	.LBE26:
 218              	.LBE36:
 219              	.LBE38:
 220              	.LBE41:
 221              		.cfi_endproc
 222              	.LFE21:
 224              		.globl	ecallSystemInterupt
 225              		.globl	ecallUserInterrupt
 226              		.globl	addrWriteInterrupt
 227              		.globl	addrReadInterrupt
 228              		.globl	operationInterrupt
 229              		.globl	hwInterrupt
 230              		.globl	bntZero
 231              		.globl	bntOne
 232              		.section	.rodata
 233              		.align	3
 236              	ecallSystemInterupt:
 237 0000 09000000 		.dword	9
 237      00000000 
 240              	ecallUserInterrupt:
 241 0008 08000000 		.dword	8
 241      00000000 
 244              	addrWriteInterrupt:
 245 0010 07000000 		.dword	7
 245      00000000 
 248              	addrReadInterrupt:
 249 0018 05000000 		.dword	5
 249      00000000 
 252              	operationInterrupt:
 253 0020 02000000 		.dword	2
 253      00000000 
 256              	hwInterrupt:
 257 0028 09000000 		.dword	-9223372036854775799
 257      00000080 
 260              	bntZero:
 261 0030 00000000 		.zero	8
 261      00000000 
 264              	bntOne:
 265 0038 00000000 		.dword	-9223372036854775808
 265      00000080 
 266              		.text
 267              	.Letext0:
 268              		.file 3 "src/../h/../lib/hw.h"
 269              		.file 4 "src/../h/MemoryAllocator.h"
 270              		.file 5 "src/../h/interrupt.h"
GAS LISTING /tmp/ccqcvo40.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 interrupt.cpp
     /tmp/ccqcvo40.s:9      .text:0000000000000000 interrupt
     /tmp/ccqcvo40.s:13     .text:0000000000000000 .L0 
     /tmp/ccqcvo40.s:14     .text:0000000000000000 .L0 
     /tmp/ccqcvo40.s:15     .text:0000000000000004 .L0 
     /tmp/ccqcvo40.s:18     .text:000000000000000c .L0 
     /tmp/ccqcvo40.s:19     .text:000000000000000c .L0 
     /tmp/ccqcvo40.s:21     .text:0000000000000010 .L0 
     /tmp/ccqcvo40.s:26     .text:0000000000000010 .L0 
     /tmp/ccqcvo40.s:27     .text:0000000000000010 .L0 
     /tmp/ccqcvo40.s:28     .text:0000000000000010 .L0 
    src/../h/Riscv.h:67     .text:0000000000000010 .L0 
     /tmp/ccqcvo40.s:36     .text:0000000000000018 .L0 
     /tmp/ccqcvo40.s:37     .text:0000000000000018 .L0 
     /tmp/ccqcvo40.s:43     .text:000000000000001c .L0 
     /tmp/ccqcvo40.s:49     .text:0000000000000024 .L0 
     /tmp/ccqcvo40.s:50     .text:0000000000000028 .L0 
     /tmp/ccqcvo40.s:51     .text:0000000000000028 .L0 
     /tmp/ccqcvo40.s:53     .text:000000000000002c .L0 
     /tmp/ccqcvo40.s:54     .text:000000000000002c .L0 
     /tmp/ccqcvo40.s:56     .text:0000000000000030 .L0 
     /tmp/ccqcvo40.s:60     .text:0000000000000034 .L0 
     /tmp/ccqcvo40.s:64     .text:0000000000000034 .L0 
     /tmp/ccqcvo40.s:65     .text:0000000000000034 .L0 
     /tmp/ccqcvo40.s:66     .text:0000000000000034 .L0 
   src/interrupt.cpp:43     .text:0000000000000034 .L0 
     /tmp/ccqcvo40.s:75     .text:0000000000000038 .L0 
     /tmp/ccqcvo40.s:86     .text:0000000000000040 .L0 
     /tmp/ccqcvo40.s:95     .text:0000000000000048 .L0 
     /tmp/ccqcvo40.s:96     .text:0000000000000048 .L0 
     /tmp/ccqcvo40.s:97     .text:0000000000000048 .L0 
    src/../h/Riscv.h:77     .text:0000000000000048 .L0 
     /tmp/ccqcvo40.s:105    .text:0000000000000050 .L0 
     /tmp/ccqcvo40.s:106    .text:0000000000000050 .L0 
     /tmp/ccqcvo40.s:111    .text:0000000000000054 .L0 
     /tmp/ccqcvo40.s:112    .text:0000000000000054 .L0 
     /tmp/ccqcvo40.s:117    .text:0000000000000058 .L0 
     /tmp/ccqcvo40.s:118    .text:0000000000000058 .L0 
    src/../h/Riscv.h:82     .text:0000000000000058 .L0 
     /tmp/ccqcvo40.s:130    .text:000000000000005c .L0 
     /tmp/ccqcvo40.s:131    .text:000000000000005c .L0 
     /tmp/ccqcvo40.s:132    .text:000000000000005c .L0 
    src/../h/Riscv.h:119    .text:000000000000005c .L0 
     /tmp/ccqcvo40.s:141    .text:0000000000000064 .L0 
     /tmp/ccqcvo40.s:142    .text:0000000000000064 .L0 
     /tmp/ccqcvo40.s:147    .text:0000000000000068 .L0 
     /tmp/ccqcvo40.s:148    .text:0000000000000068 .L0 
     /tmp/ccqcvo40.s:153    .text:000000000000006c .L0 
     /tmp/ccqcvo40.s:154    .text:000000000000006c .L0 
    src/../h/Riscv.h:124    .text:000000000000006c .L0 
     /tmp/ccqcvo40.s:166    .text:0000000000000070 .L0 
     /tmp/ccqcvo40.s:174    .text:0000000000000074 .L0 
     /tmp/ccqcvo40.s:175    .text:0000000000000074 .L0 
   src/interrupt.cpp:47     .text:0000000000000074 .L0 
     /tmp/ccqcvo40.s:182    .text:0000000000000078 .L0 
     /tmp/ccqcvo40.s:183    .text:0000000000000078 .L0 
GAS LISTING /tmp/ccqcvo40.s 			page 11


     /tmp/ccqcvo40.s:185    .text:0000000000000078 .L0 
     /tmp/ccqcvo40.s:190    .text:0000000000000084 .L0 
   src/interrupt.cpp:50     .text:0000000000000084 .L0 
     /tmp/ccqcvo40.s:203    .text:000000000000008c .L0 
     /tmp/ccqcvo40.s:204    .text:000000000000008c .L0 
   src/interrupt.cpp:54     .text:000000000000008c .L0 
     /tmp/ccqcvo40.s:211    .text:0000000000000090 .L0 
     /tmp/ccqcvo40.s:213    .text:0000000000000090 .L0 
     /tmp/ccqcvo40.s:221    .text:000000000000009c .L0 
     /tmp/ccqcvo40.s:236    .rodata:0000000000000000 ecallSystemInterupt
     /tmp/ccqcvo40.s:240    .rodata:0000000000000008 ecallUserInterrupt
     /tmp/ccqcvo40.s:244    .rodata:0000000000000010 addrWriteInterrupt
     /tmp/ccqcvo40.s:248    .rodata:0000000000000018 addrReadInterrupt
     /tmp/ccqcvo40.s:252    .rodata:0000000000000020 operationInterrupt
     /tmp/ccqcvo40.s:256    .rodata:0000000000000028 hwInterrupt
     /tmp/ccqcvo40.s:260    .rodata:0000000000000030 bntZero
     /tmp/ccqcvo40.s:264    .rodata:0000000000000038 bntOne
     /tmp/ccqcvo40.s:271    .text:000000000000009c .L0 
     /tmp/ccqcvo40.s:59     .text:0000000000000034 .L6
     /tmp/ccqcvo40.s:168    .text:0000000000000074 .L7
     /tmp/ccqcvo40.s:199    .text:000000000000008c .L8
     /tmp/ccqcvo40.s:46     .text:0000000000000024 .L1
     /tmp/ccqcvo40.s:89     .text:0000000000000048 .L4
     /tmp/ccqcvo40.s:1104   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccqcvo40.s:1876   .debug_str:0000000000000179 .LASF95
     /tmp/ccqcvo40.s:2016   .debug_str:00000000000006a9 .LASF96
     /tmp/ccqcvo40.s:1864   .debug_str:0000000000000106 .LASF97
     /tmp/ccqcvo40.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccqcvo40.s:267    .text:000000000000009c .Letext0
     /tmp/ccqcvo40.s:1826   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccqcvo40.s:1938   .debug_str:0000000000000414 .LASF0
     /tmp/ccqcvo40.s:1948   .debug_str:0000000000000464 .LASF1
     /tmp/ccqcvo40.s:1928   .debug_str:00000000000003d9 .LASF2
     /tmp/ccqcvo40.s:1914   .debug_str:0000000000000379 .LASF4
     /tmp/ccqcvo40.s:1982   .debug_str:0000000000000592 .LASF3
     /tmp/ccqcvo40.s:1850   .debug_str:0000000000000088 .LASF5
     /tmp/ccqcvo40.s:1952   .debug_str:0000000000000484 .LASF6
     /tmp/ccqcvo40.s:1936   .debug_str:0000000000000401 .LASF7
     /tmp/ccqcvo40.s:1998   .debug_str:000000000000060b .LASF8
     /tmp/ccqcvo40.s:1902   .debug_str:00000000000002e2 .LASF9
     /tmp/ccqcvo40.s:1960   .debug_str:00000000000004de .LASF10
     /tmp/ccqcvo40.s:1996   .debug_str:00000000000005fc .LASF11
     /tmp/ccqcvo40.s:1852   .debug_str:000000000000008f .LASF12
     /tmp/ccqcvo40.s:1834   .debug_str:0000000000000034 .LASF13
     /tmp/ccqcvo40.s:1862   .debug_str:00000000000000fa .LASF14
     /tmp/ccqcvo40.s:1978   .debug_str:0000000000000564 .LASF15
     /tmp/ccqcvo40.s:1866   .debug_str:0000000000000129 .LASF16
     /tmp/ccqcvo40.s:1946   .debug_str:000000000000045e .LASF53
     /tmp/ccqcvo40.s:1932   .debug_str:00000000000003f1 .LASF17
     /tmp/ccqcvo40.s:1896   .debug_str:00000000000002a3 .LASF19
     /tmp/ccqcvo40.s:1848   .debug_str:000000000000007a .LASF18
     /tmp/ccqcvo40.s:1882   .debug_str:0000000000000239 .LASF20
     /tmp/ccqcvo40.s:1990   .debug_str:00000000000005ca .LASF21
     /tmp/ccqcvo40.s:1830   .debug_str:0000000000000008 .LASF22
     /tmp/ccqcvo40.s:1836   .debug_str:0000000000000044 .LASF23
     /tmp/ccqcvo40.s:1988   .debug_str:00000000000005b5 .LASF25
     /tmp/ccqcvo40.s:1880   .debug_str:0000000000000230 .LASF27
GAS LISTING /tmp/ccqcvo40.s 			page 12


     /tmp/ccqcvo40.s:1878   .debug_str:000000000000021b .LASF29
     /tmp/ccqcvo40.s:1984   .debug_str:00000000000005a4 .LASF24
     /tmp/ccqcvo40.s:1968   .debug_str:000000000000050f .LASF26
     /tmp/ccqcvo40.s:1976   .debug_str:000000000000055d .LASF28
     /tmp/ccqcvo40.s:1992   .debug_str:00000000000005d7 .LASF30
     /tmp/ccqcvo40.s:1894   .debug_str:000000000000029b .LASF31
     /tmp/ccqcvo40.s:1868   .debug_str:000000000000013f .LASF32
     /tmp/ccqcvo40.s:1828   .debug_str:0000000000000000 .LASF33
     /tmp/ccqcvo40.s:1908   .debug_str:0000000000000321 .LASF34
     /tmp/ccqcvo40.s:1884   .debug_str:0000000000000254 .LASF35
     /tmp/ccqcvo40.s:1858   .debug_str:00000000000000dc .LASF36
     /tmp/ccqcvo40.s:2020   .debug_str:00000000000006c6 .LASF37
     /tmp/ccqcvo40.s:1886   .debug_str:000000000000025c .LASF38
     /tmp/ccqcvo40.s:1940   .debug_str:0000000000000421 .LASF39
     /tmp/ccqcvo40.s:2008   .debug_str:0000000000000666 .LASF40
     /tmp/ccqcvo40.s:1844   .debug_str:0000000000000068 .LASF41
     /tmp/ccqcvo40.s:1892   .debug_str:0000000000000288 .LASF42
     /tmp/ccqcvo40.s:1898   .debug_str:00000000000002bb .LASF43
     /tmp/ccqcvo40.s:1994   .debug_str:00000000000005ea .LASF44
     /tmp/ccqcvo40.s:1842   .debug_str:0000000000000062 .LASF45
     /tmp/ccqcvo40.s:2022   .debug_str:00000000000006ce .LASF46
     /tmp/ccqcvo40.s:2018   .debug_str:00000000000006bb .LASF47
     /tmp/ccqcvo40.s:1980   .debug_str:000000000000057a .LASF48
     /tmp/ccqcvo40.s:1916   .debug_str:0000000000000380 .LASF49
     /tmp/ccqcvo40.s:1924   .debug_str:00000000000003b1 .LASF50
     /tmp/ccqcvo40.s:1860   .debug_str:00000000000000f0 .LASF51
     /tmp/ccqcvo40.s:1912   .debug_str:0000000000000363 .LASF52
     /tmp/ccqcvo40.s:1930   .debug_str:00000000000003e7 .LASF76
     /tmp/ccqcvo40.s:1906   .debug_str:000000000000030b .LASF78
     /tmp/ccqcvo40.s:1926   .debug_str:00000000000003c9 .LASF54
     /tmp/ccqcvo40.s:1950   .debug_str:0000000000000477 .LASF57
     /tmp/ccqcvo40.s:1972   .debug_str:0000000000000535 .LASF55
     /tmp/ccqcvo40.s:1934   .debug_str:00000000000003fc .LASF56
     /tmp/ccqcvo40.s:1832   .debug_str:0000000000000022 .LASF58
     /tmp/ccqcvo40.s:2010   .debug_str:0000000000000679 .LASF59
     /tmp/ccqcvo40.s:1870   .debug_str:0000000000000153 .LASF60
     /tmp/ccqcvo40.s:1874   .debug_str:0000000000000166 .LASF61
     /tmp/ccqcvo40.s:1920   .debug_str:0000000000000397 .LASF62
     /tmp/ccqcvo40.s:1986   .debug_str:00000000000005ab .LASF63
     /tmp/ccqcvo40.s:2000   .debug_str:000000000000061b .LASF64
     /tmp/ccqcvo40.s:2002   .debug_str:0000000000000625 .LASF66
     /tmp/ccqcvo40.s:1964   .debug_str:00000000000004f2 .LASF65
     /tmp/ccqcvo40.s:1900   .debug_str:00000000000002c1 .LASF67
     /tmp/ccqcvo40.s:1846   .debug_str:000000000000006f .LASF68
     /tmp/ccqcvo40.s:1974   .debug_str:000000000000053a .LASF69
     /tmp/ccqcvo40.s:1904   .debug_str:00000000000002f0 .LASF70
     /tmp/ccqcvo40.s:1854   .debug_str:000000000000009f .LASF71
     /tmp/ccqcvo40.s:2004   .debug_str:0000000000000646 .LASF72
     /tmp/ccqcvo40.s:1910   .debug_str:0000000000000335 .LASF73
     /tmp/ccqcvo40.s:2012   .debug_str:0000000000000682 .LASF74
     /tmp/ccqcvo40.s:1942   .debug_str:0000000000000428 .LASF75
     /tmp/ccqcvo40.s:1922   .debug_str:00000000000003a0 .LASF77
     /tmp/ccqcvo40.s:1956   .debug_str:00000000000004aa .LASF79
     /tmp/ccqcvo40.s:1888   .debug_str:0000000000000270 .LASF80
     /tmp/ccqcvo40.s:1944   .debug_str:0000000000000457 .LASF81
     /tmp/ccqcvo40.s:1856   .debug_str:00000000000000d4 .LASF82
     /tmp/ccqcvo40.s:1918   .debug_str:000000000000038b .LASF83
GAS LISTING /tmp/ccqcvo40.s 			page 13


     /tmp/ccqcvo40.s:1970   .debug_str:0000000000000522 .LASF84
     /tmp/ccqcvo40.s:2014   .debug_str:0000000000000697 .LASF85
     /tmp/ccqcvo40.s:1954   .debug_str:0000000000000497 .LASF86
     /tmp/ccqcvo40.s:1890   .debug_str:0000000000000275 .LASF87
     /tmp/ccqcvo40.s:1966   .debug_str:00000000000004fb .LASF88
     /tmp/ccqcvo40.s:1958   .debug_str:00000000000004d4 .LASF89
     /tmp/ccqcvo40.s:10     .text:0000000000000000 .LFB21
     /tmp/ccqcvo40.s:222    .text:000000000000009c .LFE21
     /tmp/ccqcvo40.s:1838   .debug_str:000000000000004d .LASF90
     /tmp/ccqcvo40.s:1710   .debug_loc:0000000000000000 .LLST0
     /tmp/ccqcvo40.s:1816   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccqcvo40.s:2006   .debug_str:000000000000065c .LASF91
     /tmp/ccqcvo40.s:1721   .debug_loc:0000000000000036 .LLST1
     /tmp/ccqcvo40.s:1872   .debug_str:0000000000000161 .LASF92
     /tmp/ccqcvo40.s:1741   .debug_loc:0000000000000093 .LLST2
     /tmp/ccqcvo40.s:1748   .debug_loc:00000000000000b6 .LLST3
     /tmp/ccqcvo40.s:172    .text:0000000000000074 .LBB25
     /tmp/ccqcvo40.s:196    .text:0000000000000088 .LBE25
     /tmp/ccqcvo40.s:1755   .debug_loc:00000000000000d9 .LLST5
     /tmp/ccqcvo40.s:1840   .debug_str:0000000000000054 .LASF93
     /tmp/ccqcvo40.s:1770   .debug_loc:0000000000000113 .LLST6
     /tmp/ccqcvo40.s:188    .text:0000000000000084 .LVL16
     /tmp/ccqcvo40.s:201    .text:000000000000008c .LBB24
     /tmp/ccqcvo40.s:215    .text:0000000000000098 .LBE24
     /tmp/ccqcvo40.s:1962   .debug_str:00000000000004ed .LASF94
     /tmp/ccqcvo40.s:1777   .debug_loc:0000000000000136 .LLST4
     /tmp/ccqcvo40.s:214    .text:0000000000000098 .LVL19
     /tmp/ccqcvo40.s:93     .text:0000000000000048 .LBB28
     /tmp/ccqcvo40.s:109    .text:0000000000000054 .LBE28
     /tmp/ccqcvo40.s:115    .text:0000000000000058 .LBB30
     /tmp/ccqcvo40.s:126    .text:000000000000005c .LBE30
     /tmp/ccqcvo40.s:1789   .debug_loc:000000000000016d .LLST7
     /tmp/ccqcvo40.s:128    .text:000000000000005c .LBB32
     /tmp/ccqcvo40.s:145    .text:0000000000000068 .LBE32
     /tmp/ccqcvo40.s:151    .text:000000000000006c .LBB34
     /tmp/ccqcvo40.s:162    .text:0000000000000070 .LBE34
     /tmp/ccqcvo40.s:1796   .debug_loc:0000000000000190 .LLST8
     /tmp/ccqcvo40.s:23     .text:0000000000000010 .LBB18
     /tmp/ccqcvo40.s:40     .text:000000000000001c .LBE18
     /tmp/ccqcvo40.s:38     .text:000000000000001c .LVL0
     /tmp/ccqcvo40.s:45     .text:0000000000000024 .LVL1
     /tmp/ccqcvo40.s:58     .text:0000000000000034 .LVL2
     /tmp/ccqcvo40.s:76     .text:000000000000003c .LVL4
     /tmp/ccqcvo40.s:71     .text:0000000000000038 .LVL3
     /tmp/ccqcvo40.s:88     .text:0000000000000048 .LVL5
     /tmp/ccqcvo40.s:167    .text:0000000000000074 .LVL13
     /tmp/ccqcvo40.s:198    .text:000000000000008c .LVL17
     /tmp/ccqcvo40.s:107    .text:0000000000000054 .LVL6
     /tmp/ccqcvo40.s:137    .text:0000000000000060 .LVL9
     /tmp/ccqcvo40.s:143    .text:0000000000000068 .LVL10
     /tmp/ccqcvo40.s:180    .text:0000000000000078 .LVL14
     /tmp/ccqcvo40.s:186    .text:000000000000007c .LVL15
     /tmp/ccqcvo40.s:209    .text:0000000000000090 .LVL18
     /tmp/ccqcvo40.s:113    .text:0000000000000058 .LVL7
     /tmp/ccqcvo40.s:123    .text:000000000000005c .LVL8
     /tmp/ccqcvo40.s:149    .text:000000000000006c .LVL11
     /tmp/ccqcvo40.s:159    .text:0000000000000070 .LVL12
GAS LISTING /tmp/ccqcvo40.s 			page 14


     /tmp/ccqcvo40.s:272    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccqcvo40.s:62     .text:0000000000000034 .LBB21
     /tmp/ccqcvo40.s:79     .text:0000000000000040 .LBE21
     /tmp/ccqcvo40.s:83     .text:0000000000000040 .LBB37
     /tmp/ccqcvo40.s:163    .text:0000000000000070 .LBE37
     /tmp/ccqcvo40.s:170    .text:0000000000000074 .LBB38
     /tmp/ccqcvo40.s:219    .text:000000000000009c .LBE38

UNDEFINED SYMBOLS
_ZN15MemoryAllocator21tryToAllocateFragmentEm
_ZN15MemoryAllocator16tryToFreeSegmentEPv
