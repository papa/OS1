GAS LISTING /tmp/ccIlKMw3.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv15userMainWrapperEPv
   9              	_ZN5Riscv15userMainWrapperEPv:
  10              	.LFB34:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 4/27/22.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   7:src/Riscv.cpp **** #include "../h/PCB.hpp"
   8:src/Riscv.cpp **** #include "../h/syscall_cpp.hpp"
   9:src/Riscv.cpp **** #include "../h/SleepPCBList.hpp"
  10:src/Riscv.cpp **** #include "../h/KConsole.hpp"
  11:src/Riscv.cpp **** #include "../h/Tests.hpp"
  12:src/Riscv.cpp **** #include "../test/userMain.hpp"
  13:src/Riscv.cpp **** 
  14:src/Riscv.cpp **** uint64 Riscv::totalTime = 0;
  15:src/Riscv.cpp **** bool Riscv::finishSystem = false;
  16:src/Riscv.cpp **** bool Riscv::kernelMainCalled = false;
  17:src/Riscv.cpp **** 
  18:src/Riscv.cpp **** void Riscv::initSystem()
  19:src/Riscv.cpp **** {
  20:src/Riscv.cpp ****     w_stvec((uint64)&Riscv::supervisorTrap);
  21:src/Riscv.cpp ****     PCB::initialize();
  22:src/Riscv.cpp ****     KConsole::initialize();
  23:src/Riscv.cpp **** }
  24:src/Riscv.cpp **** 
  25:src/Riscv.cpp **** void Riscv::endSystem()
  26:src/Riscv.cpp **** {
  27:src/Riscv.cpp ****     Riscv::disableInterrupts();
  28:src/Riscv.cpp **** }
  29:src/Riscv.cpp **** 
  30:src/Riscv.cpp **** void Riscv::enableInterrupts() {
  31:src/Riscv.cpp ****     ms_sstatus(Riscv::SSTATUS_SIE);
  32:src/Riscv.cpp **** }
  33:src/Riscv.cpp **** 
  34:src/Riscv.cpp **** void Riscv::disableInterrupts()
  35:src/Riscv.cpp **** {
  36:src/Riscv.cpp ****     mc_sstatus(Riscv::SSTATUS_SIE);
  37:src/Riscv.cpp **** }
  38:src/Riscv.cpp **** 
  39:src/Riscv.cpp **** void Riscv::popSppSpie()
  40:src/Riscv.cpp **** {
  41:src/Riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  42:src/Riscv.cpp ****     __asm__ volatile ("sret");
  43:src/Riscv.cpp **** }
  44:src/Riscv.cpp **** 
  45:src/Riscv.cpp **** void Riscv::handleSupervisorTrap()
  46:src/Riscv.cpp **** {
  47:src/Riscv.cpp ****     __asm__ volatile("mv %0, a4" : "=r"(PCB::savedRegA4));
GAS LISTING /tmp/ccIlKMw3.s 			page 2


  48:src/Riscv.cpp ****     __asm__ volatile("csrr %0, sscratch":"=r"(PCB::running->sscratch));
  49:src/Riscv.cpp **** 
  50:src/Riscv.cpp ****     uint64 scause = Riscv::r_scause();
  51:src/Riscv.cpp **** 
  52:src/Riscv.cpp ****     switch(scause)
  53:src/Riscv.cpp ****     {
  54:src/Riscv.cpp ****         case timerInterrupt:
  55:src/Riscv.cpp ****         {
  56:src/Riscv.cpp ****             uint64 volatile sepc = Riscv::r_sepc();
  57:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
  58:src/Riscv.cpp ****             mc_sip(Riscv::SIP_SSIP);
  59:src/Riscv.cpp ****             //trapPrintString("timerInterrupt\n");
  60:src/Riscv.cpp ****             //static uint64 total = 0;
  61:src/Riscv.cpp ****             totalTime++;
  62:src/Riscv.cpp ****             //trapPrintInt(totalTime);
  63:src/Riscv.cpp **** 
  64:src/Riscv.cpp ****             PCB::timeSliceCounter++;
  65:src/Riscv.cpp ****             SleepPCBList::tryToWakePCBs();
  66:src/Riscv.cpp ****             if (PCB::timeSliceCounter >= PCB::running->getTimeSlice())
  67:src/Riscv.cpp ****             {
  68:src/Riscv.cpp ****                 PCB::timeSliceCounter = 0;
  69:src/Riscv.cpp ****                 PCB::dispatch();
  70:src/Riscv.cpp ****             }
  71:src/Riscv.cpp **** 
  72:src/Riscv.cpp ****             Riscv::w_sstatus(sstatus);
  73:src/Riscv.cpp ****             Riscv::w_sepc(sepc);
  74:src/Riscv.cpp ****             changePrivMode();
  75:src/Riscv.cpp ****             break;
  76:src/Riscv.cpp ****         }
  77:src/Riscv.cpp ****         case hwInterrupt:
  78:src/Riscv.cpp ****         {
  79:src/Riscv.cpp ****             uint64 x = CONSOLE_STATUS;
  80:src/Riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(x));
  81:src/Riscv.cpp ****             __asm__ volatile("lb a1, 0(a0)");
  82:src/Riscv.cpp ****             uint64 operation;
  83:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" :  "=r"(operation));
  84:src/Riscv.cpp ****             if(operation & KConsole::STATUS_READ_MASK)
  85:src/Riscv.cpp ****             {
  86:src/Riscv.cpp ****                 x = CONSOLE_TX_DATA;
  87:src/Riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(x));
  88:src/Riscv.cpp ****                 __asm__ volatile("lb a1,0(a0)");
  89:src/Riscv.cpp ****                 char c;
  90:src/Riscv.cpp ****                 __asm__ volatile("mv %0, a1" :  "=r"(c));
  91:src/Riscv.cpp ****                 if(KConsole::pendingGetc > 0)
  92:src/Riscv.cpp ****                 {
  93:src/Riscv.cpp ****                     KConsole::pendingGetc--;
  94:src/Riscv.cpp ****                     KConsole::putCharacterInput(c);
  95:src/Riscv.cpp ****                     //KConsole::putCharacterOutput(c);
  96:src/Riscv.cpp ****                 }
  97:src/Riscv.cpp ****             }
  98:src/Riscv.cpp **** 
  99:src/Riscv.cpp ****             plic_complete(plic_claim());
 100:src/Riscv.cpp **** 
 101:src/Riscv.cpp ****             break;
 102:src/Riscv.cpp ****         }
 103:src/Riscv.cpp ****         case operationInterrupt: // todo
 104:src/Riscv.cpp ****         {
GAS LISTING /tmp/ccIlKMw3.s 			page 3


 105:src/Riscv.cpp ****             //trapPrintString("operation interrupt\n");
 106:src/Riscv.cpp ****             PCB::threadExitHandler();
 107:src/Riscv.cpp ****             break;
 108:src/Riscv.cpp ****         }
 109:src/Riscv.cpp ****         case addrReadInterrupt: // todo
 110:src/Riscv.cpp ****         {
 111:src/Riscv.cpp ****             //trapPrintString("read interrupt\n");
 112:src/Riscv.cpp ****             PCB::threadExitHandler();
 113:src/Riscv.cpp ****             break;
 114:src/Riscv.cpp ****         }
 115:src/Riscv.cpp ****         case addrWriteInterrupt: // todo
 116:src/Riscv.cpp ****         {
 117:src/Riscv.cpp ****             //trapPrintString("write interrupt\n");
 118:src/Riscv.cpp ****             PCB::threadExitHandler();
 119:src/Riscv.cpp ****             break;
 120:src/Riscv.cpp ****         }
 121:src/Riscv.cpp ****         case ecallSystemInterupt:
 122:src/Riscv.cpp ****         case ecallUserInterrupt:
 123:src/Riscv.cpp ****         {
 124:src/Riscv.cpp ****             uint64 operation;
 125:src/Riscv.cpp ****             __asm__ volatile("mv %0, a0" :  "=r"(operation));
 126:src/Riscv.cpp **** 
 127:src/Riscv.cpp ****             uint64 volatile sepc = Riscv::r_sepc() + 4;
 128:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 129:src/Riscv.cpp **** 
 130:src/Riscv.cpp ****             switch(operation)
 131:src/Riscv.cpp ****             {
 132:src/Riscv.cpp ****                 case MemoryAllocator::MEM_ALLOC:
 133:src/Riscv.cpp ****                     MemoryAllocator::memAllocHandler();
 134:src/Riscv.cpp ****                     break;
 135:src/Riscv.cpp ****                 case MemoryAllocator::MEM_FREE:
 136:src/Riscv.cpp ****                     MemoryAllocator::memFreeHandler();
 137:src/Riscv.cpp ****                     break;
 138:src/Riscv.cpp ****                 case PCB::THREAD_MAKE_PCB:
 139:src/Riscv.cpp ****                     PCB::threadMakePCBHandler();
 140:src/Riscv.cpp ****                     break;
 141:src/Riscv.cpp ****                 case PCB::THREAD_CREATE:
 142:src/Riscv.cpp ****                     PCB::threadCreateHandler();
 143:src/Riscv.cpp ****                     break;
 144:src/Riscv.cpp ****                 case PCB::THREAD_START:
 145:src/Riscv.cpp ****                     PCB::threadStartHandler();
 146:src/Riscv.cpp ****                     break;
 147:src/Riscv.cpp ****                 case PCB::THREAD_DISPATCH:
 148:src/Riscv.cpp ****                     PCB::threadDispatchHandler();
 149:src/Riscv.cpp ****                     break;
 150:src/Riscv.cpp ****                 case PCB::THREAD_EXIT:
 151:src/Riscv.cpp ****                     PCB::threadExitHandler();
 152:src/Riscv.cpp ****                     break;
 153:src/Riscv.cpp ****                 case PCB::TIME_SLEEP:
 154:src/Riscv.cpp ****                     PCB::threadSleepHandler();
 155:src/Riscv.cpp ****                     break;
 156:src/Riscv.cpp ****                 case KSemaphore::SEM_OPEN:
 157:src/Riscv.cpp ****                     KSemaphore::semOpenHandler();
 158:src/Riscv.cpp ****                     break;
 159:src/Riscv.cpp ****                 case KSemaphore::SEM_WAIT:
 160:src/Riscv.cpp ****                     KSemaphore::semWaitHandler();
 161:src/Riscv.cpp ****                     break;
GAS LISTING /tmp/ccIlKMw3.s 			page 4


 162:src/Riscv.cpp ****                 case KSemaphore::SEM_SIGNAL:
 163:src/Riscv.cpp ****                     KSemaphore::semSignalHandler();
 164:src/Riscv.cpp ****                     break;
 165:src/Riscv.cpp ****                 case KSemaphore::SEM_CLOSE:
 166:src/Riscv.cpp ****                     KSemaphore::semCloseHandler();
 167:src/Riscv.cpp ****                     break;
 168:src/Riscv.cpp ****                 case KConsole::CONSOLE_GETC:
 169:src/Riscv.cpp ****                     KConsole::getcHandler();
 170:src/Riscv.cpp ****                     break;
 171:src/Riscv.cpp ****                 case KConsole::CONSOLE_PUTC:
 172:src/Riscv.cpp ****                     KConsole::putcHandler();
 173:src/Riscv.cpp ****                     break;
 174:src/Riscv.cpp ****                 case KConsole::CONSOLE_GET_CHAR:
 175:src/Riscv.cpp ****                     KConsole::getCharHandler();
 176:src/Riscv.cpp ****                     break;
 177:src/Riscv.cpp ****             }
 178:src/Riscv.cpp **** 
 179:src/Riscv.cpp ****             Riscv::w_sstatus(sstatus);
 180:src/Riscv.cpp ****             Riscv::w_sepc(sepc);
 181:src/Riscv.cpp ****             changePrivMode();
 182:src/Riscv.cpp ****             break;
 183:src/Riscv.cpp ****         }
 184:src/Riscv.cpp ****     }
 185:src/Riscv.cpp **** }
 186:src/Riscv.cpp **** 
 187:src/Riscv.cpp **** void Riscv::kernelMain()
 188:src/Riscv.cpp **** {
 189:src/Riscv.cpp ****     if(kernelMainCalled) return;
 190:src/Riscv.cpp ****     kernelMainCalled = true;
 191:src/Riscv.cpp **** 
 192:src/Riscv.cpp ****     initSystem();
 193:src/Riscv.cpp **** 
 194:src/Riscv.cpp ****     PCB* userPCB = new PCB(&Riscv::userMainWrapper, 0, MemoryAllocator::kmalloc(DEFAULT_STACK_SIZE)
 195:src/Riscv.cpp ****     //PCB* userPCB = new PCB(&Riscv::myTestsWrapper, 0, kmalloc(DEFAULT_STACK_SIZE), DEFAULT_TIME_S
 196:src/Riscv.cpp ****     userPCB->start();
 197:src/Riscv.cpp **** 
 198:src/Riscv.cpp ****     disableTimerInterrupts();
 199:src/Riscv.cpp ****     enableInterrupts();
 200:src/Riscv.cpp **** 
 201:src/Riscv.cpp ****     while(!userPCB->isFinished())
 202:src/Riscv.cpp ****     {
 203:src/Riscv.cpp ****         thread_dispatch();
 204:src/Riscv.cpp ****     }
 205:src/Riscv.cpp **** 
 206:src/Riscv.cpp ****     //printString("End...\n");
 207:src/Riscv.cpp ****     finishSystem = true;
 208:src/Riscv.cpp ****     while(!PCB::consolePCB->isFinished())
 209:src/Riscv.cpp ****     {
 210:src/Riscv.cpp ****         thread_dispatch();
 211:src/Riscv.cpp ****     }
 212:src/Riscv.cpp ****     disableInterrupts();
 213:src/Riscv.cpp ****     endSystem();
 214:src/Riscv.cpp **** }
 215:src/Riscv.cpp **** 
 216:src/Riscv.cpp **** void Riscv::userMainWrapper(void* )
 217:src/Riscv.cpp **** {
  12              		.loc 1 217 1
GAS LISTING /tmp/ccIlKMw3.s 			page 5


  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
 218:src/Riscv.cpp ****     userMain();
  22              		.loc 1 218 5
  23              		.loc 1 218 13 is_stmt 0
  24 0010 97000000 		call	_Z8userMainv@plt
  24      E7800000 
  25              	.LVL0:
 219:src/Riscv.cpp **** }
  26              		.loc 1 219 1
  27 0018 83308100 		ld	ra,8(sp)
  28              		.cfi_restore 1
  29 001c 03340100 		ld	s0,0(sp)
  30              		.cfi_restore 8
  31              		.cfi_def_cfa 2, 16
  32 0020 13010101 		addi	sp,sp,16
  33              		.cfi_def_cfa_offset 0
  34 0024 67800000 		jr	ra
  35              		.cfi_endproc
  36              	.LFE34:
  38              		.align	2
  39              		.globl	_ZN5Riscv10initSystemEv
  41              	_ZN5Riscv10initSystemEv:
  42              	.LFB27:
  19:src/Riscv.cpp ****     w_stvec((uint64)&Riscv::supervisorTrap);
  43              		.loc 1 19 1 is_stmt 1
  44              		.cfi_startproc
  45 0028 130101FF 		addi	sp,sp,-16
  46              		.cfi_def_cfa_offset 16
  47 002c 23341100 		sd	ra,8(sp)
  48 0030 23308100 		sd	s0,0(sp)
  49              		.cfi_offset 1, -8
  50              		.cfi_offset 8, -16
  51 0034 13040101 		addi	s0,sp,16
  52              		.cfi_def_cfa 8, 0
  20:src/Riscv.cpp ****     PCB::initialize();
  53              		.loc 1 20 5
  20:src/Riscv.cpp ****     PCB::initialize();
  54              		.loc 1 20 12 is_stmt 0
  55 0038 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
  55      83B70700 
  56              	.LVL1:
  57              	.LBB41:
  58              	.LBB42:
  59              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 4/27/22.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_V1_0_RISCV_HPP
GAS LISTING /tmp/ccIlKMw3.s 			page 6


   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_V1_0_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** #include "../test/printing.hpp"
  10:src/../h/Riscv.hpp **** 
  11:src/../h/Riscv.hpp **** class Riscv
  12:src/../h/Riscv.hpp **** {
  13:src/../h/Riscv.hpp **** public:
  14:src/../h/Riscv.hpp ****     static void kernelMain();
  15:src/../h/Riscv.hpp **** private:
  16:src/../h/Riscv.hpp ****     static bool kernelMainCalled;
  17:src/../h/Riscv.hpp ****     static void changePrivMode();
  18:src/../h/Riscv.hpp **** 
  19:src/../h/Riscv.hpp ****     static void initSystem();
  20:src/../h/Riscv.hpp ****     static void endSystem();
  21:src/../h/Riscv.hpp **** 
  22:src/../h/Riscv.hpp ****     static void userMainWrapper(void* p);
  23:src/../h/Riscv.hpp **** 
  24:src/../h/Riscv.hpp ****     static void enableInterrupts();
  25:src/../h/Riscv.hpp **** 
  26:src/../h/Riscv.hpp ****     static void disableTimerInterrupts();
  27:src/../h/Riscv.hpp **** 
  28:src/../h/Riscv.hpp ****     static void disableInterrupts();
  29:src/../h/Riscv.hpp **** 
  30:src/../h/Riscv.hpp ****     static void idleRiscv(void* arg);
  31:src/../h/Riscv.hpp **** 
  32:src/../h/Riscv.hpp ****     static void pushRegisters();
  33:src/../h/Riscv.hpp ****     static void popRegisters();
  34:src/../h/Riscv.hpp **** 
  35:src/../h/Riscv.hpp ****     static uint64 r_scause();
  36:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  37:src/../h/Riscv.hpp **** 
  38:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  39:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  40:src/../h/Riscv.hpp **** 
  41:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  42:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  43:src/../h/Riscv.hpp **** 
  44:src/../h/Riscv.hpp ****     static uint64 r_stval();
  45:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  46:src/../h/Riscv.hpp **** 
  47:src/../h/Riscv.hpp ****     static bool finishSystem;
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     enum BitMaskSip
  50:src/../h/Riscv.hpp ****     {
  51:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  52:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  53:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  54:src/../h/Riscv.hpp ****     };
  55:src/../h/Riscv.hpp **** 
  56:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  57:src/../h/Riscv.hpp **** 
  58:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  59:src/../h/Riscv.hpp **** 
  60:src/../h/Riscv.hpp ****     static uint64 r_sip();
  61:src/../h/Riscv.hpp **** 
  62:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
GAS LISTING /tmp/ccIlKMw3.s 			page 7


  63:src/../h/Riscv.hpp **** 
  64:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  65:src/../h/Riscv.hpp ****     {
  66:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  67:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  68:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  69:src/../h/Riscv.hpp ****     };
  70:src/../h/Riscv.hpp **** 
  71:src/../h/Riscv.hpp ****     static void w_a0_sscratch();
  72:src/../h/Riscv.hpp **** 
  73:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  74:src/../h/Riscv.hpp **** 
  75:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp ****     static void mc_sie(uint64 mask);
  78:src/../h/Riscv.hpp **** 
  79:src/../h/Riscv.hpp ****     static void ms_sie(uint64 mask);
  80:src/../h/Riscv.hpp **** 
  81:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  84:src/../h/Riscv.hpp **** 
  85:src/../h/Riscv.hpp ****     static uint64 r_sie();
  86:src/../h/Riscv.hpp ****     static void w_sie(uint64 sie);
  87:src/../h/Riscv.hpp ****     static void popSppSpie();
  88:src/../h/Riscv.hpp **** 
  89:src/../h/Riscv.hpp ****     static void supervisorTrap();
  90:src/../h/Riscv.hpp ****     static void handleSupervisorTrap();
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp ****     static void myTestsWrapper(void* );
  93:src/../h/Riscv.hpp **** 
  94:src/../h/Riscv.hpp ****     static const uint64 bntOne = 1UL << 63;;
  95:src/../h/Riscv.hpp ****     static const uint64 bntZero = 0UL;
  96:src/../h/Riscv.hpp ****     static const uint64 timerInterrupt = bntOne + 1UL;
  97:src/../h/Riscv.hpp ****     static const uint64 hwInterrupt = bntOne + 9UL;
  98:src/../h/Riscv.hpp ****     static const uint64 operationInterrupt = bntZero + 2UL;
  99:src/../h/Riscv.hpp ****     static const uint64 addrReadInterrupt = bntZero + 5UL;
 100:src/../h/Riscv.hpp ****     static const uint64 addrWriteInterrupt = bntZero + 7UL;
 101:src/../h/Riscv.hpp ****     static const uint64 ecallUserInterrupt = bntZero + 8UL;
 102:src/../h/Riscv.hpp ****     static const uint64 ecallSystemInterupt = bntZero + 9UL;
 103:src/../h/Riscv.hpp **** 
 104:src/../h/Riscv.hpp ****     static uint64 totalTime;
 105:src/../h/Riscv.hpp **** 
 106:src/../h/Riscv.hpp ****     friend class PCB;
 107:src/../h/Riscv.hpp ****     friend class Scheduler;
 108:src/../h/Riscv.hpp ****     friend class SleepPCBList;
 109:src/../h/Riscv.hpp ****     friend class KSemaphore;
 110:src/../h/Riscv.hpp ****     friend class KConsole;
 111:src/../h/Riscv.hpp ****     friend class MemoryAllocator;
 112:src/../h/Riscv.hpp **** };
 113:src/../h/Riscv.hpp **** 
 114:src/../h/Riscv.hpp **** inline void Riscv::mc_sie(uint64 mask)
 115:src/../h/Riscv.hpp **** {
 116:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sie, %0" : :"r"(mask));
 117:src/../h/Riscv.hpp **** }
 118:src/../h/Riscv.hpp **** 
 119:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
GAS LISTING /tmp/ccIlKMw3.s 			page 8


 120:src/../h/Riscv.hpp ****     uint64 volatile scause;
 121:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, scause" : "=r"(scause));
 122:src/../h/Riscv.hpp ****     return scause;
 123:src/../h/Riscv.hpp **** }
 124:src/../h/Riscv.hpp **** 
 125:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
 126:src/../h/Riscv.hpp ****     __asm__ volatile("csrw scause, %0" : :"r"(scause));
 127:src/../h/Riscv.hpp **** }
 128:src/../h/Riscv.hpp **** 
 129:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
 130:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 131:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, sepc" : "=r"(sepc));
 132:src/../h/Riscv.hpp ****     return sepc;
 133:src/../h/Riscv.hpp **** }
 134:src/../h/Riscv.hpp **** 
 135:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
 136:src/../h/Riscv.hpp ****     __asm__ volatile("csrw sepc, %0" : :"r"(sepc));
 137:src/../h/Riscv.hpp **** }
 138:src/../h/Riscv.hpp **** 
 139:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
 140:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 141:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, stvec" : "=r"(stvec));
 142:src/../h/Riscv.hpp ****     return stvec;
 143:src/../h/Riscv.hpp **** }
 144:src/../h/Riscv.hpp **** 
 145:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
 146:src/../h/Riscv.hpp ****     __asm__ volatile("csrw stvec, %0" : :"r"(stvec));
  60              		.loc 2 146 5 is_stmt 1
  61              		.loc 2 146 53 is_stmt 0
  62              	#APP
  63              	# 146 "src/../h/Riscv.hpp" 1
 147              	}
  64              		csrw stvec, a5
  65              	# 0 "" 2
  66              	.LVL2:
  67              	#NO_APP
  68              	.LBE42:
  69              	.LBE41:
  21:src/Riscv.cpp ****     KConsole::initialize();
  70              		.loc 1 21 5 is_stmt 1
  21:src/Riscv.cpp ****     KConsole::initialize();
  71              		.loc 1 21 20 is_stmt 0
  72 0044 97000000 		call	_ZN3PCB10initializeEv@plt
  72      E7800000 
  73              	.LVL3:
  22:src/Riscv.cpp **** }
  74              		.loc 1 22 5 is_stmt 1
  22:src/Riscv.cpp **** }
  75              		.loc 1 22 25 is_stmt 0
  76 004c 97000000 		call	_ZN8KConsole10initializeEv@plt
  76      E7800000 
  77              	.LVL4:
  23:src/Riscv.cpp **** 
  78              		.loc 1 23 1
  79 0054 83308100 		ld	ra,8(sp)
  80              		.cfi_restore 1
  81 0058 03340100 		ld	s0,0(sp)
GAS LISTING /tmp/ccIlKMw3.s 			page 9


  82              		.cfi_restore 8
  83              		.cfi_def_cfa 2, 16
  84 005c 13010101 		addi	sp,sp,16
  85              		.cfi_def_cfa_offset 0
  86 0060 67800000 		jr	ra
  87              		.cfi_endproc
  88              	.LFE27:
  90              		.align	2
  91              		.globl	_ZN5Riscv16enableInterruptsEv
  93              	_ZN5Riscv16enableInterruptsEv:
  94              	.LFB29:
  30:src/Riscv.cpp ****     ms_sstatus(Riscv::SSTATUS_SIE);
  95              		.loc 1 30 32 is_stmt 1
  96              		.cfi_startproc
  97 0064 130101FF 		addi	sp,sp,-16
  98              		.cfi_def_cfa_offset 16
  99 0068 23348100 		sd	s0,8(sp)
 100              		.cfi_offset 8, -8
 101 006c 13040101 		addi	s0,sp,16
 102              		.cfi_def_cfa 8, 0
  31:src/Riscv.cpp **** }
 103              		.loc 1 31 5
 104              	.LVL5:
 105              	.LBB43:
 106              	.LBB44:
 148:src/../h/Riscv.hpp **** 
 149:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval() {
 150:src/../h/Riscv.hpp ****     uint64 volatile stval;
 151:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, stval" : "=r"(stval));
 152:src/../h/Riscv.hpp ****     return stval;
 153:src/../h/Riscv.hpp **** }
 154:src/../h/Riscv.hpp **** 
 155:src/../h/Riscv.hpp **** inline void Riscv::w_sie(uint64 sie)
 156:src/../h/Riscv.hpp **** {
 157:src/../h/Riscv.hpp ****     __asm__ volatile("csrw sie, %0" : :"r"(sie));
 158:src/../h/Riscv.hpp **** }
 159:src/../h/Riscv.hpp **** 
 160:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval) {
 161:src/../h/Riscv.hpp ****     __asm__ volatile("csrw stval, %0" : :"r"(stval));
 162:src/../h/Riscv.hpp **** }
 163:src/../h/Riscv.hpp **** 
 164:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 165:src/../h/Riscv.hpp ****     __asm__ volatile("csrs sip, %0" : :"r"(mask));
 166:src/../h/Riscv.hpp **** }
 167:src/../h/Riscv.hpp **** 
 168:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 169:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sip, %0" : :"r"(mask));
 170:src/../h/Riscv.hpp **** }
 171:src/../h/Riscv.hpp **** 
 172:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sie()
 173:src/../h/Riscv.hpp **** {
 174:src/../h/Riscv.hpp ****     uint64 volatile sie;
 175:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, sip" : "=r"(sie));
 176:src/../h/Riscv.hpp ****     return sie;
 177:src/../h/Riscv.hpp **** }
 178:src/../h/Riscv.hpp **** 
 179:src/../h/Riscv.hpp **** inline void Riscv::ms_sie(uint64 mask)
GAS LISTING /tmp/ccIlKMw3.s 			page 10


 180:src/../h/Riscv.hpp **** {
 181:src/../h/Riscv.hpp ****     __asm__ volatile("csrs sie, %0" : :"r"(mask));
 182:src/../h/Riscv.hpp **** }
 183:src/../h/Riscv.hpp **** 
 184:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip() {
 185:src/../h/Riscv.hpp ****     uint64 volatile sip;
 186:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, sip" : "=r"(sip));
 187:src/../h/Riscv.hpp ****     return sip;
 188:src/../h/Riscv.hpp **** }
 189:src/../h/Riscv.hpp **** 
 190:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip) {
 191:src/../h/Riscv.hpp ****     __asm__ volatile("csrw sip, %0" : :"r"(sip));
 192:src/../h/Riscv.hpp **** }
 193:src/../h/Riscv.hpp **** 
 194:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
 195:src/../h/Riscv.hpp ****     __asm__ volatile("csrs sstatus, %0" : :"r"(mask));
 107              		.loc 2 195 5
 108              		.loc 2 195 54 is_stmt 0
 109 0070 93072000 		li	a5,2
 110              	#APP
 111              	# 195 "src/../h/Riscv.hpp" 1
 196              	}
 112              		csrs sstatus, a5
 113              	# 0 "" 2
 114              	.LVL6:
 115              	#NO_APP
 116              	.LBE44:
 117              	.LBE43:
  32:src/Riscv.cpp **** 
 118              		.loc 1 32 1
 119 0078 03348100 		ld	s0,8(sp)
 120              		.cfi_restore 8
 121              		.cfi_def_cfa 2, 16
 122 007c 13010101 		addi	sp,sp,16
 123              		.cfi_def_cfa_offset 0
 124 0080 67800000 		jr	ra
 125              		.cfi_endproc
 126              	.LFE29:
 128              		.align	2
 129              		.globl	_ZN5Riscv17disableInterruptsEv
 131              	_ZN5Riscv17disableInterruptsEv:
 132              	.LFB30:
  35:src/Riscv.cpp ****     mc_sstatus(Riscv::SSTATUS_SIE);
 133              		.loc 1 35 1 is_stmt 1
 134              		.cfi_startproc
 135 0084 130101FF 		addi	sp,sp,-16
 136              		.cfi_def_cfa_offset 16
 137 0088 23348100 		sd	s0,8(sp)
 138              		.cfi_offset 8, -8
 139 008c 13040101 		addi	s0,sp,16
 140              		.cfi_def_cfa 8, 0
  36:src/Riscv.cpp **** }
 141              		.loc 1 36 5
 142              	.LVL7:
 143              	.LBB45:
 144              	.LBB46:
 197:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccIlKMw3.s 			page 11


 198:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
 199:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sstatus, %0" : :"r"(mask));
 145              		.loc 2 199 5
 146              		.loc 2 199 54 is_stmt 0
 147 0090 93072000 		li	a5,2
 148              	#APP
 149              	# 199 "src/../h/Riscv.hpp" 1
 200              	}
 150              		csrc sstatus, a5
 151              	# 0 "" 2
 152              	.LVL8:
 153              	#NO_APP
 154              	.LBE46:
 155              	.LBE45:
  37:src/Riscv.cpp **** 
 156              		.loc 1 37 1
 157 0098 03348100 		ld	s0,8(sp)
 158              		.cfi_restore 8
 159              		.cfi_def_cfa 2, 16
 160 009c 13010101 		addi	sp,sp,16
 161              		.cfi_def_cfa_offset 0
 162 00a0 67800000 		jr	ra
 163              		.cfi_endproc
 164              	.LFE30:
 166              		.align	2
 167              		.globl	_ZN5Riscv9endSystemEv
 169              	_ZN5Riscv9endSystemEv:
 170              	.LFB28:
  26:src/Riscv.cpp ****     Riscv::disableInterrupts();
 171              		.loc 1 26 1 is_stmt 1
 172              		.cfi_startproc
 173 00a4 130101FF 		addi	sp,sp,-16
 174              		.cfi_def_cfa_offset 16
 175 00a8 23341100 		sd	ra,8(sp)
 176 00ac 23308100 		sd	s0,0(sp)
 177              		.cfi_offset 1, -8
 178              		.cfi_offset 8, -16
 179 00b0 13040101 		addi	s0,sp,16
 180              		.cfi_def_cfa 8, 0
  27:src/Riscv.cpp **** }
 181              		.loc 1 27 5
  27:src/Riscv.cpp **** }
 182              		.loc 1 27 29 is_stmt 0
 183 00b4 97000000 		call	_ZN5Riscv17disableInterruptsEv
 183      E7800000 
 184              	.LVL9:
  28:src/Riscv.cpp **** 
 185              		.loc 1 28 1
 186 00bc 83308100 		ld	ra,8(sp)
 187              		.cfi_restore 1
 188 00c0 03340100 		ld	s0,0(sp)
 189              		.cfi_restore 8
 190              		.cfi_def_cfa 2, 16
 191 00c4 13010101 		addi	sp,sp,16
 192              		.cfi_def_cfa_offset 0
 193 00c8 67800000 		jr	ra
 194              		.cfi_endproc
GAS LISTING /tmp/ccIlKMw3.s 			page 12


 195              	.LFE28:
 197              		.align	2
 198              		.globl	_ZN5Riscv10popSppSpieEv
 200              	_ZN5Riscv10popSppSpieEv:
 201              	.LFB31:
  40:src/Riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
 202              		.loc 1 40 1 is_stmt 1
 203              		.cfi_startproc
 204 00cc 130101FF 		addi	sp,sp,-16
 205              		.cfi_def_cfa_offset 16
 206 00d0 23348100 		sd	s0,8(sp)
 207              		.cfi_offset 8, -8
 208 00d4 13040101 		addi	s0,sp,16
 209              		.cfi_def_cfa 8, 0
  41:src/Riscv.cpp ****     __asm__ volatile ("sret");
 210              		.loc 1 41 5
  41:src/Riscv.cpp ****     __asm__ volatile ("sret");
 211              		.loc 1 41 39 is_stmt 0
 212              	#APP
 213              	# 41 "src/Riscv.cpp" 1
  42:src/Riscv.cpp **** }
 214              		csrw sepc, ra
 215              	# 0 "" 2
 216              		.loc 1 42 5 is_stmt 1
  42:src/Riscv.cpp **** }
 217              		.loc 1 42 30 is_stmt 0
 218              	# 42 "src/Riscv.cpp" 1
  43:src/Riscv.cpp **** 
 219              		sret
 220              	# 0 "" 2
 221              		.loc 1 43 1
 222              	#NO_APP
 223 00e0 03348100 		ld	s0,8(sp)
 224              		.cfi_restore 8
 225              		.cfi_def_cfa 2, 16
 226 00e4 13010101 		addi	sp,sp,16
 227              		.cfi_def_cfa_offset 0
 228 00e8 67800000 		jr	ra
 229              		.cfi_endproc
 230              	.LFE31:
 232              		.align	2
 233              		.globl	_ZN5Riscv14myTestsWrapperEPv
 235              	_ZN5Riscv14myTestsWrapperEPv:
 236              	.LFB35:
 220:src/Riscv.cpp **** 
 221:src/Riscv.cpp **** void Riscv::myTestsWrapper(void* p)
 222:src/Riscv.cpp **** {
 237              		.loc 1 222 1 is_stmt 1
 238              		.cfi_startproc
 239              	.LVL10:
 240 00ec 130101FF 		addi	sp,sp,-16
 241              		.cfi_def_cfa_offset 16
 242 00f0 23341100 		sd	ra,8(sp)
 243 00f4 23308100 		sd	s0,0(sp)
 244              		.cfi_offset 1, -8
 245              		.cfi_offset 8, -16
 246 00f8 13040101 		addi	s0,sp,16
GAS LISTING /tmp/ccIlKMw3.s 			page 13


 247              		.cfi_def_cfa 8, 0
 223:src/Riscv.cpp ****     myTests();
 248              		.loc 1 223 5
 249              		.loc 1 223 12 is_stmt 0
 250 00fc 97000000 		call	_Z7myTestsv@plt
 250      E7800000 
 251              	.LVL11:
 224:src/Riscv.cpp **** }
 252              		.loc 1 224 1
 253 0104 83308100 		ld	ra,8(sp)
 254              		.cfi_restore 1
 255 0108 03340100 		ld	s0,0(sp)
 256              		.cfi_restore 8
 257              		.cfi_def_cfa 2, 16
 258 010c 13010101 		addi	sp,sp,16
 259              		.cfi_def_cfa_offset 0
 260 0110 67800000 		jr	ra
 261              		.cfi_endproc
 262              	.LFE35:
 264              		.align	2
 265              		.globl	_ZN5Riscv22disableTimerInterruptsEv
 267              	_ZN5Riscv22disableTimerInterruptsEv:
 268              	.LFB36:
 225:src/Riscv.cpp **** 
 226:src/Riscv.cpp **** void Riscv::disableTimerInterrupts()
 227:src/Riscv.cpp **** {
 269              		.loc 1 227 1 is_stmt 1
 270              		.cfi_startproc
 271 0114 130101FF 		addi	sp,sp,-16
 272              		.cfi_def_cfa_offset 16
 273 0118 23348100 		sd	s0,8(sp)
 274              		.cfi_offset 8, -8
 275 011c 13040101 		addi	s0,sp,16
 276              		.cfi_def_cfa 8, 0
 228:src/Riscv.cpp ****     uint64 x = 0x2;
 277              		.loc 1 228 5
 278              	.LVL12:
 229:src/Riscv.cpp ****     __asm__ volatile("csrc sie, %0"::"r"(x));
 279              		.loc 1 229 5
 280              		.loc 1 229 45 is_stmt 0
 281 0120 93072000 		li	a5,2
 282              	#APP
 283              	# 229 "src/Riscv.cpp" 1
 230              	}
 284              		csrc sie, a5
 285              	# 0 "" 2
 286              		.loc 1 230 1
 287              	#NO_APP
 288 0128 03348100 		ld	s0,8(sp)
 289              		.cfi_restore 8
 290              		.cfi_def_cfa 2, 16
 291 012c 13010101 		addi	sp,sp,16
 292              		.cfi_def_cfa_offset 0
 293 0130 67800000 		jr	ra
 294              		.cfi_endproc
 295              	.LFE36:
 297              		.align	2
GAS LISTING /tmp/ccIlKMw3.s 			page 14


 298              		.globl	_ZN5Riscv10kernelMainEv
 300              	_ZN5Riscv10kernelMainEv:
 301              	.LFB33:
 188:src/Riscv.cpp ****     if(kernelMainCalled) return;
 302              		.loc 1 188 1 is_stmt 1
 303              		.cfi_startproc
 304              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 305              		.cfi_lsda 0x1b,.LLSDA33
 189:src/Riscv.cpp ****     kernelMainCalled = true;
 306              		.loc 1 189 5
 307 0134 97070000 		lbu	a5,.LANCHOR0
 307      83C70700 
 308 013c 63840700 		beqz	a5,.L29
 309 0140 67800000 		ret
 310              	.L29:
 188:src/Riscv.cpp ****     if(kernelMainCalled) return;
 311              		.loc 1 188 1 is_stmt 0
 312 0144 130101FE 		addi	sp,sp,-32
 313              		.cfi_def_cfa_offset 32
 314 0148 233C1100 		sd	ra,24(sp)
 315 014c 23388100 		sd	s0,16(sp)
 316 0150 23349100 		sd	s1,8(sp)
 317 0154 23302101 		sd	s2,0(sp)
 318              		.cfi_offset 1, -8
 319              		.cfi_offset 8, -16
 320              		.cfi_offset 9, -24
 321              		.cfi_offset 18, -32
 322 0158 13040102 		addi	s0,sp,32
 323              		.cfi_def_cfa 8, 0
 190:src/Riscv.cpp **** 
 324              		.loc 1 190 5 is_stmt 1
 190:src/Riscv.cpp **** 
 325              		.loc 1 190 22 is_stmt 0
 326 015c 93071000 		li	a5,1
 327 0160 17070000 		sb	a5,.LANCHOR0,a4
 327      2300F700 
 192:src/Riscv.cpp **** 
 328              		.loc 1 192 5 is_stmt 1
 329              	.LEHB0:
 192:src/Riscv.cpp **** 
 330              		.loc 1 192 15 is_stmt 0
 331 0168 97000000 		call	_ZN5Riscv10initSystemEv
 331      E7800000 
 332              	.LVL13:
 194:src/Riscv.cpp ****     //PCB* userPCB = new PCB(&Riscv::myTestsWrapper, 0, kmalloc(DEFAULT_STACK_SIZE), DEFAULT_TIME_S
 333              		.loc 1 194 5 is_stmt 1
 194:src/Riscv.cpp ****     //PCB* userPCB = new PCB(&Riscv::myTestsWrapper, 0, kmalloc(DEFAULT_STACK_SIZE), DEFAULT_TIME_S
 334              		.loc 1 194 80 is_stmt 0
 335 0170 37150000 		li	a0,4096
 336 0174 97000000 		call	_ZN15MemoryAllocator7kmallocEm@plt
 336      E7800000 
 337              	.LVL14:
 338 017c 13090500 		mv	s2,a0
 194:src/Riscv.cpp ****     //PCB* userPCB = new PCB(&Riscv::myTestsWrapper, 0, kmalloc(DEFAULT_STACK_SIZE), DEFAULT_TIME_S
 339              		.loc 1 194 120
 340 0180 13050006 		li	a0,96
 341 0184 97000000 		call	_ZN3PCBnwEm@plt
GAS LISTING /tmp/ccIlKMw3.s 			page 15


 341      E7800000 
 342              	.LVL15:
 343              	.LEHE0:
 344 018c 93040500 		mv	s1,a0
 345 0190 13072000 		li	a4,2
 346 0194 93060900 		mv	a3,s2
 347 0198 13060000 		li	a2,0
 348 019c 97050000 		lla	a1,_ZN5Riscv15userMainWrapperEPv
 348      93850500 
 349              	.LEHB1:
 350 01a4 97000000 		call	_ZN3PCBC1EPFvPvES0_S0_m@plt
 350      E7800000 
 351              	.LVL16:
 352              	.LEHE1:
 196:src/Riscv.cpp **** 
 353              		.loc 1 196 5 is_stmt 1 discriminator 2
 196:src/Riscv.cpp **** 
 354              		.loc 1 196 19 is_stmt 0 discriminator 2
 355 01ac 13850400 		mv	a0,s1
 356              	.LEHB2:
 357 01b0 97000000 		call	_ZN3PCB5startEv@plt
 357      E7800000 
 358              	.LVL17:
 198:src/Riscv.cpp ****     enableInterrupts();
 359              		.loc 1 198 5 is_stmt 1 discriminator 2
 198:src/Riscv.cpp ****     enableInterrupts();
 360              		.loc 1 198 27 is_stmt 0 discriminator 2
 361 01b8 97000000 		call	_ZN5Riscv22disableTimerInterruptsEv
 361      E7800000 
 362              	.LVL18:
 199:src/Riscv.cpp **** 
 363              		.loc 1 199 5 is_stmt 1 discriminator 2
 199:src/Riscv.cpp **** 
 364              		.loc 1 199 21 is_stmt 0 discriminator 2
 365 01c0 97000000 		call	_ZN5Riscv16enableInterruptsEv
 365      E7800000 
 366              	.LVL19:
 367              	.L20:
 201:src/Riscv.cpp ****     {
 368              		.loc 1 201 5 is_stmt 1
 201:src/Riscv.cpp ****     {
 369              		.loc 1 201 11
 201:src/Riscv.cpp ****     {
 370              		.loc 1 201 31 is_stmt 0
 371 01c8 13850400 		mv	a0,s1
 372 01cc 97000000 		call	_ZN3PCB10isFinishedEv@plt
 372      E7800000 
 373              	.LVL20:
 201:src/Riscv.cpp ****     {
 374              		.loc 1 201 11
 375 01d4 63180500 		bnez	a0,.L19
 203:src/Riscv.cpp ****     }
 376              		.loc 1 203 9 is_stmt 1
 203:src/Riscv.cpp ****     }
 377              		.loc 1 203 24 is_stmt 0
 378 01d8 97000000 		call	thread_dispatch@plt
 378      E7800000 
GAS LISTING /tmp/ccIlKMw3.s 			page 16


 379              	.LVL21:
 201:src/Riscv.cpp ****     {
 380              		.loc 1 201 5
 381 01e0 6FF09FFE 		j	.L20
 382              	.L19:
 207:src/Riscv.cpp ****     while(!PCB::consolePCB->isFinished())
 383              		.loc 1 207 5 is_stmt 1
 207:src/Riscv.cpp ****     while(!PCB::consolePCB->isFinished())
 384              		.loc 1 207 18 is_stmt 0
 385 01e4 93071000 		li	a5,1
 386 01e8 17070000 		sb	a5,.LANCHOR0+1,a4
 386      2300F700 
 387 01f0 6F00C000 		j	.L22
 388              	.L30:
 210:src/Riscv.cpp ****     }
 389              		.loc 1 210 9 is_stmt 1
 210:src/Riscv.cpp ****     }
 390              		.loc 1 210 24 is_stmt 0
 391 01f4 97000000 		call	thread_dispatch@plt
 391      E7800000 
 392              	.LVL22:
 393              	.L22:
 208:src/Riscv.cpp ****     {
 394              		.loc 1 208 5 is_stmt 1
 208:src/Riscv.cpp ****     {
 395              		.loc 1 208 11
 208:src/Riscv.cpp ****     {
 396              		.loc 1 208 39 is_stmt 0
 397 01fc 97070000 		la	a5,_ZN3PCB10consolePCBE
 397      83B70700 
 398 0204 03B50700 		ld	a0,0(a5)
 399 0208 97000000 		call	_ZN3PCB10isFinishedEv@plt
 399      E7800000 
 400              	.LVL23:
 401              	.LEHE2:
 208:src/Riscv.cpp ****     {
 402              		.loc 1 208 11
 403 0210 E30205FE 		beqz	a0,.L30
 212:src/Riscv.cpp ****     endSystem();
 404              		.loc 1 212 5 is_stmt 1
 212:src/Riscv.cpp ****     endSystem();
 405              		.loc 1 212 22 is_stmt 0
 406 0214 97000000 		call	_ZN5Riscv17disableInterruptsEv
 406      E7800000 
 407              	.LVL24:
 213:src/Riscv.cpp **** }
 408              		.loc 1 213 5 is_stmt 1
 213:src/Riscv.cpp **** }
 409              		.loc 1 213 14 is_stmt 0
 410 021c 97000000 		call	_ZN5Riscv9endSystemEv
 410      E7800000 
 411              	.LVL25:
 214:src/Riscv.cpp **** 
 412              		.loc 1 214 1
 413 0224 83308101 		ld	ra,24(sp)
 414              		.cfi_remember_state
 415              		.cfi_restore 1
GAS LISTING /tmp/ccIlKMw3.s 			page 17


 416 0228 03340101 		ld	s0,16(sp)
 417              		.cfi_restore 8
 418              		.cfi_def_cfa 2, 32
 419 022c 83348100 		ld	s1,8(sp)
 420              		.cfi_restore 9
 421              	.LVL26:
 422 0230 03390100 		ld	s2,0(sp)
 423              		.cfi_restore 18
 424 0234 13010102 		addi	sp,sp,32
 425              		.cfi_def_cfa_offset 0
 426 0238 67800000 		jr	ra
 427              	.L24:
 428              		.cfi_restore_state
 429 023c 13090500 		mv	s2,a0
 194:src/Riscv.cpp ****     //PCB* userPCB = new PCB(&Riscv::myTestsWrapper, 0, kmalloc(DEFAULT_STACK_SIZE), DEFAULT_TIME_S
 430              		.loc 1 194 120
 431 0240 13850400 		mv	a0,s1
 432 0244 97000000 		call	_ZN3PCBdlEPv@plt
 432      E7800000 
 433              	.LVL27:
 434 024c 13050900 		mv	a0,s2
 435              	.LEHB3:
 436 0250 97000000 		call	_Unwind_Resume@plt
 436      E7800000 
 437              	.LVL28:
 438              	.LEHE3:
 439              		.cfi_endproc
 440              	.LFE33:
 441              		.globl	__gxx_personality_v0
 442              		.section	.gcc_except_table,"a",@progbits
 443              	.LLSDA33:
 444 0000 FF       		.byte	0xff
 445 0001 FF       		.byte	0xff
 446 0002 03       		.byte	0x3
 447 0003 34       		.byte	0x34
 448 0004 00000000 		.4byte	.LEHB0-.LFB33
 449 0008 00000000 		.4byte	.LEHE0-.LEHB0
 450 000c 00000000 		.4byte	0
 451 0010 00       		.byte	0
 452 0011 00000000 		.4byte	.LEHB1-.LFB33
 453 0015 00000000 		.4byte	.LEHE1-.LEHB1
 454 0019 00000000 		.4byte	.L24-.LFB33
 455 001d 00       		.byte	0
 456 001e 00000000 		.4byte	.LEHB2-.LFB33
 457 0022 00000000 		.4byte	.LEHE2-.LEHB2
 458 0026 00000000 		.4byte	0
 459 002a 00       		.byte	0
 460 002b 00000000 		.4byte	.LEHB3-.LFB33
 461 002f 00000000 		.4byte	.LEHE3-.LEHB3
 462 0033 00000000 		.4byte	0
 463 0037 00       		.byte	0
 464              		.text
 466              		.align	2
 467              		.globl	_ZN5Riscv9idleRiscvEPv
 469              	_ZN5Riscv9idleRiscvEPv:
 470              	.LFB37:
 231:src/Riscv.cpp **** 
GAS LISTING /tmp/ccIlKMw3.s 			page 18


 232:src/Riscv.cpp **** void Riscv::idleRiscv(void* p)
 233:src/Riscv.cpp **** {
 471              		.loc 1 233 1 is_stmt 1
 472              		.cfi_startproc
 473              	.LVL29:
 474 0258 130101FF 		addi	sp,sp,-16
 475              		.cfi_def_cfa_offset 16
 476 025c 23348100 		sd	s0,8(sp)
 477              		.cfi_offset 8, -8
 478 0260 13040101 		addi	s0,sp,16
 479              		.cfi_def_cfa 8, 0
 480              	.L32:
 234:src/Riscv.cpp ****     while(true)
 481              		.loc 1 234 5 discriminator 1
 482              		.loc 1 234 5 discriminator 1
 483 0264 6F000000 		j	.L32
 484              		.cfi_endproc
 485              	.LFE37:
 487              		.align	2
 488              		.globl	_ZN5Riscv13w_a0_sscratchEv
 490              	_ZN5Riscv13w_a0_sscratchEv:
 491              	.LFB38:
 235:src/Riscv.cpp ****     {
 236:src/Riscv.cpp **** 
 237:src/Riscv.cpp ****     }
 238:src/Riscv.cpp **** }
 239:src/Riscv.cpp **** 
 240:src/Riscv.cpp **** void Riscv::w_a0_sscratch()
 241:src/Riscv.cpp **** {
 492              		.loc 1 241 1
 493              		.cfi_startproc
 494 0268 130101FF 		addi	sp,sp,-16
 495              		.cfi_def_cfa_offset 16
 496 026c 23348100 		sd	s0,8(sp)
 497              		.cfi_offset 8, -8
 498 0270 13040101 		addi	s0,sp,16
 499              		.cfi_def_cfa 8, 0
 242:src/Riscv.cpp ****     uint64 a1Temp;
 500              		.loc 1 242 5
 243:src/Riscv.cpp ****     __asm__ volatile("mv %0, a1":"=r"(a1Temp));
 501              		.loc 1 243 5
 502              		.loc 1 243 47 is_stmt 0
 503              	#APP
 504              	# 243 "src/Riscv.cpp" 1
 244              	    __asm__ volatile("mv a1, %0"::"r"(PCB::running->sscratch));
 505              		mv a5, a1
 506              	# 0 "" 2
 507              	.LVL30:
 508              		.loc 1 244 5 is_stmt 1
 509              		.loc 1 244 53 is_stmt 0
 510              	#NO_APP
 511 0278 17070000 		la	a4,_ZN3PCB7runningE
 511      03370700 
 512 0280 03370700 		ld	a4,0(a4)
 513 0284 03370701 		ld	a4,16(a4)
 514              		.loc 1 244 63
 515              	#APP
GAS LISTING /tmp/ccIlKMw3.s 			page 19


 516              	# 244 "src/Riscv.cpp" 1
 245              	    __asm__ volatile("sd a0, 80(a1)");
 517              		mv a1, a4
 518              	# 0 "" 2
 519              		.loc 1 245 5 is_stmt 1
 520              		.loc 1 245 38 is_stmt 0
 521              	# 245 "src/Riscv.cpp" 1
 246              	    __asm__ volatile("mv a1,%0"::"r"(a1Temp));
 522              		sd a0, 80(a1)
 523              	# 0 "" 2
 524              		.loc 1 246 5 is_stmt 1
 525              		.loc 1 246 46 is_stmt 0
 526              	# 246 "src/Riscv.cpp" 1
 247              	}
 527              		mv a1,a5
 528              	# 0 "" 2
 529              		.loc 1 247 1
 530              	#NO_APP
 531 0294 03348100 		ld	s0,8(sp)
 532              		.cfi_restore 8
 533              		.cfi_def_cfa 2, 16
 534 0298 13010101 		addi	sp,sp,16
 535              		.cfi_def_cfa_offset 0
 536 029c 67800000 		jr	ra
 537              		.cfi_endproc
 538              	.LFE38:
 540              		.align	2
 541              		.globl	_ZN5Riscv14changePrivModeEv
 543              	_ZN5Riscv14changePrivModeEv:
 544              	.LFB39:
 248:src/Riscv.cpp **** 
 249:src/Riscv.cpp **** void Riscv::changePrivMode()
 250:src/Riscv.cpp **** {
 545              		.loc 1 250 1 is_stmt 1
 546              		.cfi_startproc
 547 02a0 130101FF 		addi	sp,sp,-16
 548              		.cfi_def_cfa_offset 16
 549 02a4 23348100 		sd	s0,8(sp)
 550              		.cfi_offset 8, -8
 551 02a8 13040101 		addi	s0,sp,16
 552              		.cfi_def_cfa 8, 0
 251:src/Riscv.cpp ****     if(PCB::running->systemThread)
 553              		.loc 1 251 5
 554              		.loc 1 251 22 is_stmt 0
 555 02ac 97070000 		la	a5,_ZN3PCB7runningE
 555      83B70700 
 556 02b4 83B70700 		ld	a5,0(a5)
 557 02b8 83C70700 		lbu	a5,0(a5)
 558              		.loc 1 251 5
 559 02bc 638C0700 		beqz	a5,.L37
 252:src/Riscv.cpp ****         Riscv::ms_sstatus(Riscv::SSTATUS_SPP);
 560              		.loc 1 252 9 is_stmt 1
 561              	.LVL31:
 562              	.LBB47:
 563              	.LBB48:
 195:src/../h/Riscv.hpp **** }
 564              		.loc 2 195 5
GAS LISTING /tmp/ccIlKMw3.s 			page 20


 195:src/../h/Riscv.hpp **** }
 565              		.loc 2 195 54 is_stmt 0
 566 02c0 93070010 		li	a5,256
 567              	#APP
 568              	# 195 "src/../h/Riscv.hpp" 1
 569              		csrs sstatus, a5
 570              	# 0 "" 2
 571              	.LVL32:
 572              	#NO_APP
 573              	.L36:
 574              	.LBE48:
 575              	.LBE47:
 253:src/Riscv.cpp ****     else
 254:src/Riscv.cpp ****         Riscv::mc_sstatus(Riscv::SSTATUS_SPP);
 255:src/Riscv.cpp **** }
 576              		.loc 1 255 1
 577 02c8 03348100 		ld	s0,8(sp)
 578              		.cfi_remember_state
 579              		.cfi_restore 8
 580              		.cfi_def_cfa 2, 16
 581 02cc 13010101 		addi	sp,sp,16
 582              		.cfi_def_cfa_offset 0
 583 02d0 67800000 		jr	ra
 584              	.L37:
 585              		.cfi_restore_state
 254:src/Riscv.cpp **** }
 586              		.loc 1 254 9 is_stmt 1
 587              	.LVL33:
 588              	.LBB49:
 589              	.LBB50:
 199:src/../h/Riscv.hpp **** }
 590              		.loc 2 199 5
 199:src/../h/Riscv.hpp **** }
 591              		.loc 2 199 54 is_stmt 0
 592 02d4 93070010 		li	a5,256
 593              	#APP
 594              	# 199 "src/../h/Riscv.hpp" 1
 595              		csrc sstatus, a5
 596              	# 0 "" 2
 597              	.LVL34:
 598              	#NO_APP
 599              	.LBE50:
 600              	.LBE49:
 601              		.loc 1 255 1
 602 02dc 6FF0DFFE 		j	.L36
 603              		.cfi_endproc
 604              	.LFE39:
 606              		.align	2
 607              		.globl	_ZN5Riscv20handleSupervisorTrapEv
 609              	_ZN5Riscv20handleSupervisorTrapEv:
 610              	.LFB32:
  46:src/Riscv.cpp ****     __asm__ volatile("mv %0, a4" : "=r"(PCB::savedRegA4));
 611              		.loc 1 46 1 is_stmt 1
 612              		.cfi_startproc
 613 02e0 130101F9 		addi	sp,sp,-112
 614              		.cfi_def_cfa_offset 112
 615 02e4 23341106 		sd	ra,104(sp)
GAS LISTING /tmp/ccIlKMw3.s 			page 21


 616 02e8 23308106 		sd	s0,96(sp)
 617 02ec 233C9104 		sd	s1,88(sp)
 618              		.cfi_offset 1, -8
 619              		.cfi_offset 8, -16
 620              		.cfi_offset 9, -24
 621 02f0 13040107 		addi	s0,sp,112
 622              		.cfi_def_cfa 8, 0
  47:src/Riscv.cpp ****     __asm__ volatile("csrr %0, sscratch":"=r"(PCB::running->sscratch));
 623              		.loc 1 47 5
  47:src/Riscv.cpp ****     __asm__ volatile("csrr %0, sscratch":"=r"(PCB::running->sscratch));
 624              		.loc 1 47 58 is_stmt 0
 625              	#APP
 626              	# 47 "src/Riscv.cpp" 1
 627              		mv a4, a4
 628              	# 0 "" 2
 629              	#NO_APP
 630 02f8 97070000 		la	a5,_ZN3PCB10savedRegA4E
 630      83B70700 
 631 0300 23B0E700 		sd	a4,0(a5)
  48:src/Riscv.cpp **** 
 632              		.loc 1 48 5 is_stmt 1
  48:src/Riscv.cpp **** 
 633              		.loc 1 48 61 is_stmt 0
 634 0304 97070000 		la	a5,_ZN3PCB7runningE
 634      83B70700 
 635 030c 83B70700 		ld	a5,0(a5)
  48:src/Riscv.cpp **** 
 636              		.loc 1 48 71
 637              	#APP
 638              	# 48 "src/Riscv.cpp" 1
 639              		csrr a4, sscratch
 640              	# 0 "" 2
 641              	#NO_APP
 642 0314 23B8E700 		sd	a4,16(a5)
  50:src/Riscv.cpp **** 
 643              		.loc 1 50 5 is_stmt 1
 644              	.LBB51:
 645              	.LBB52:
 120:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, scause" : "=r"(scause));
 646              		.loc 2 120 5
 121:src/../h/Riscv.hpp ****     return scause;
 647              		.loc 2 121 5
 121:src/../h/Riscv.hpp ****     return scause;
 648              		.loc 2 121 55 is_stmt 0
 649              	#APP
 650              	# 121 "src/../h/Riscv.hpp" 1
 651              		csrr a5, scause
 652              	# 0 "" 2
 653              	#NO_APP
 654 031c 233CF4FA 		sd	a5,-72(s0)
 122:src/../h/Riscv.hpp **** }
 655              		.loc 2 122 5 is_stmt 1
 122:src/../h/Riscv.hpp **** }
 656              		.loc 2 122 12 is_stmt 0
 657 0320 833784FB 		ld	a5,-72(s0)
 658              	.LVL35:
 659              	.LBE52:
GAS LISTING /tmp/ccIlKMw3.s 			page 22


 660              	.LBE51:
  52:src/Riscv.cpp ****     {
 661              		.loc 1 52 5 is_stmt 1
 662              	.LBB53:
 663 0324 13079000 		li	a4,9
 664 0328 636EF702 		bgtu	a5,a4,.L41
 665 032c 13078000 		li	a4,8
 666 0330 63F4E718 		bgeu	a5,a4,.L42
 667 0334 13075000 		li	a4,5
 668 0338 638AE716 		beq	a5,a4,.L43
 669 033c 13077000 		li	a4,7
 670 0340 6398E700 		bne	a5,a4,.L69
 671              	.LBB54:
 115:src/Riscv.cpp ****         {
 672              		.loc 1 115 9
 116:src/Riscv.cpp ****             //trapPrintString("write interrupt\n");
 673              		.loc 1 116 9
 118:src/Riscv.cpp ****             break;
 674              		.loc 1 118 13
 118:src/Riscv.cpp ****             break;
 675              		.loc 1 118 35 is_stmt 0
 676 0344 97000000 		call	_ZN3PCB17threadExitHandlerEv@plt
 676      E7800000 
 677              	.LVL36:
 119:src/Riscv.cpp ****         }
 678              		.loc 1 119 13 is_stmt 1
 679 034c 6F000012 		j	.L40
 680              	.LVL37:
 681              	.L69:
 682              	.LBE54:
  52:src/Riscv.cpp ****     {
 683              		.loc 1 52 5 is_stmt 0
 684 0350 13072000 		li	a4,2
 685 0354 639CE710 		bne	a5,a4,.L40
 686              	.LBB85:
 103:src/Riscv.cpp ****         {
 687              		.loc 1 103 9 is_stmt 1
 104:src/Riscv.cpp ****             //trapPrintString("operation interrupt\n");
 688              		.loc 1 104 9
 106:src/Riscv.cpp ****             break;
 689              		.loc 1 106 13
 106:src/Riscv.cpp ****             break;
 690              		.loc 1 106 35 is_stmt 0
 691 0358 97000000 		call	_ZN3PCB17threadExitHandlerEv@plt
 691      E7800000 
 692              	.LVL38:
 107:src/Riscv.cpp ****         }
 693              		.loc 1 107 13 is_stmt 1
 694 0360 6F00C010 		j	.L40
 695              	.LVL39:
 696              	.L41:
 697              	.LBE85:
  52:src/Riscv.cpp ****     {
 698              		.loc 1 52 5 is_stmt 0
 699 0364 1307F0FF 		li	a4,-1
 700 0368 1317F703 		slli	a4,a4,63
 701 036c 13071700 		addi	a4,a4,1
GAS LISTING /tmp/ccIlKMw3.s 			page 23


 702 0370 638AE706 		beq	a5,a4,.L47
 703 0374 1307F0FF 		li	a4,-1
 704 0378 1317F703 		slli	a4,a4,63
 705 037c 13079700 		addi	a4,a4,9
 706 0380 6396E70E 		bne	a5,a4,.L40
 707              	.LBB86:
  77:src/Riscv.cpp ****         {
 708              		.loc 1 77 9 is_stmt 1
  78:src/Riscv.cpp ****             uint64 x = CONSOLE_STATUS;
 709              		.loc 1 78 9
 710              	.LBB55:
  79:src/Riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(x));
 711              		.loc 1 79 13
  79:src/Riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(x));
 712              		.loc 1 79 20 is_stmt 0
 713 0384 97070000 		la	a5,CONSOLE_STATUS
 713      83B70700 
 714              	.LVL40:
 715 038c 83B70700 		ld	a5,0(a5)
 716              	.LVL41:
  80:src/Riscv.cpp ****             __asm__ volatile("lb a1, 0(a0)");
 717              		.loc 1 80 13 is_stmt 1
  80:src/Riscv.cpp ****             __asm__ volatile("lb a1, 0(a0)");
 718              		.loc 1 80 50 is_stmt 0
 719              	#APP
 720              	# 80 "src/Riscv.cpp" 1
  81:src/Riscv.cpp ****             uint64 operation;
 721              		mv a0, a5
 722              	# 0 "" 2
 723              		.loc 1 81 13 is_stmt 1
  81:src/Riscv.cpp ****             uint64 operation;
 724              		.loc 1 81 45 is_stmt 0
 725              	# 81 "src/Riscv.cpp" 1
  82:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" :  "=r"(operation));
 726              		lb a1, 0(a0)
 727              	# 0 "" 2
 728              		.loc 1 82 13 is_stmt 1
  83:src/Riscv.cpp ****             if(operation & KConsole::STATUS_READ_MASK)
 729              		.loc 1 83 13
  83:src/Riscv.cpp ****             if(operation & KConsole::STATUS_READ_MASK)
 730              		.loc 1 83 61 is_stmt 0
 731              	# 83 "src/Riscv.cpp" 1
 732              		mv a5, a1
 733              	# 0 "" 2
 734              	.LVL42:
  84:src/Riscv.cpp ****             {
 735              		.loc 1 84 13 is_stmt 1
 736              	#NO_APP
 737              	.LBB56:
  84:src/Riscv.cpp ****             {
 738              		.loc 1 84 26 is_stmt 0
 739 039c 93F71700 		andi	a5,a5,1
 740              	.LVL43:
  84:src/Riscv.cpp ****             {
 741              		.loc 1 84 13
 742 03a0 63880702 		beqz	a5,.L50
 743              	.LBB57:
GAS LISTING /tmp/ccIlKMw3.s 			page 24


  86:src/Riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(x));
 744              		.loc 1 86 17 is_stmt 1
  86:src/Riscv.cpp ****                 __asm__ volatile("mv a0, %0"::"r"(x));
 745              		.loc 1 86 19 is_stmt 0
 746 03a4 97070000 		la	a5,CONSOLE_TX_DATA
 746      83B70700 
 747 03ac 83B70700 		ld	a5,0(a5)
 748              	.LVL44:
  87:src/Riscv.cpp ****                 __asm__ volatile("lb a1,0(a0)");
 749              		.loc 1 87 17 is_stmt 1
  87:src/Riscv.cpp ****                 __asm__ volatile("lb a1,0(a0)");
 750              		.loc 1 87 54 is_stmt 0
 751              	#APP
 752              	# 87 "src/Riscv.cpp" 1
  88:src/Riscv.cpp ****                 char c;
 753              		mv a0, a5
 754              	# 0 "" 2
 755              		.loc 1 88 17 is_stmt 1
  88:src/Riscv.cpp ****                 char c;
 756              		.loc 1 88 48 is_stmt 0
 757              	# 88 "src/Riscv.cpp" 1
  89:src/Riscv.cpp ****                 __asm__ volatile("mv %0, a1" :  "=r"(c));
 758              		lb a1,0(a0)
 759              	# 0 "" 2
 760              		.loc 1 89 17 is_stmt 1
  90:src/Riscv.cpp ****                 if(KConsole::pendingGetc > 0)
 761              		.loc 1 90 17
  90:src/Riscv.cpp ****                 if(KConsole::pendingGetc > 0)
 762              		.loc 1 90 57 is_stmt 0
 763              	# 90 "src/Riscv.cpp" 1
 764              		mv a0, a1
 765              	# 0 "" 2
 766              	#NO_APP
 767 03bc 1375F50F 		andi	a0,a0,0xff
 768              	.LVL45:
  91:src/Riscv.cpp ****                 {
 769              		.loc 1 91 17 is_stmt 1
  91:src/Riscv.cpp ****                 {
 770              		.loc 1 91 42 is_stmt 0
 771 03c0 97070000 		la	a5,_ZN8KConsole11pendingGetcE
 771      83B70700 
 772              	.LVL46:
 773 03c8 83B70700 		ld	a5,0(a5)
  91:src/Riscv.cpp ****                 {
 774              		.loc 1 91 17
 775 03cc 6392070C 		bnez	a5,.L70
 776              	.LVL47:
 777              	.L50:
 778              	.LBE57:
 779              	.LBE56:
  99:src/Riscv.cpp **** 
 780              		.loc 1 99 13 is_stmt 1
  99:src/Riscv.cpp **** 
 781              		.loc 1 99 26 is_stmt 0
 782 03d0 97000000 		call	plic_claim@plt
 782      E7800000 
 783              	.LVL48:
GAS LISTING /tmp/ccIlKMw3.s 			page 25


 784 03d8 97000000 		call	plic_complete@plt
 784      E7800000 
 785              	.LVL49:
 101:src/Riscv.cpp ****         }
 786              		.loc 1 101 13 is_stmt 1
 787 03e0 6F00C008 		j	.L40
 788              	.LVL50:
 789              	.L47:
 790              	.LBE55:
  54:src/Riscv.cpp ****         {
 791              		.loc 1 54 9
  55:src/Riscv.cpp ****             uint64 volatile sepc = Riscv::r_sepc();
 792              		.loc 1 55 9
 793              	.LBB60:
  56:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 794              		.loc 1 56 13
 795              	.LBB61:
 796              	.LBB62:
 130:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, sepc" : "=r"(sepc));
 797              		.loc 2 130 5
 131:src/../h/Riscv.hpp ****     return sepc;
 798              		.loc 2 131 5
 131:src/../h/Riscv.hpp ****     return sepc;
 799              		.loc 2 131 51 is_stmt 0
 800              	#APP
 801              	# 131 "src/../h/Riscv.hpp" 1
 802              		csrr a5, sepc
 803              	# 0 "" 2
 804              	.LVL51:
 805              	#NO_APP
 806 03e8 2334F4FC 		sd	a5,-56(s0)
 132:src/../h/Riscv.hpp **** }
 807              		.loc 2 132 5 is_stmt 1
 132:src/../h/Riscv.hpp **** }
 808              		.loc 2 132 12 is_stmt 0
 809 03ec 833784FC 		ld	a5,-56(s0)
 810              	.LBE62:
 811              	.LBE61:
  56:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 812              		.loc 1 56 50
 813 03f0 233CF4F8 		sd	a5,-104(s0)
  57:src/Riscv.cpp ****             mc_sip(Riscv::SIP_SSIP);
 814              		.loc 1 57 13 is_stmt 1
 815              	.LBB63:
 816              	.LBB64:
 201:src/../h/Riscv.hpp **** 
 202:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus() {
 203:src/../h/Riscv.hpp ****     uint64 volatile sstatus;
 817              		.loc 2 203 5
 204:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, sstatus" : "=r"(sstatus));
 818              		.loc 2 204 5
 819              		.loc 2 204 57 is_stmt 0
 820              	#APP
 821              	# 204 "src/../h/Riscv.hpp" 1
 205              	    return sstatus;
 822              		csrr a5, sstatus
 823              	# 0 "" 2
GAS LISTING /tmp/ccIlKMw3.s 			page 26


 824              	#NO_APP
 825 03f8 2330F4FC 		sd	a5,-64(s0)
 826              		.loc 2 205 5 is_stmt 1
 827              		.loc 2 205 12 is_stmt 0
 828 03fc 833704FC 		ld	a5,-64(s0)
 829              	.LBE64:
 830              	.LBE63:
  57:src/Riscv.cpp ****             mc_sip(Riscv::SIP_SSIP);
 831              		.loc 1 57 56
 832 0400 2330F4FA 		sd	a5,-96(s0)
  58:src/Riscv.cpp ****             //trapPrintString("timerInterrupt\n");
 833              		.loc 1 58 13 is_stmt 1
 834              	.LVL52:
 835              	.LBB65:
 836              	.LBB66:
 169:src/../h/Riscv.hpp **** }
 837              		.loc 2 169 5
 169:src/../h/Riscv.hpp **** }
 838              		.loc 2 169 50 is_stmt 0
 839 0404 93072000 		li	a5,2
 840              	#APP
 841              	# 169 "src/../h/Riscv.hpp" 1
 842              		csrc sip, a5
 843              	# 0 "" 2
 844              	.LVL53:
 845              	#NO_APP
 846              	.LBE66:
 847              	.LBE65:
  61:src/Riscv.cpp ****             //trapPrintInt(totalTime);
 848              		.loc 1 61 13 is_stmt 1
  61:src/Riscv.cpp ****             //trapPrintInt(totalTime);
 849              		.loc 1 61 22 is_stmt 0
 850 040c 17070000 		lla	a4,.LANCHOR0
 850      13070700 
 851 0414 83378700 		ld	a5,8(a4)
 852 0418 93871700 		addi	a5,a5,1
 853 041c 2334F700 		sd	a5,8(a4)
  64:src/Riscv.cpp ****             SleepPCBList::tryToWakePCBs();
 854              		.loc 1 64 13 is_stmt 1
  64:src/Riscv.cpp ****             SleepPCBList::tryToWakePCBs();
 855              		.loc 1 64 34 is_stmt 0
 856 0420 97040000 		la	s1,_ZN3PCB16timeSliceCounterE
 856      83B40400 
 857 0428 83B70400 		ld	a5,0(s1)
 858 042c 93871700 		addi	a5,a5,1
 859 0430 23B0F400 		sd	a5,0(s1)
  65:src/Riscv.cpp ****             if (PCB::timeSliceCounter >= PCB::running->getTimeSlice())
 860              		.loc 1 65 13 is_stmt 1
  65:src/Riscv.cpp ****             if (PCB::timeSliceCounter >= PCB::running->getTimeSlice())
 861              		.loc 1 65 40 is_stmt 0
 862 0434 97000000 		call	_ZN12SleepPCBList13tryToWakePCBsEv@plt
 862      E7800000 
 863              	.LVL54:
  66:src/Riscv.cpp ****             {
 864              		.loc 1 66 13 is_stmt 1
  66:src/Riscv.cpp ****             {
 865              		.loc 1 66 68 is_stmt 0
GAS LISTING /tmp/ccIlKMw3.s 			page 27


 866 043c 97070000 		la	a5,_ZN3PCB7runningE
 866      83B70700 
 867 0444 83B70700 		ld	a5,0(a5)
 868              	.LVL55:
 869              	.LBB67:
 870              	.LBB68:
 871              		.file 3 "src/../h/PCB.hpp"
   1:src/../h/PCB.hpp **** //
   2:src/../h/PCB.hpp **** // Created by os on 4/27/22.
   3:src/../h/PCB.hpp **** //
   4:src/../h/PCB.hpp **** 
   5:src/../h/PCB.hpp **** #ifndef PROJECT_BASE_V1_0_PCB_HPP
   6:src/../h/PCB.hpp **** #define PROJECT_BASE_V1_0_PCB_HPP
   7:src/../h/PCB.hpp **** 
   8:src/../h/PCB.hpp **** #include "../lib/hw.h"
   9:src/../h/PCB.hpp **** 
  10:src/../h/PCB.hpp **** class PCB
  11:src/../h/PCB.hpp **** {
  12:src/../h/PCB.hpp **** private:
  13:src/../h/PCB.hpp ****     static uint64 savedRegA4;
  14:src/../h/PCB.hpp **** 
  15:src/../h/PCB.hpp ****     using Body = void (*)(void*);
  16:src/../h/PCB.hpp **** 
  17:src/../h/PCB.hpp ****     PCB(Body body,  void* args, void* stack_space, uint64 timeSlice);
  18:src/../h/PCB.hpp ****     ~PCB();
  19:src/../h/PCB.hpp **** 
  20:src/../h/PCB.hpp ****     void start();
  21:src/../h/PCB.hpp ****     static void dispatch();
  22:src/../h/PCB.hpp ****     static void sleep(time_t);
  23:src/../h/PCB.hpp **** 
  24:src/../h/PCB.hpp ****     static PCB* running;
  25:src/../h/PCB.hpp **** 
  26:src/../h/PCB.hpp ****     static uint64 timeSliceCounter;
  27:src/../h/PCB.hpp ****     uint64 getTimeSlice() { return timeSlice;}
 872              		.loc 3 27 29 is_stmt 1
 873              		.loc 3 27 36 is_stmt 0
 874 0448 83B78701 		ld	a5,24(a5)
 875              	.LVL56:
 876              	.LBE68:
 877              	.LBE67:
  66:src/Riscv.cpp ****             {
 878              		.loc 1 66 39
 879 044c 03B70400 		ld	a4,0(s1)
  66:src/Riscv.cpp ****             {
 880              		.loc 1 66 13
 881 0450 6378F702 		bgeu	a4,a5,.L71
 882              	.L49:
  72:src/Riscv.cpp ****             Riscv::w_sepc(sepc);
 883              		.loc 1 72 13 is_stmt 1
  72:src/Riscv.cpp ****             Riscv::w_sepc(sepc);
 884              		.loc 1 72 29 is_stmt 0
 885 0454 833704FA 		ld	a5,-96(s0)
 886              	.LVL57:
 887              	.LBB69:
 888              	.LBB70:
 206:src/../h/Riscv.hpp **** }
 207:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccIlKMw3.s 			page 28


 208:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus) {
 209:src/../h/Riscv.hpp ****     __asm__ volatile("csrw sstatus, %0" : :"r"(sstatus));
 889              		.loc 2 209 5 is_stmt 1
 890              		.loc 2 209 57 is_stmt 0
 891              	#APP
 892              	# 209 "src/../h/Riscv.hpp" 1
 210              	}
 893              		csrw sstatus, a5
 894              	# 0 "" 2
 895              	.LVL58:
 896              	#NO_APP
 897              	.LBE70:
 898              	.LBE69:
  73:src/Riscv.cpp ****             changePrivMode();
 899              		.loc 1 73 13 is_stmt 1
  73:src/Riscv.cpp ****             changePrivMode();
 900              		.loc 1 73 26 is_stmt 0
 901 045c 833784F9 		ld	a5,-104(s0)
 902              	.LVL59:
 903              	.LBB71:
 904              	.LBB72:
 136:src/../h/Riscv.hpp **** }
 905              		.loc 2 136 5 is_stmt 1
 136:src/../h/Riscv.hpp **** }
 906              		.loc 2 136 51 is_stmt 0
 907              	#APP
 908              	# 136 "src/../h/Riscv.hpp" 1
 909              		csrw sepc, a5
 910              	# 0 "" 2
 911              	.LVL60:
 912              	#NO_APP
 913              	.LBE72:
 914              	.LBE71:
  74:src/Riscv.cpp ****             break;
 915              		.loc 1 74 13 is_stmt 1
  74:src/Riscv.cpp ****             break;
 916              		.loc 1 74 27 is_stmt 0
 917 0464 97000000 		call	_ZN5Riscv14changePrivModeEv
 917      E7800000 
 918              	.LVL61:
  75:src/Riscv.cpp ****         }
 919              		.loc 1 75 13 is_stmt 1
 920              	.L40:
 921              	.LBE60:
 922              	.LBE86:
 923              	.LBE53:
 185:src/Riscv.cpp **** 
 924              		.loc 1 185 1 is_stmt 0
 925 046c 83308106 		ld	ra,104(sp)
 926              		.cfi_remember_state
 927              		.cfi_restore 1
 928 0470 03340106 		ld	s0,96(sp)
 929              		.cfi_restore 8
 930              		.cfi_def_cfa 2, 112
 931 0474 83348105 		ld	s1,88(sp)
 932              		.cfi_restore 9
 933 0478 13010107 		addi	sp,sp,112
GAS LISTING /tmp/ccIlKMw3.s 			page 29


 934              		.cfi_def_cfa_offset 0
 935 047c 67800000 		jr	ra
 936              	.L71:
 937              		.cfi_restore_state
 938              	.LBB89:
 939              	.LBB87:
 940              	.LBB73:
  68:src/Riscv.cpp ****                 PCB::dispatch();
 941              		.loc 1 68 17 is_stmt 1
  68:src/Riscv.cpp ****                 PCB::dispatch();
 942              		.loc 1 68 39 is_stmt 0
 943 0480 23B00400 		sd	zero,0(s1)
  69:src/Riscv.cpp ****             }
 944              		.loc 1 69 17 is_stmt 1
  69:src/Riscv.cpp ****             }
 945              		.loc 1 69 30 is_stmt 0
 946 0484 97000000 		call	_ZN3PCB8dispatchEv@plt
 946      E7800000 
 947              	.LVL62:
 948 048c 6FF09FFC 		j	.L49
 949              	.LVL63:
 950              	.L70:
 951              	.LBE73:
 952              	.LBB74:
 953              	.LBB59:
 954              	.LBB58:
  93:src/Riscv.cpp ****                     KConsole::putCharacterInput(c);
 955              		.loc 1 93 21 is_stmt 1
  93:src/Riscv.cpp ****                     KConsole::putCharacterInput(c);
 956              		.loc 1 93 42 is_stmt 0
 957 0490 9387F7FF 		addi	a5,a5,-1
 958 0494 17070000 		la	a4,_ZN8KConsole11pendingGetcE
 958      03370700 
 959 049c 2330F700 		sd	a5,0(a4)
  94:src/Riscv.cpp ****                     //KConsole::putCharacterOutput(c);
 960              		.loc 1 94 21 is_stmt 1
  94:src/Riscv.cpp ****                     //KConsole::putCharacterOutput(c);
 961              		.loc 1 94 48 is_stmt 0
 962 04a0 97000000 		call	_ZN8KConsole17putCharacterInputEc@plt
 962      E7800000 
 963              	.LVL64:
 964 04a8 6FF09FF2 		j	.L50
 965              	.LVL65:
 966              	.L43:
 967              	.LBE58:
 968              	.LBE59:
 969              	.LBE74:
 109:src/Riscv.cpp ****         {
 970              		.loc 1 109 9 is_stmt 1
 110:src/Riscv.cpp ****             //trapPrintString("read interrupt\n");
 971              		.loc 1 110 9
 112:src/Riscv.cpp ****             break;
 972              		.loc 1 112 13
 112:src/Riscv.cpp ****             break;
 973              		.loc 1 112 35 is_stmt 0
 974 04ac 97000000 		call	_ZN3PCB17threadExitHandlerEv@plt
 974      E7800000 
GAS LISTING /tmp/ccIlKMw3.s 			page 30


 975              	.LVL66:
 113:src/Riscv.cpp ****         }
 976              		.loc 1 113 13 is_stmt 1
 977 04b4 6FF09FFB 		j	.L40
 978              	.LVL67:
 979              	.L42:
 121:src/Riscv.cpp ****         case ecallUserInterrupt:
 980              		.loc 1 121 9
 122:src/Riscv.cpp ****         {
 981              		.loc 1 122 9
 123:src/Riscv.cpp ****             uint64 operation;
 982              		.loc 1 123 9
 983              	.LBB75:
 124:src/Riscv.cpp ****             __asm__ volatile("mv %0, a0" :  "=r"(operation));
 984              		.loc 1 124 13
 125:src/Riscv.cpp **** 
 985              		.loc 1 125 13
 125:src/Riscv.cpp **** 
 986              		.loc 1 125 61 is_stmt 0
 987              	#APP
 988              	# 125 "src/Riscv.cpp" 1
 989              		mv a5, a0
 990              	# 0 "" 2
 991              	.LVL68:
 127:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 992              		.loc 1 127 13 is_stmt 1
 993              	#NO_APP
 994              	.LBB76:
 995              	.LBB77:
 130:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, sepc" : "=r"(sepc));
 996              		.loc 2 130 5
 131:src/../h/Riscv.hpp ****     return sepc;
 997              		.loc 2 131 5
 131:src/../h/Riscv.hpp ****     return sepc;
 998              		.loc 2 131 51 is_stmt 0
 999              	#APP
 1000              	# 131 "src/../h/Riscv.hpp" 1
 1001              		csrr a4, sepc
 1002              	# 0 "" 2
 1003              	#NO_APP
 1004 04c0 233CE4FC 		sd	a4,-40(s0)
 132:src/../h/Riscv.hpp **** }
 1005              		.loc 2 132 5 is_stmt 1
 132:src/../h/Riscv.hpp **** }
 1006              		.loc 2 132 12 is_stmt 0
 1007 04c4 033784FD 		ld	a4,-40(s0)
 1008              	.LBE77:
 1009              	.LBE76:
 127:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 1010              		.loc 1 127 52
 1011 04c8 13074700 		addi	a4,a4,4
 127:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 1012              		.loc 1 127 54
 1013 04cc 2334E4FA 		sd	a4,-88(s0)
 128:src/Riscv.cpp **** 
 1014              		.loc 1 128 13 is_stmt 1
 1015              	.LBB78:
GAS LISTING /tmp/ccIlKMw3.s 			page 31


 1016              	.LBB79:
 203:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %0, sstatus" : "=r"(sstatus));
 1017              		.loc 2 203 5
 204:src/../h/Riscv.hpp ****     return sstatus;
 1018              		.loc 2 204 5
 204:src/../h/Riscv.hpp ****     return sstatus;
 1019              		.loc 2 204 57 is_stmt 0
 1020              	#APP
 1021              	# 204 "src/../h/Riscv.hpp" 1
 1022              		csrr a4, sstatus
 1023              	# 0 "" 2
 1024              	#NO_APP
 1025 04d4 2338E4FC 		sd	a4,-48(s0)
 205:src/../h/Riscv.hpp **** }
 1026              		.loc 2 205 5 is_stmt 1
 205:src/../h/Riscv.hpp **** }
 1027              		.loc 2 205 12 is_stmt 0
 1028 04d8 033704FD 		ld	a4,-48(s0)
 1029              	.LBE79:
 1030              	.LBE78:
 128:src/Riscv.cpp **** 
 1031              		.loc 1 128 56
 1032 04dc 2338E4FA 		sd	a4,-80(s0)
 130:src/Riscv.cpp ****             {
 1033              		.loc 1 130 13 is_stmt 1
 1034 04e0 13073004 		li	a4,67
 1035 04e4 6364F702 		bgtu	a5,a4,.L51
 1036 04e8 93972700 		slli	a5,a5,2
 1037              	.LVL69:
 1038 04ec 17070000 		lla	a4,.L53
 1038      13070700 
 1039 04f4 B387E700 		add	a5,a5,a4
 1040 04f8 83A70700 		lw	a5,0(a5)
 1041 04fc B387E700 		add	a5,a5,a4
 1042 0500 67800700 		jr	a5
 1043              		.section	.rodata
 1044              		.align	2
 1045              		.align	2
 1046              	.L53:
 1047 0000 00000000 		.word	.L51-.L53
 1048 0004 00000000 		.word	.L67-.L53
 1049 0008 00000000 		.word	.L66-.L53
 1050 000c 00000000 		.word	.L51-.L53
 1051 0010 00000000 		.word	.L51-.L53
 1052 0014 00000000 		.word	.L51-.L53
 1053 0018 00000000 		.word	.L51-.L53
 1054 001c 00000000 		.word	.L51-.L53
 1055 0020 00000000 		.word	.L51-.L53
 1056 0024 00000000 		.word	.L51-.L53
 1057 0028 00000000 		.word	.L51-.L53
 1058 002c 00000000 		.word	.L51-.L53
 1059 0030 00000000 		.word	.L51-.L53
 1060 0034 00000000 		.word	.L51-.L53
 1061 0038 00000000 		.word	.L51-.L53
 1062 003c 00000000 		.word	.L51-.L53
 1063 0040 00000000 		.word	.L51-.L53
 1064 0044 00000000 		.word	.L65-.L53
GAS LISTING /tmp/ccIlKMw3.s 			page 32


 1065 0048 00000000 		.word	.L64-.L53
 1066 004c 00000000 		.word	.L63-.L53
 1067 0050 00000000 		.word	.L62-.L53
 1068 0054 00000000 		.word	.L61-.L53
 1069 0058 00000000 		.word	.L51-.L53
 1070 005c 00000000 		.word	.L51-.L53
 1071 0060 00000000 		.word	.L51-.L53
 1072 0064 00000000 		.word	.L51-.L53
 1073 0068 00000000 		.word	.L51-.L53
 1074 006c 00000000 		.word	.L51-.L53
 1075 0070 00000000 		.word	.L51-.L53
 1076 0074 00000000 		.word	.L51-.L53
 1077 0078 00000000 		.word	.L51-.L53
 1078 007c 00000000 		.word	.L51-.L53
 1079 0080 00000000 		.word	.L51-.L53
 1080 0084 00000000 		.word	.L60-.L53
 1081 0088 00000000 		.word	.L59-.L53
 1082 008c 00000000 		.word	.L58-.L53
 1083 0090 00000000 		.word	.L57-.L53
 1084 0094 00000000 		.word	.L51-.L53
 1085 0098 00000000 		.word	.L51-.L53
 1086 009c 00000000 		.word	.L51-.L53
 1087 00a0 00000000 		.word	.L51-.L53
 1088 00a4 00000000 		.word	.L51-.L53
 1089 00a8 00000000 		.word	.L51-.L53
 1090 00ac 00000000 		.word	.L51-.L53
 1091 00b0 00000000 		.word	.L51-.L53
 1092 00b4 00000000 		.word	.L51-.L53
 1093 00b8 00000000 		.word	.L51-.L53
 1094 00bc 00000000 		.word	.L51-.L53
 1095 00c0 00000000 		.word	.L51-.L53
 1096 00c4 00000000 		.word	.L56-.L53
 1097 00c8 00000000 		.word	.L51-.L53
 1098 00cc 00000000 		.word	.L51-.L53
 1099 00d0 00000000 		.word	.L51-.L53
 1100 00d4 00000000 		.word	.L51-.L53
 1101 00d8 00000000 		.word	.L51-.L53
 1102 00dc 00000000 		.word	.L51-.L53
 1103 00e0 00000000 		.word	.L51-.L53
 1104 00e4 00000000 		.word	.L51-.L53
 1105 00e8 00000000 		.word	.L51-.L53
 1106 00ec 00000000 		.word	.L51-.L53
 1107 00f0 00000000 		.word	.L51-.L53
 1108 00f4 00000000 		.word	.L51-.L53
 1109 00f8 00000000 		.word	.L51-.L53
 1110 00fc 00000000 		.word	.L51-.L53
 1111 0100 00000000 		.word	.L51-.L53
 1112 0104 00000000 		.word	.L55-.L53
 1113 0108 00000000 		.word	.L54-.L53
 1114 010c 00000000 		.word	.L52-.L53
 1115              		.text
 1116              	.L67:
 132:src/Riscv.cpp ****                     MemoryAllocator::memAllocHandler();
 1117              		.loc 1 132 17
 133:src/Riscv.cpp ****                     break;
 1118              		.loc 1 133 21
 133:src/Riscv.cpp ****                     break;
GAS LISTING /tmp/ccIlKMw3.s 			page 33


 1119              		.loc 1 133 53 is_stmt 0
 1120 0504 97000000 		call	_ZN15MemoryAllocator15memAllocHandlerEv@plt
 1120      E7800000 
 1121              	.LVL70:
 134:src/Riscv.cpp ****                 case MemoryAllocator::MEM_FREE:
 1122              		.loc 1 134 21 is_stmt 1
 1123              	.L51:
 179:src/Riscv.cpp ****             Riscv::w_sepc(sepc);
 1124              		.loc 1 179 13
 179:src/Riscv.cpp ****             Riscv::w_sepc(sepc);
 1125              		.loc 1 179 29 is_stmt 0
 1126 050c 833704FB 		ld	a5,-80(s0)
 1127              	.LVL71:
 1128              	.LBB80:
 1129              	.LBB81:
 209:src/../h/Riscv.hpp **** }
 1130              		.loc 2 209 5 is_stmt 1
 209:src/../h/Riscv.hpp **** }
 1131              		.loc 2 209 57 is_stmt 0
 1132              	#APP
 1133              	# 209 "src/../h/Riscv.hpp" 1
 1134              		csrw sstatus, a5
 1135              	# 0 "" 2
 1136              	.LVL72:
 1137              	#NO_APP
 1138              	.LBE81:
 1139              	.LBE80:
 180:src/Riscv.cpp ****             changePrivMode();
 1140              		.loc 1 180 13 is_stmt 1
 180:src/Riscv.cpp ****             changePrivMode();
 1141              		.loc 1 180 26 is_stmt 0
 1142 0514 833784FA 		ld	a5,-88(s0)
 1143              	.LVL73:
 1144              	.LBB82:
 1145              	.LBB83:
 136:src/../h/Riscv.hpp **** }
 1146              		.loc 2 136 5 is_stmt 1
 136:src/../h/Riscv.hpp **** }
 1147              		.loc 2 136 51 is_stmt 0
 1148              	#APP
 1149              	# 136 "src/../h/Riscv.hpp" 1
 1150              		csrw sepc, a5
 1151              	# 0 "" 2
 1152              	.LVL74:
 1153              	#NO_APP
 1154              	.LBE83:
 1155              	.LBE82:
 181:src/Riscv.cpp ****             break;
 1156              		.loc 1 181 13 is_stmt 1
 181:src/Riscv.cpp ****             break;
 1157              		.loc 1 181 27 is_stmt 0
 1158 051c 97000000 		call	_ZN5Riscv14changePrivModeEv
 1158      E7800000 
 1159              	.LVL75:
 182:src/Riscv.cpp ****         }
 1160              		.loc 1 182 13 is_stmt 1
 1161              	.LBE75:
GAS LISTING /tmp/ccIlKMw3.s 			page 34


 1162              	.LBE87:
 1163              	.LBE89:
 185:src/Riscv.cpp **** 
 1164              		.loc 1 185 1 is_stmt 0
 1165 0524 6FF09FF4 		j	.L40
 1166              	.L66:
 1167              	.LBB90:
 1168              	.LBB88:
 1169              	.LBB84:
 135:src/Riscv.cpp ****                     MemoryAllocator::memFreeHandler();
 1170              		.loc 1 135 17 is_stmt 1
 136:src/Riscv.cpp ****                     break;
 1171              		.loc 1 136 21
 136:src/Riscv.cpp ****                     break;
 1172              		.loc 1 136 52 is_stmt 0
 1173 0528 97000000 		call	_ZN15MemoryAllocator14memFreeHandlerEv@plt
 1173      E7800000 
 1174              	.LVL76:
 137:src/Riscv.cpp ****                 case PCB::THREAD_MAKE_PCB:
 1175              		.loc 1 137 21 is_stmt 1
 1176 0530 6FF0DFFD 		j	.L51
 1177              	.L62:
 138:src/Riscv.cpp ****                     PCB::threadMakePCBHandler();
 1178              		.loc 1 138 17
 139:src/Riscv.cpp ****                     break;
 1179              		.loc 1 139 21
 139:src/Riscv.cpp ****                     break;
 1180              		.loc 1 139 46 is_stmt 0
 1181 0534 97000000 		call	_ZN3PCB20threadMakePCBHandlerEv@plt
 1181      E7800000 
 1182              	.LVL77:
 140:src/Riscv.cpp ****                 case PCB::THREAD_CREATE:
 1183              		.loc 1 140 21 is_stmt 1
 1184 053c 6FF01FFD 		j	.L51
 1185              	.L65:
 141:src/Riscv.cpp ****                     PCB::threadCreateHandler();
 1186              		.loc 1 141 17
 142:src/Riscv.cpp ****                     break;
 1187              		.loc 1 142 21
 142:src/Riscv.cpp ****                     break;
 1188              		.loc 1 142 45 is_stmt 0
 1189 0540 97000000 		call	_ZN3PCB19threadCreateHandlerEv@plt
 1189      E7800000 
 1190              	.LVL78:
 143:src/Riscv.cpp ****                 case PCB::THREAD_START:
 1191              		.loc 1 143 21 is_stmt 1
 1192 0548 6FF05FFC 		j	.L51
 1193              	.L61:
 144:src/Riscv.cpp ****                     PCB::threadStartHandler();
 1194              		.loc 1 144 17
 145:src/Riscv.cpp ****                     break;
 1195              		.loc 1 145 21
 145:src/Riscv.cpp ****                     break;
 1196              		.loc 1 145 44 is_stmt 0
 1197 054c 97000000 		call	_ZN3PCB18threadStartHandlerEv@plt
 1197      E7800000 
 1198              	.LVL79:
GAS LISTING /tmp/ccIlKMw3.s 			page 35


 146:src/Riscv.cpp ****                 case PCB::THREAD_DISPATCH:
 1199              		.loc 1 146 21 is_stmt 1
 1200 0554 6FF09FFB 		j	.L51
 1201              	.L63:
 147:src/Riscv.cpp ****                     PCB::threadDispatchHandler();
 1202              		.loc 1 147 17
 148:src/Riscv.cpp ****                     break;
 1203              		.loc 1 148 21
 148:src/Riscv.cpp ****                     break;
 1204              		.loc 1 148 47 is_stmt 0
 1205 0558 97000000 		call	_ZN3PCB21threadDispatchHandlerEv@plt
 1205      E7800000 
 1206              	.LVL80:
 149:src/Riscv.cpp ****                 case PCB::THREAD_EXIT:
 1207              		.loc 1 149 21 is_stmt 1
 1208 0560 6FF0DFFA 		j	.L51
 1209              	.L64:
 150:src/Riscv.cpp ****                     PCB::threadExitHandler();
 1210              		.loc 1 150 17
 151:src/Riscv.cpp ****                     break;
 1211              		.loc 1 151 21
 151:src/Riscv.cpp ****                     break;
 1212              		.loc 1 151 43 is_stmt 0
 1213 0564 97000000 		call	_ZN3PCB17threadExitHandlerEv@plt
 1213      E7800000 
 1214              	.LVL81:
 152:src/Riscv.cpp ****                 case PCB::TIME_SLEEP:
 1215              		.loc 1 152 21 is_stmt 1
 1216 056c 6FF01FFA 		j	.L51
 1217              	.L56:
 153:src/Riscv.cpp ****                     PCB::threadSleepHandler();
 1218              		.loc 1 153 17
 154:src/Riscv.cpp ****                     break;
 1219              		.loc 1 154 21
 154:src/Riscv.cpp ****                     break;
 1220              		.loc 1 154 44 is_stmt 0
 1221 0570 97000000 		call	_ZN3PCB18threadSleepHandlerEv@plt
 1221      E7800000 
 1222              	.LVL82:
 155:src/Riscv.cpp ****                 case KSemaphore::SEM_OPEN:
 1223              		.loc 1 155 21 is_stmt 1
 1224 0578 6FF05FF9 		j	.L51
 1225              	.L60:
 156:src/Riscv.cpp ****                     KSemaphore::semOpenHandler();
 1226              		.loc 1 156 17
 157:src/Riscv.cpp ****                     break;
 1227              		.loc 1 157 21
 157:src/Riscv.cpp ****                     break;
 1228              		.loc 1 157 47 is_stmt 0
 1229 057c 97000000 		call	_ZN10KSemaphore14semOpenHandlerEv@plt
 1229      E7800000 
 1230              	.LVL83:
 158:src/Riscv.cpp ****                 case KSemaphore::SEM_WAIT:
 1231              		.loc 1 158 21 is_stmt 1
 1232 0584 6FF09FF8 		j	.L51
 1233              	.L58:
 159:src/Riscv.cpp ****                     KSemaphore::semWaitHandler();
GAS LISTING /tmp/ccIlKMw3.s 			page 36


 1234              		.loc 1 159 17
 160:src/Riscv.cpp ****                     break;
 1235              		.loc 1 160 21
 160:src/Riscv.cpp ****                     break;
 1236              		.loc 1 160 47 is_stmt 0
 1237 0588 97000000 		call	_ZN10KSemaphore14semWaitHandlerEv@plt
 1237      E7800000 
 1238              	.LVL84:
 161:src/Riscv.cpp ****                 case KSemaphore::SEM_SIGNAL:
 1239              		.loc 1 161 21 is_stmt 1
 1240 0590 6FF0DFF7 		j	.L51
 1241              	.L57:
 162:src/Riscv.cpp ****                     KSemaphore::semSignalHandler();
 1242              		.loc 1 162 17
 163:src/Riscv.cpp ****                     break;
 1243              		.loc 1 163 21
 163:src/Riscv.cpp ****                     break;
 1244              		.loc 1 163 49 is_stmt 0
 1245 0594 97000000 		call	_ZN10KSemaphore16semSignalHandlerEv@plt
 1245      E7800000 
 1246              	.LVL85:
 164:src/Riscv.cpp ****                 case KSemaphore::SEM_CLOSE:
 1247              		.loc 1 164 21 is_stmt 1
 1248 059c 6FF01FF7 		j	.L51
 1249              	.L59:
 165:src/Riscv.cpp ****                     KSemaphore::semCloseHandler();
 1250              		.loc 1 165 17
 166:src/Riscv.cpp ****                     break;
 1251              		.loc 1 166 21
 166:src/Riscv.cpp ****                     break;
 1252              		.loc 1 166 48 is_stmt 0
 1253 05a0 97000000 		call	_ZN10KSemaphore15semCloseHandlerEv@plt
 1253      E7800000 
 1254              	.LVL86:
 167:src/Riscv.cpp ****                 case KConsole::CONSOLE_GETC:
 1255              		.loc 1 167 21 is_stmt 1
 1256 05a8 6FF05FF6 		j	.L51
 1257              	.L55:
 168:src/Riscv.cpp ****                     KConsole::getcHandler();
 1258              		.loc 1 168 17
 169:src/Riscv.cpp ****                     break;
 1259              		.loc 1 169 21
 169:src/Riscv.cpp ****                     break;
 1260              		.loc 1 169 42 is_stmt 0
 1261 05ac 97000000 		call	_ZN8KConsole11getcHandlerEv@plt
 1261      E7800000 
 1262              	.LVL87:
 170:src/Riscv.cpp ****                 case KConsole::CONSOLE_PUTC:
 1263              		.loc 1 170 21 is_stmt 1
 1264 05b4 6FF09FF5 		j	.L51
 1265              	.L54:
 171:src/Riscv.cpp ****                     KConsole::putcHandler();
 1266              		.loc 1 171 17
 172:src/Riscv.cpp ****                     break;
 1267              		.loc 1 172 21
 172:src/Riscv.cpp ****                     break;
 1268              		.loc 1 172 42 is_stmt 0
GAS LISTING /tmp/ccIlKMw3.s 			page 37


 1269 05b8 97000000 		call	_ZN8KConsole11putcHandlerEv@plt
 1269      E7800000 
 1270              	.LVL88:
 173:src/Riscv.cpp ****                 case KConsole::CONSOLE_GET_CHAR:
 1271              		.loc 1 173 21 is_stmt 1
 1272 05c0 6FF0DFF4 		j	.L51
 1273              	.L52:
 174:src/Riscv.cpp ****                     KConsole::getCharHandler();
 1274              		.loc 1 174 17
 175:src/Riscv.cpp ****                     break;
 1275              		.loc 1 175 21
 175:src/Riscv.cpp ****                     break;
 1276              		.loc 1 175 45 is_stmt 0
 1277 05c4 97000000 		call	_ZN8KConsole14getCharHandlerEv@plt
 1277      E7800000 
 1278              	.LVL89:
 176:src/Riscv.cpp ****             }
 1279              		.loc 1 176 21 is_stmt 1
 1280 05cc 6FF01FF4 		j	.L51
 1281              	.LBE84:
 1282              	.LBE88:
 1283              	.LBE90:
 1284              		.cfi_endproc
 1285              	.LFE32:
 1287              		.globl	_ZN5Riscv16kernelMainCalledE
 1288              		.globl	_ZN5Riscv12finishSystemE
 1289              		.globl	_ZN5Riscv9totalTimeE
 1290              		.bss
 1291              		.align	3
 1292              		.set	.LANCHOR0,. + 0
 1295              	_ZN5Riscv16kernelMainCalledE:
 1296 0000 00       		.zero	1
 1299              	_ZN5Riscv12finishSystemE:
 1300 0001 00       		.zero	1
 1301 0002 00000000 		.zero	6
 1301      0000
 1304              	_ZN5Riscv9totalTimeE:
 1305 0008 00000000 		.zero	8
 1305      00000000 
 1306              		.text
 1307              	.Letext0:
 1308              		.file 4 "src/../h/../lib/hw.h"
 1309              		.file 5 "src/../h/MemoryAllocator.hpp"
 1310              		.file 6 "src/../h/KSemaphore.hpp"
 1311              		.file 7 "src/../h/SleepPCBList.hpp"
 1312              		.file 8 "src/../h/KConsole.hpp"
 1313              		.file 9 "src/../h/Tests.hpp"
 1314              		.file 10 "src/../test/userMain.hpp"
 1315              		.file 11 "src/../h/../test/../h/syscall_c.h"
 5747              		.align	3
 5750              	DW.ref.__gxx_personality_v0:
 5751 0000 00000000 		.dword	__gxx_personality_v0
 5751      00000000 
 5752              		.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
 5753              		.section	.note.GNU-stack,"",@progbits
GAS LISTING /tmp/ccIlKMw3.s 			page 38


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccIlKMw3.s:9      .text:0000000000000000 _ZN5Riscv15userMainWrapperEPv
     /tmp/ccIlKMw3.s:13     .text:0000000000000000 .L0 
     /tmp/ccIlKMw3.s:14     .text:0000000000000000 .L0 
     /tmp/ccIlKMw3.s:15     .text:0000000000000004 .L0 
     /tmp/ccIlKMw3.s:18     .text:000000000000000c .L0 
     /tmp/ccIlKMw3.s:19     .text:000000000000000c .L0 
     /tmp/ccIlKMw3.s:21     .text:0000000000000010 .L0 
     /tmp/ccIlKMw3.s:23     .text:0000000000000010 .L0 
     /tmp/ccIlKMw3.s:24     .text:0000000000000010 .L0 
     /tmp/ccIlKMw3.s:27     .text:0000000000000018 .L0 
     /tmp/ccIlKMw3.s:28     .text:000000000000001c .L0 
     /tmp/ccIlKMw3.s:30     .text:0000000000000020 .L0 
     /tmp/ccIlKMw3.s:31     .text:0000000000000020 .L0 
     /tmp/ccIlKMw3.s:33     .text:0000000000000024 .L0 
     /tmp/ccIlKMw3.s:35     .text:0000000000000028 .L0 
     /tmp/ccIlKMw3.s:41     .text:0000000000000028 _ZN5Riscv10initSystemEv
     /tmp/ccIlKMw3.s:44     .text:0000000000000028 .L0 
     /tmp/ccIlKMw3.s:45     .text:0000000000000028 .L0 
     /tmp/ccIlKMw3.s:46     .text:000000000000002c .L0 
     /tmp/ccIlKMw3.s:49     .text:0000000000000034 .L0 
     /tmp/ccIlKMw3.s:50     .text:0000000000000034 .L0 
     /tmp/ccIlKMw3.s:52     .text:0000000000000038 .L0 
     /tmp/ccIlKMw3.s:54     .text:0000000000000038 .L0 
     /tmp/ccIlKMw3.s:55     .text:0000000000000038 .L0 
     /tmp/ccIlKMw3.s:61     .text:0000000000000040 .L0 
  src/../h/Riscv.hpp:146    .text:0000000000000040 .L0 
     /tmp/ccIlKMw3.s:71     .text:0000000000000044 .L0 
     /tmp/ccIlKMw3.s:72     .text:0000000000000044 .L0 
     /tmp/ccIlKMw3.s:75     .text:000000000000004c .L0 
     /tmp/ccIlKMw3.s:76     .text:000000000000004c .L0 
     /tmp/ccIlKMw3.s:79     .text:0000000000000054 .L0 
     /tmp/ccIlKMw3.s:80     .text:0000000000000058 .L0 
     /tmp/ccIlKMw3.s:82     .text:000000000000005c .L0 
     /tmp/ccIlKMw3.s:83     .text:000000000000005c .L0 
     /tmp/ccIlKMw3.s:85     .text:0000000000000060 .L0 
     /tmp/ccIlKMw3.s:87     .text:0000000000000064 .L0 
     /tmp/ccIlKMw3.s:93     .text:0000000000000064 _ZN5Riscv16enableInterruptsEv
     /tmp/ccIlKMw3.s:96     .text:0000000000000064 .L0 
     /tmp/ccIlKMw3.s:97     .text:0000000000000064 .L0 
     /tmp/ccIlKMw3.s:98     .text:0000000000000068 .L0 
     /tmp/ccIlKMw3.s:100    .text:000000000000006c .L0 
     /tmp/ccIlKMw3.s:102    .text:0000000000000070 .L0 
     /tmp/ccIlKMw3.s:107    .text:0000000000000070 .L0 
     /tmp/ccIlKMw3.s:108    .text:0000000000000070 .L0 
     /tmp/ccIlKMw3.s:109    .text:0000000000000070 .L0 
     /tmp/ccIlKMw3.s:119    .text:0000000000000078 .L0 
     /tmp/ccIlKMw3.s:120    .text:000000000000007c .L0 
     /tmp/ccIlKMw3.s:121    .text:000000000000007c .L0 
     /tmp/ccIlKMw3.s:123    .text:0000000000000080 .L0 
     /tmp/ccIlKMw3.s:125    .text:0000000000000084 .L0 
     /tmp/ccIlKMw3.s:131    .text:0000000000000084 _ZN5Riscv17disableInterruptsEv
     /tmp/ccIlKMw3.s:134    .text:0000000000000084 .L0 
     /tmp/ccIlKMw3.s:135    .text:0000000000000084 .L0 
     /tmp/ccIlKMw3.s:136    .text:0000000000000088 .L0 
     /tmp/ccIlKMw3.s:138    .text:000000000000008c .L0 
GAS LISTING /tmp/ccIlKMw3.s 			page 39


     /tmp/ccIlKMw3.s:140    .text:0000000000000090 .L0 
     /tmp/ccIlKMw3.s:145    .text:0000000000000090 .L0 
     /tmp/ccIlKMw3.s:146    .text:0000000000000090 .L0 
     /tmp/ccIlKMw3.s:147    .text:0000000000000090 .L0 
     /tmp/ccIlKMw3.s:157    .text:0000000000000098 .L0 
     /tmp/ccIlKMw3.s:158    .text:000000000000009c .L0 
     /tmp/ccIlKMw3.s:159    .text:000000000000009c .L0 
     /tmp/ccIlKMw3.s:161    .text:00000000000000a0 .L0 
     /tmp/ccIlKMw3.s:163    .text:00000000000000a4 .L0 
     /tmp/ccIlKMw3.s:169    .text:00000000000000a4 _ZN5Riscv9endSystemEv
     /tmp/ccIlKMw3.s:172    .text:00000000000000a4 .L0 
     /tmp/ccIlKMw3.s:173    .text:00000000000000a4 .L0 
     /tmp/ccIlKMw3.s:174    .text:00000000000000a8 .L0 
     /tmp/ccIlKMw3.s:177    .text:00000000000000b0 .L0 
     /tmp/ccIlKMw3.s:178    .text:00000000000000b0 .L0 
     /tmp/ccIlKMw3.s:180    .text:00000000000000b4 .L0 
     /tmp/ccIlKMw3.s:182    .text:00000000000000b4 .L0 
     /tmp/ccIlKMw3.s:183    .text:00000000000000b4 .L0 
     /tmp/ccIlKMw3.s:186    .text:00000000000000bc .L0 
     /tmp/ccIlKMw3.s:187    .text:00000000000000c0 .L0 
     /tmp/ccIlKMw3.s:189    .text:00000000000000c4 .L0 
     /tmp/ccIlKMw3.s:190    .text:00000000000000c4 .L0 
     /tmp/ccIlKMw3.s:192    .text:00000000000000c8 .L0 
     /tmp/ccIlKMw3.s:194    .text:00000000000000cc .L0 
     /tmp/ccIlKMw3.s:200    .text:00000000000000cc _ZN5Riscv10popSppSpieEv
     /tmp/ccIlKMw3.s:203    .text:00000000000000cc .L0 
     /tmp/ccIlKMw3.s:204    .text:00000000000000cc .L0 
     /tmp/ccIlKMw3.s:205    .text:00000000000000d0 .L0 
     /tmp/ccIlKMw3.s:207    .text:00000000000000d4 .L0 
     /tmp/ccIlKMw3.s:209    .text:00000000000000d8 .L0 
     /tmp/ccIlKMw3.s:211    .text:00000000000000d8 .L0 
       src/Riscv.cpp:41     .text:00000000000000d8 .L0 
     /tmp/ccIlKMw3.s:217    .text:00000000000000dc .L0 
       src/Riscv.cpp:42     .text:00000000000000dc .L0 
     /tmp/ccIlKMw3.s:223    .text:00000000000000e0 .L0 
     /tmp/ccIlKMw3.s:224    .text:00000000000000e4 .L0 
     /tmp/ccIlKMw3.s:225    .text:00000000000000e4 .L0 
     /tmp/ccIlKMw3.s:227    .text:00000000000000e8 .L0 
     /tmp/ccIlKMw3.s:229    .text:00000000000000ec .L0 
     /tmp/ccIlKMw3.s:235    .text:00000000000000ec _ZN5Riscv14myTestsWrapperEPv
     /tmp/ccIlKMw3.s:238    .text:00000000000000ec .L0 
     /tmp/ccIlKMw3.s:240    .text:00000000000000ec .L0 
     /tmp/ccIlKMw3.s:241    .text:00000000000000f0 .L0 
     /tmp/ccIlKMw3.s:244    .text:00000000000000f8 .L0 
     /tmp/ccIlKMw3.s:245    .text:00000000000000f8 .L0 
     /tmp/ccIlKMw3.s:247    .text:00000000000000fc .L0 
     /tmp/ccIlKMw3.s:249    .text:00000000000000fc .L0 
     /tmp/ccIlKMw3.s:250    .text:00000000000000fc .L0 
     /tmp/ccIlKMw3.s:253    .text:0000000000000104 .L0 
     /tmp/ccIlKMw3.s:254    .text:0000000000000108 .L0 
     /tmp/ccIlKMw3.s:256    .text:000000000000010c .L0 
     /tmp/ccIlKMw3.s:257    .text:000000000000010c .L0 
     /tmp/ccIlKMw3.s:259    .text:0000000000000110 .L0 
     /tmp/ccIlKMw3.s:261    .text:0000000000000114 .L0 
     /tmp/ccIlKMw3.s:267    .text:0000000000000114 _ZN5Riscv22disableTimerInterruptsEv
     /tmp/ccIlKMw3.s:270    .text:0000000000000114 .L0 
     /tmp/ccIlKMw3.s:271    .text:0000000000000114 .L0 
GAS LISTING /tmp/ccIlKMw3.s 			page 40


     /tmp/ccIlKMw3.s:272    .text:0000000000000118 .L0 
     /tmp/ccIlKMw3.s:274    .text:000000000000011c .L0 
     /tmp/ccIlKMw3.s:276    .text:0000000000000120 .L0 
     /tmp/ccIlKMw3.s:279    .text:0000000000000120 .L0 
     /tmp/ccIlKMw3.s:280    .text:0000000000000120 .L0 
     /tmp/ccIlKMw3.s:281    .text:0000000000000120 .L0 
     /tmp/ccIlKMw3.s:288    .text:0000000000000128 .L0 
     /tmp/ccIlKMw3.s:289    .text:000000000000012c .L0 
     /tmp/ccIlKMw3.s:290    .text:000000000000012c .L0 
     /tmp/ccIlKMw3.s:292    .text:0000000000000130 .L0 
     /tmp/ccIlKMw3.s:294    .text:0000000000000134 .L0 
     /tmp/ccIlKMw3.s:300    .text:0000000000000134 _ZN5Riscv10kernelMainEv
     /tmp/ccIlKMw3.s:303    .text:0000000000000134 .L0 
     /tmp/ccIlKMw3.s:5750   .data.rel.local.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccIlKMw3.s:306    .text:0000000000000134 .L0 
     /tmp/ccIlKMw3.s:307    .text:0000000000000134 .L0 
     /tmp/ccIlKMw3.s:312    .text:0000000000000144 .L0 
     /tmp/ccIlKMw3.s:313    .text:0000000000000148 .L0 
     /tmp/ccIlKMw3.s:318    .text:0000000000000158 .L0 
     /tmp/ccIlKMw3.s:319    .text:0000000000000158 .L0 
     /tmp/ccIlKMw3.s:320    .text:0000000000000158 .L0 
     /tmp/ccIlKMw3.s:321    .text:0000000000000158 .L0 
     /tmp/ccIlKMw3.s:323    .text:000000000000015c .L0 
     /tmp/ccIlKMw3.s:325    .text:000000000000015c .L0 
     /tmp/ccIlKMw3.s:326    .text:000000000000015c .L0 
     /tmp/ccIlKMw3.s:330    .text:0000000000000168 .L0 
     /tmp/ccIlKMw3.s:331    .text:0000000000000168 .L0 
     /tmp/ccIlKMw3.s:334    .text:0000000000000170 .L0 
     /tmp/ccIlKMw3.s:335    .text:0000000000000170 .L0 
     /tmp/ccIlKMw3.s:340    .text:0000000000000180 .L0 
     /tmp/ccIlKMw3.s:354    .text:00000000000001ac .L0 
     /tmp/ccIlKMw3.s:355    .text:00000000000001ac .L0 
     /tmp/ccIlKMw3.s:360    .text:00000000000001b8 .L0 
     /tmp/ccIlKMw3.s:361    .text:00000000000001b8 .L0 
     /tmp/ccIlKMw3.s:364    .text:00000000000001c0 .L0 
     /tmp/ccIlKMw3.s:365    .text:00000000000001c0 .L0 
     /tmp/ccIlKMw3.s:369    .text:00000000000001c8 .L0 
     /tmp/ccIlKMw3.s:370    .text:00000000000001c8 .L0 
     /tmp/ccIlKMw3.s:371    .text:00000000000001c8 .L0 
     /tmp/ccIlKMw3.s:375    .text:00000000000001d4 .L0 
     /tmp/ccIlKMw3.s:377    .text:00000000000001d8 .L0 
     /tmp/ccIlKMw3.s:378    .text:00000000000001d8 .L0 
     /tmp/ccIlKMw3.s:381    .text:00000000000001e0 .L0 
     /tmp/ccIlKMw3.s:384    .text:00000000000001e4 .L0 
     /tmp/ccIlKMw3.s:385    .text:00000000000001e4 .L0 
     /tmp/ccIlKMw3.s:390    .text:00000000000001f4 .L0 
     /tmp/ccIlKMw3.s:391    .text:00000000000001f4 .L0 
     /tmp/ccIlKMw3.s:395    .text:00000000000001fc .L0 
     /tmp/ccIlKMw3.s:396    .text:00000000000001fc .L0 
     /tmp/ccIlKMw3.s:397    .text:00000000000001fc .L0 
     /tmp/ccIlKMw3.s:403    .text:0000000000000210 .L0 
     /tmp/ccIlKMw3.s:405    .text:0000000000000214 .L0 
     /tmp/ccIlKMw3.s:406    .text:0000000000000214 .L0 
     /tmp/ccIlKMw3.s:409    .text:000000000000021c .L0 
     /tmp/ccIlKMw3.s:410    .text:000000000000021c .L0 
     /tmp/ccIlKMw3.s:413    .text:0000000000000224 .L0 
     /tmp/ccIlKMw3.s:414    .text:0000000000000228 .L0 
GAS LISTING /tmp/ccIlKMw3.s 			page 41


     /tmp/ccIlKMw3.s:415    .text:0000000000000228 .L0 
     /tmp/ccIlKMw3.s:417    .text:000000000000022c .L0 
     /tmp/ccIlKMw3.s:418    .text:000000000000022c .L0 
     /tmp/ccIlKMw3.s:420    .text:0000000000000230 .L0 
     /tmp/ccIlKMw3.s:423    .text:0000000000000234 .L0 
     /tmp/ccIlKMw3.s:425    .text:0000000000000238 .L0 
     /tmp/ccIlKMw3.s:428    .text:000000000000023c .L0 
     /tmp/ccIlKMw3.s:431    .text:0000000000000240 .L0 
     /tmp/ccIlKMw3.s:439    .text:0000000000000258 .L0 
     /tmp/ccIlKMw3.s:469    .text:0000000000000258 _ZN5Riscv9idleRiscvEPv
     /tmp/ccIlKMw3.s:472    .text:0000000000000258 .L0 
     /tmp/ccIlKMw3.s:474    .text:0000000000000258 .L0 
     /tmp/ccIlKMw3.s:475    .text:000000000000025c .L0 
     /tmp/ccIlKMw3.s:477    .text:0000000000000260 .L0 
     /tmp/ccIlKMw3.s:479    .text:0000000000000264 .L0 
     /tmp/ccIlKMw3.s:482    .text:0000000000000264 .L0 
     /tmp/ccIlKMw3.s:483    .text:0000000000000264 .L0 
     /tmp/ccIlKMw3.s:484    .text:0000000000000268 .L0 
     /tmp/ccIlKMw3.s:490    .text:0000000000000268 _ZN5Riscv13w_a0_sscratchEv
     /tmp/ccIlKMw3.s:493    .text:0000000000000268 .L0 
     /tmp/ccIlKMw3.s:494    .text:0000000000000268 .L0 
     /tmp/ccIlKMw3.s:495    .text:000000000000026c .L0 
     /tmp/ccIlKMw3.s:497    .text:0000000000000270 .L0 
     /tmp/ccIlKMw3.s:499    .text:0000000000000274 .L0 
     /tmp/ccIlKMw3.s:501    .text:0000000000000274 .L0 
     /tmp/ccIlKMw3.s:502    .text:0000000000000274 .L0 
       src/Riscv.cpp:243    .text:0000000000000274 .L0 
     /tmp/ccIlKMw3.s:509    .text:0000000000000278 .L0 
     /tmp/ccIlKMw3.s:511    .text:0000000000000278 .L0 
       src/Riscv.cpp:244    .text:0000000000000288 .L0 
     /tmp/ccIlKMw3.s:520    .text:000000000000028c .L0 
       src/Riscv.cpp:245    .text:000000000000028c .L0 
     /tmp/ccIlKMw3.s:525    .text:0000000000000290 .L0 
       src/Riscv.cpp:246    .text:0000000000000290 .L0 
     /tmp/ccIlKMw3.s:531    .text:0000000000000294 .L0 
     /tmp/ccIlKMw3.s:532    .text:0000000000000298 .L0 
     /tmp/ccIlKMw3.s:533    .text:0000000000000298 .L0 
     /tmp/ccIlKMw3.s:535    .text:000000000000029c .L0 
     /tmp/ccIlKMw3.s:537    .text:00000000000002a0 .L0 
     /tmp/ccIlKMw3.s:543    .text:00000000000002a0 _ZN5Riscv14changePrivModeEv
     /tmp/ccIlKMw3.s:546    .text:00000000000002a0 .L0 
     /tmp/ccIlKMw3.s:547    .text:00000000000002a0 .L0 
     /tmp/ccIlKMw3.s:548    .text:00000000000002a4 .L0 
     /tmp/ccIlKMw3.s:550    .text:00000000000002a8 .L0 
     /tmp/ccIlKMw3.s:552    .text:00000000000002ac .L0 
     /tmp/ccIlKMw3.s:554    .text:00000000000002ac .L0 
     /tmp/ccIlKMw3.s:555    .text:00000000000002ac .L0 
     /tmp/ccIlKMw3.s:559    .text:00000000000002bc .L0 
     /tmp/ccIlKMw3.s:564    .text:00000000000002c0 .L0 
     /tmp/ccIlKMw3.s:565    .text:00000000000002c0 .L0 
     /tmp/ccIlKMw3.s:566    .text:00000000000002c0 .L0 
     /tmp/ccIlKMw3.s:577    .text:00000000000002c8 .L0 
     /tmp/ccIlKMw3.s:578    .text:00000000000002cc .L0 
     /tmp/ccIlKMw3.s:579    .text:00000000000002cc .L0 
     /tmp/ccIlKMw3.s:580    .text:00000000000002cc .L0 
     /tmp/ccIlKMw3.s:582    .text:00000000000002d0 .L0 
     /tmp/ccIlKMw3.s:585    .text:00000000000002d4 .L0 
GAS LISTING /tmp/ccIlKMw3.s 			page 42


     /tmp/ccIlKMw3.s:590    .text:00000000000002d4 .L0 
     /tmp/ccIlKMw3.s:591    .text:00000000000002d4 .L0 
     /tmp/ccIlKMw3.s:592    .text:00000000000002d4 .L0 
     /tmp/ccIlKMw3.s:602    .text:00000000000002dc .L0 
     /tmp/ccIlKMw3.s:603    .text:00000000000002e0 .L0 
     /tmp/ccIlKMw3.s:609    .text:00000000000002e0 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccIlKMw3.s:612    .text:00000000000002e0 .L0 
     /tmp/ccIlKMw3.s:613    .text:00000000000002e0 .L0 
     /tmp/ccIlKMw3.s:614    .text:00000000000002e4 .L0 
     /tmp/ccIlKMw3.s:618    .text:00000000000002f0 .L0 
     /tmp/ccIlKMw3.s:619    .text:00000000000002f0 .L0 
     /tmp/ccIlKMw3.s:620    .text:00000000000002f0 .L0 
     /tmp/ccIlKMw3.s:622    .text:00000000000002f4 .L0 
     /tmp/ccIlKMw3.s:624    .text:00000000000002f4 .L0 
       src/Riscv.cpp:47     .text:00000000000002f4 .L0 
     /tmp/ccIlKMw3.s:633    .text:0000000000000304 .L0 
     /tmp/ccIlKMw3.s:634    .text:0000000000000304 .L0 
       src/Riscv.cpp:48     .text:0000000000000310 .L0 
     /tmp/ccIlKMw3.s:646    .text:0000000000000318 .L0 
     /tmp/ccIlKMw3.s:647    .text:0000000000000318 .L0 
     /tmp/ccIlKMw3.s:648    .text:0000000000000318 .L0 
  src/../h/Riscv.hpp:121    .text:0000000000000318 .L0 
     /tmp/ccIlKMw3.s:656    .text:0000000000000320 .L0 
     /tmp/ccIlKMw3.s:657    .text:0000000000000320 .L0 
     /tmp/ccIlKMw3.s:663    .text:0000000000000324 .L0 
     /tmp/ccIlKMw3.s:673    .text:0000000000000344 .L0 
     /tmp/ccIlKMw3.s:674    .text:0000000000000344 .L0 
     /tmp/ccIlKMw3.s:675    .text:0000000000000344 .L0 
     /tmp/ccIlKMw3.s:676    .text:0000000000000344 .L0 
     /tmp/ccIlKMw3.s:679    .text:000000000000034c .L0 
     /tmp/ccIlKMw3.s:684    .text:0000000000000350 .L0 
     /tmp/ccIlKMw3.s:688    .text:0000000000000358 .L0 
     /tmp/ccIlKMw3.s:689    .text:0000000000000358 .L0 
     /tmp/ccIlKMw3.s:690    .text:0000000000000358 .L0 
     /tmp/ccIlKMw3.s:691    .text:0000000000000358 .L0 
     /tmp/ccIlKMw3.s:694    .text:0000000000000360 .L0 
     /tmp/ccIlKMw3.s:699    .text:0000000000000364 .L0 
     /tmp/ccIlKMw3.s:709    .text:0000000000000384 .L0 
     /tmp/ccIlKMw3.s:711    .text:0000000000000384 .L0 
     /tmp/ccIlKMw3.s:712    .text:0000000000000384 .L0 
     /tmp/ccIlKMw3.s:713    .text:0000000000000384 .L0 
     /tmp/ccIlKMw3.s:718    .text:0000000000000390 .L0 
       src/Riscv.cpp:80     .text:0000000000000390 .L0 
     /tmp/ccIlKMw3.s:724    .text:0000000000000394 .L0 
       src/Riscv.cpp:81     .text:0000000000000394 .L0 
     /tmp/ccIlKMw3.s:729    .text:0000000000000398 .L0 
     /tmp/ccIlKMw3.s:730    .text:0000000000000398 .L0 
       src/Riscv.cpp:83     .text:0000000000000398 .L0 
     /tmp/ccIlKMw3.s:738    .text:000000000000039c .L0 
     /tmp/ccIlKMw3.s:739    .text:000000000000039c .L0 
     /tmp/ccIlKMw3.s:742    .text:00000000000003a0 .L0 
     /tmp/ccIlKMw3.s:745    .text:00000000000003a4 .L0 
     /tmp/ccIlKMw3.s:746    .text:00000000000003a4 .L0 
     /tmp/ccIlKMw3.s:750    .text:00000000000003b0 .L0 
       src/Riscv.cpp:87     .text:00000000000003b0 .L0 
     /tmp/ccIlKMw3.s:756    .text:00000000000003b4 .L0 
       src/Riscv.cpp:88     .text:00000000000003b4 .L0 
GAS LISTING /tmp/ccIlKMw3.s 			page 43


     /tmp/ccIlKMw3.s:761    .text:00000000000003b8 .L0 
     /tmp/ccIlKMw3.s:762    .text:00000000000003b8 .L0 
       src/Riscv.cpp:90     .text:00000000000003b8 .L0 
     /tmp/ccIlKMw3.s:770    .text:00000000000003c0 .L0 
     /tmp/ccIlKMw3.s:771    .text:00000000000003c0 .L0 
     /tmp/ccIlKMw3.s:775    .text:00000000000003cc .L0 
     /tmp/ccIlKMw3.s:781    .text:00000000000003d0 .L0 
     /tmp/ccIlKMw3.s:782    .text:00000000000003d0 .L0 
     /tmp/ccIlKMw3.s:787    .text:00000000000003e0 .L0 
     /tmp/ccIlKMw3.s:792    .text:00000000000003e4 .L0 
     /tmp/ccIlKMw3.s:794    .text:00000000000003e4 .L0 
     /tmp/ccIlKMw3.s:797    .text:00000000000003e4 .L0 
     /tmp/ccIlKMw3.s:798    .text:00000000000003e4 .L0 
     /tmp/ccIlKMw3.s:799    .text:00000000000003e4 .L0 
  src/../h/Riscv.hpp:131    .text:00000000000003e4 .L0 
     /tmp/ccIlKMw3.s:808    .text:00000000000003ec .L0 
     /tmp/ccIlKMw3.s:809    .text:00000000000003ec .L0 
     /tmp/ccIlKMw3.s:813    .text:00000000000003f0 .L0 
     /tmp/ccIlKMw3.s:817    .text:00000000000003f4 .L0 
     /tmp/ccIlKMw3.s:818    .text:00000000000003f4 .L0 
     /tmp/ccIlKMw3.s:819    .text:00000000000003f4 .L0 
  src/../h/Riscv.hpp:204    .text:00000000000003f4 .L0 
     /tmp/ccIlKMw3.s:827    .text:00000000000003fc .L0 
     /tmp/ccIlKMw3.s:828    .text:00000000000003fc .L0 
     /tmp/ccIlKMw3.s:832    .text:0000000000000400 .L0 
     /tmp/ccIlKMw3.s:837    .text:0000000000000404 .L0 
     /tmp/ccIlKMw3.s:838    .text:0000000000000404 .L0 
     /tmp/ccIlKMw3.s:839    .text:0000000000000404 .L0 
     /tmp/ccIlKMw3.s:849    .text:000000000000040c .L0 
     /tmp/ccIlKMw3.s:850    .text:000000000000040c .L0 
     /tmp/ccIlKMw3.s:855    .text:0000000000000420 .L0 
     /tmp/ccIlKMw3.s:856    .text:0000000000000420 .L0 
     /tmp/ccIlKMw3.s:861    .text:0000000000000434 .L0 
     /tmp/ccIlKMw3.s:862    .text:0000000000000434 .L0 
     /tmp/ccIlKMw3.s:865    .text:000000000000043c .L0 
     /tmp/ccIlKMw3.s:866    .text:000000000000043c .L0 
     /tmp/ccIlKMw3.s:873    .text:0000000000000448 .L0 
     /tmp/ccIlKMw3.s:874    .text:0000000000000448 .L0 
     /tmp/ccIlKMw3.s:879    .text:000000000000044c .L0 
     /tmp/ccIlKMw3.s:881    .text:0000000000000450 .L0 
     /tmp/ccIlKMw3.s:884    .text:0000000000000454 .L0 
     /tmp/ccIlKMw3.s:885    .text:0000000000000454 .L0 
     /tmp/ccIlKMw3.s:890    .text:0000000000000458 .L0 
  src/../h/Riscv.hpp:209    .text:0000000000000458 .L0 
     /tmp/ccIlKMw3.s:900    .text:000000000000045c .L0 
     /tmp/ccIlKMw3.s:901    .text:000000000000045c .L0 
     /tmp/ccIlKMw3.s:906    .text:0000000000000460 .L0 
  src/../h/Riscv.hpp:136    .text:0000000000000460 .L0 
     /tmp/ccIlKMw3.s:916    .text:0000000000000464 .L0 
     /tmp/ccIlKMw3.s:917    .text:0000000000000464 .L0 
     /tmp/ccIlKMw3.s:924    .text:000000000000046c .L0 
     /tmp/ccIlKMw3.s:925    .text:000000000000046c .L0 
     /tmp/ccIlKMw3.s:926    .text:0000000000000470 .L0 
     /tmp/ccIlKMw3.s:927    .text:0000000000000470 .L0 
     /tmp/ccIlKMw3.s:929    .text:0000000000000474 .L0 
     /tmp/ccIlKMw3.s:930    .text:0000000000000474 .L0 
     /tmp/ccIlKMw3.s:932    .text:0000000000000478 .L0 
GAS LISTING /tmp/ccIlKMw3.s 			page 44


     /tmp/ccIlKMw3.s:934    .text:000000000000047c .L0 
     /tmp/ccIlKMw3.s:937    .text:0000000000000480 .L0 
     /tmp/ccIlKMw3.s:942    .text:0000000000000480 .L0 
     /tmp/ccIlKMw3.s:943    .text:0000000000000480 .L0 
     /tmp/ccIlKMw3.s:945    .text:0000000000000484 .L0 
     /tmp/ccIlKMw3.s:946    .text:0000000000000484 .L0 
     /tmp/ccIlKMw3.s:956    .text:0000000000000490 .L0 
     /tmp/ccIlKMw3.s:957    .text:0000000000000490 .L0 
     /tmp/ccIlKMw3.s:961    .text:00000000000004a0 .L0 
     /tmp/ccIlKMw3.s:962    .text:00000000000004a0 .L0 
     /tmp/ccIlKMw3.s:971    .text:00000000000004ac .L0 
     /tmp/ccIlKMw3.s:972    .text:00000000000004ac .L0 
     /tmp/ccIlKMw3.s:973    .text:00000000000004ac .L0 
     /tmp/ccIlKMw3.s:974    .text:00000000000004ac .L0 
     /tmp/ccIlKMw3.s:977    .text:00000000000004b4 .L0 
     /tmp/ccIlKMw3.s:981    .text:00000000000004b8 .L0 
     /tmp/ccIlKMw3.s:982    .text:00000000000004b8 .L0 
     /tmp/ccIlKMw3.s:984    .text:00000000000004b8 .L0 
     /tmp/ccIlKMw3.s:985    .text:00000000000004b8 .L0 
     /tmp/ccIlKMw3.s:986    .text:00000000000004b8 .L0 
       src/Riscv.cpp:125    .text:00000000000004b8 .L0 
     /tmp/ccIlKMw3.s:996    .text:00000000000004bc .L0 
     /tmp/ccIlKMw3.s:997    .text:00000000000004bc .L0 
     /tmp/ccIlKMw3.s:998    .text:00000000000004bc .L0 
  src/../h/Riscv.hpp:131    .text:00000000000004bc .L0 
     /tmp/ccIlKMw3.s:1006   .text:00000000000004c4 .L0 
     /tmp/ccIlKMw3.s:1007   .text:00000000000004c4 .L0 
     /tmp/ccIlKMw3.s:1011   .text:00000000000004c8 .L0 
     /tmp/ccIlKMw3.s:1013   .text:00000000000004cc .L0 
     /tmp/ccIlKMw3.s:1017   .text:00000000000004d0 .L0 
     /tmp/ccIlKMw3.s:1018   .text:00000000000004d0 .L0 
     /tmp/ccIlKMw3.s:1019   .text:00000000000004d0 .L0 
  src/../h/Riscv.hpp:204    .text:00000000000004d0 .L0 
     /tmp/ccIlKMw3.s:1027   .text:00000000000004d8 .L0 
     /tmp/ccIlKMw3.s:1028   .text:00000000000004d8 .L0 
     /tmp/ccIlKMw3.s:1032   .text:00000000000004dc .L0 
     /tmp/ccIlKMw3.s:1034   .text:00000000000004e0 .L0 
     /tmp/ccIlKMw3.s:1118   .text:0000000000000504 .L0 
     /tmp/ccIlKMw3.s:1119   .text:0000000000000504 .L0 
     /tmp/ccIlKMw3.s:1120   .text:0000000000000504 .L0 
     /tmp/ccIlKMw3.s:1124   .text:000000000000050c .L0 
     /tmp/ccIlKMw3.s:1125   .text:000000000000050c .L0 
     /tmp/ccIlKMw3.s:1126   .text:000000000000050c .L0 
     /tmp/ccIlKMw3.s:1131   .text:0000000000000510 .L0 
  src/../h/Riscv.hpp:209    .text:0000000000000510 .L0 
     /tmp/ccIlKMw3.s:1141   .text:0000000000000514 .L0 
     /tmp/ccIlKMw3.s:1142   .text:0000000000000514 .L0 
     /tmp/ccIlKMw3.s:1147   .text:0000000000000518 .L0 
  src/../h/Riscv.hpp:136    .text:0000000000000518 .L0 
     /tmp/ccIlKMw3.s:1157   .text:000000000000051c .L0 
     /tmp/ccIlKMw3.s:1158   .text:000000000000051c .L0 
     /tmp/ccIlKMw3.s:1164   .text:0000000000000524 .L0 
     /tmp/ccIlKMw3.s:1165   .text:0000000000000524 .L0 
     /tmp/ccIlKMw3.s:1171   .text:0000000000000528 .L0 
     /tmp/ccIlKMw3.s:1172   .text:0000000000000528 .L0 
     /tmp/ccIlKMw3.s:1173   .text:0000000000000528 .L0 
     /tmp/ccIlKMw3.s:1176   .text:0000000000000530 .L0 
GAS LISTING /tmp/ccIlKMw3.s 			page 45


     /tmp/ccIlKMw3.s:1179   .text:0000000000000534 .L0 
     /tmp/ccIlKMw3.s:1180   .text:0000000000000534 .L0 
     /tmp/ccIlKMw3.s:1181   .text:0000000000000534 .L0 
     /tmp/ccIlKMw3.s:1184   .text:000000000000053c .L0 
     /tmp/ccIlKMw3.s:1187   .text:0000000000000540 .L0 
     /tmp/ccIlKMw3.s:1188   .text:0000000000000540 .L0 
     /tmp/ccIlKMw3.s:1189   .text:0000000000000540 .L0 
     /tmp/ccIlKMw3.s:1192   .text:0000000000000548 .L0 
     /tmp/ccIlKMw3.s:1195   .text:000000000000054c .L0 
     /tmp/ccIlKMw3.s:1196   .text:000000000000054c .L0 
     /tmp/ccIlKMw3.s:1197   .text:000000000000054c .L0 
     /tmp/ccIlKMw3.s:1200   .text:0000000000000554 .L0 
     /tmp/ccIlKMw3.s:1203   .text:0000000000000558 .L0 
     /tmp/ccIlKMw3.s:1204   .text:0000000000000558 .L0 
     /tmp/ccIlKMw3.s:1205   .text:0000000000000558 .L0 
     /tmp/ccIlKMw3.s:1208   .text:0000000000000560 .L0 
     /tmp/ccIlKMw3.s:1211   .text:0000000000000564 .L0 
     /tmp/ccIlKMw3.s:1212   .text:0000000000000564 .L0 
     /tmp/ccIlKMw3.s:1213   .text:0000000000000564 .L0 
     /tmp/ccIlKMw3.s:1216   .text:000000000000056c .L0 
     /tmp/ccIlKMw3.s:1219   .text:0000000000000570 .L0 
     /tmp/ccIlKMw3.s:1220   .text:0000000000000570 .L0 
     /tmp/ccIlKMw3.s:1221   .text:0000000000000570 .L0 
     /tmp/ccIlKMw3.s:1224   .text:0000000000000578 .L0 
     /tmp/ccIlKMw3.s:1227   .text:000000000000057c .L0 
     /tmp/ccIlKMw3.s:1228   .text:000000000000057c .L0 
     /tmp/ccIlKMw3.s:1229   .text:000000000000057c .L0 
     /tmp/ccIlKMw3.s:1232   .text:0000000000000584 .L0 
     /tmp/ccIlKMw3.s:1235   .text:0000000000000588 .L0 
     /tmp/ccIlKMw3.s:1236   .text:0000000000000588 .L0 
     /tmp/ccIlKMw3.s:1237   .text:0000000000000588 .L0 
     /tmp/ccIlKMw3.s:1240   .text:0000000000000590 .L0 
     /tmp/ccIlKMw3.s:1243   .text:0000000000000594 .L0 
     /tmp/ccIlKMw3.s:1244   .text:0000000000000594 .L0 
     /tmp/ccIlKMw3.s:1245   .text:0000000000000594 .L0 
     /tmp/ccIlKMw3.s:1248   .text:000000000000059c .L0 
     /tmp/ccIlKMw3.s:1251   .text:00000000000005a0 .L0 
     /tmp/ccIlKMw3.s:1252   .text:00000000000005a0 .L0 
     /tmp/ccIlKMw3.s:1253   .text:00000000000005a0 .L0 
     /tmp/ccIlKMw3.s:1256   .text:00000000000005a8 .L0 
     /tmp/ccIlKMw3.s:1259   .text:00000000000005ac .L0 
     /tmp/ccIlKMw3.s:1260   .text:00000000000005ac .L0 
     /tmp/ccIlKMw3.s:1261   .text:00000000000005ac .L0 
     /tmp/ccIlKMw3.s:1264   .text:00000000000005b4 .L0 
     /tmp/ccIlKMw3.s:1267   .text:00000000000005b8 .L0 
     /tmp/ccIlKMw3.s:1268   .text:00000000000005b8 .L0 
     /tmp/ccIlKMw3.s:1269   .text:00000000000005b8 .L0 
     /tmp/ccIlKMw3.s:1272   .text:00000000000005c0 .L0 
     /tmp/ccIlKMw3.s:1275   .text:00000000000005c4 .L0 
     /tmp/ccIlKMw3.s:1276   .text:00000000000005c4 .L0 
     /tmp/ccIlKMw3.s:1277   .text:00000000000005c4 .L0 
     /tmp/ccIlKMw3.s:1280   .text:00000000000005cc .L0 
     /tmp/ccIlKMw3.s:1284   .text:00000000000005d0 .L0 
     /tmp/ccIlKMw3.s:1295   .bss:0000000000000000 _ZN5Riscv16kernelMainCalledE
     /tmp/ccIlKMw3.s:1299   .bss:0000000000000001 _ZN5Riscv12finishSystemE
     /tmp/ccIlKMw3.s:1304   .bss:0000000000000008 _ZN5Riscv9totalTimeE
     /tmp/ccIlKMw3.s:1292   .bss:0000000000000000 .LANCHOR0
GAS LISTING /tmp/ccIlKMw3.s 			page 46


     /tmp/ccIlKMw3.s:1316   .text:00000000000005d0 .L0 
     /tmp/ccIlKMw3.s:55     .text:0000000000000038 .L0 
     /tmp/ccIlKMw3.s:307    .text:0000000000000134 .L0 
     /tmp/ccIlKMw3.s:327    .text:0000000000000160 .L0 
     /tmp/ccIlKMw3.s:348    .text:000000000000019c .L0 
     /tmp/ccIlKMw3.s:386    .text:00000000000001e8 .L0 
     /tmp/ccIlKMw3.s:397    .text:00000000000001fc .L0 
     /tmp/ccIlKMw3.s:511    .text:0000000000000278 .L0 
     /tmp/ccIlKMw3.s:555    .text:00000000000002ac .L0 
     /tmp/ccIlKMw3.s:630    .text:00000000000002f8 .L0 
     /tmp/ccIlKMw3.s:634    .text:0000000000000304 .L0 
     /tmp/ccIlKMw3.s:713    .text:0000000000000384 .L0 
     /tmp/ccIlKMw3.s:746    .text:00000000000003a4 .L0 
     /tmp/ccIlKMw3.s:771    .text:00000000000003c0 .L0 
     /tmp/ccIlKMw3.s:850    .text:000000000000040c .L0 
     /tmp/ccIlKMw3.s:856    .text:0000000000000420 .L0 
     /tmp/ccIlKMw3.s:866    .text:000000000000043c .L0 
     /tmp/ccIlKMw3.s:958    .text:0000000000000494 .L0 
     /tmp/ccIlKMw3.s:1046   .rodata:0000000000000000 .L53
     /tmp/ccIlKMw3.s:1038   .text:00000000000004ec .L0 
     /tmp/ccIlKMw3.s:310    .text:0000000000000144 .L29
     /tmp/ccIlKMw3.s:382    .text:00000000000001e4 .L19
     /tmp/ccIlKMw3.s:367    .text:00000000000001c8 .L20
     /tmp/ccIlKMw3.s:393    .text:00000000000001fc .L22
     /tmp/ccIlKMw3.s:388    .text:00000000000001f4 .L30
     /tmp/ccIlKMw3.s:480    .text:0000000000000264 .L32
     /tmp/ccIlKMw3.s:584    .text:00000000000002d4 .L37
     /tmp/ccIlKMw3.s:573    .text:00000000000002c8 .L36
     /tmp/ccIlKMw3.s:696    .text:0000000000000364 .L41
     /tmp/ccIlKMw3.s:979    .text:00000000000004b8 .L42
     /tmp/ccIlKMw3.s:966    .text:00000000000004ac .L43
     /tmp/ccIlKMw3.s:681    .text:0000000000000350 .L69
     /tmp/ccIlKMw3.s:920    .text:000000000000046c .L40
     /tmp/ccIlKMw3.s:789    .text:00000000000003e4 .L47
     /tmp/ccIlKMw3.s:777    .text:00000000000003d0 .L50
     /tmp/ccIlKMw3.s:950    .text:0000000000000490 .L70
     /tmp/ccIlKMw3.s:936    .text:0000000000000480 .L71
     /tmp/ccIlKMw3.s:882    .text:0000000000000454 .L49
     /tmp/ccIlKMw3.s:1123   .text:000000000000050c .L51
     /tmp/ccIlKMw3.s:329    .text:0000000000000168 .LEHB0
     /tmp/ccIlKMw3.s:301    .text:0000000000000134 .LFB33
     /tmp/ccIlKMw3.s:343    .text:000000000000018c .LEHE0
     /tmp/ccIlKMw3.s:349    .text:00000000000001a4 .LEHB1
     /tmp/ccIlKMw3.s:352    .text:00000000000001ac .LEHE1
     /tmp/ccIlKMw3.s:427    .text:000000000000023c .L24
     /tmp/ccIlKMw3.s:356    .text:00000000000001b0 .LEHB2
     /tmp/ccIlKMw3.s:401    .text:0000000000000210 .LEHE2
     /tmp/ccIlKMw3.s:435    .text:0000000000000250 .LEHB3
     /tmp/ccIlKMw3.s:438    .text:0000000000000258 .LEHE3
     /tmp/ccIlKMw3.s:1116   .text:0000000000000504 .L67
     /tmp/ccIlKMw3.s:1166   .text:0000000000000528 .L66
     /tmp/ccIlKMw3.s:1185   .text:0000000000000540 .L65
     /tmp/ccIlKMw3.s:1209   .text:0000000000000564 .L64
     /tmp/ccIlKMw3.s:1201   .text:0000000000000558 .L63
     /tmp/ccIlKMw3.s:1177   .text:0000000000000534 .L62
     /tmp/ccIlKMw3.s:1193   .text:000000000000054c .L61
     /tmp/ccIlKMw3.s:1225   .text:000000000000057c .L60
GAS LISTING /tmp/ccIlKMw3.s 			page 47


     /tmp/ccIlKMw3.s:1249   .text:00000000000005a0 .L59
     /tmp/ccIlKMw3.s:1233   .text:0000000000000588 .L58
     /tmp/ccIlKMw3.s:1241   .text:0000000000000594 .L57
     /tmp/ccIlKMw3.s:1217   .text:0000000000000570 .L56
     /tmp/ccIlKMw3.s:1257   .text:00000000000005ac .L55
     /tmp/ccIlKMw3.s:1265   .text:00000000000005b8 .L54
     /tmp/ccIlKMw3.s:1273   .text:00000000000005c4 .L52
     /tmp/ccIlKMw3.s:3851   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccIlKMw3.s:5572   .debug_str:0000000000001097 .LASF317
     /tmp/ccIlKMw3.s:5194   .debug_str:00000000000003d4 .LASF318
     /tmp/ccIlKMw3.s:5620   .debug_str:00000000000012a2 .LASF319
     /tmp/ccIlKMw3.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccIlKMw3.s:1307   .text:00000000000005d0 .Letext0
     /tmp/ccIlKMw3.s:5088   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccIlKMw3.s:5308   .debug_str:00000000000007d1 .LASF0
     /tmp/ccIlKMw3.s:5346   .debug_str:000000000000090d .LASF1
     /tmp/ccIlKMw3.s:5506   .debug_str:0000000000000e70 .LASF2
     /tmp/ccIlKMw3.s:5524   .debug_str:0000000000000f06 .LASF4
     /tmp/ccIlKMw3.s:5328   .debug_str:0000000000000879 .LASF3
     /tmp/ccIlKMw3.s:5114   .debug_str:00000000000000eb .LASF5
     /tmp/ccIlKMw3.s:5462   .debug_str:0000000000000d38 .LASF6
     /tmp/ccIlKMw3.s:5450   .debug_str:0000000000000ce6 .LASF7
     /tmp/ccIlKMw3.s:5336   .debug_str:00000000000008c6 .LASF8
     /tmp/ccIlKMw3.s:5270   .debug_str:0000000000000675 .LASF9
     /tmp/ccIlKMw3.s:5282   .debug_str:00000000000006e7 .LASF10
     /tmp/ccIlKMw3.s:5180   .debug_str:0000000000000371 .LASF11
     /tmp/ccIlKMw3.s:5258   .debug_str:0000000000000633 .LASF12
     /tmp/ccIlKMw3.s:5196   .debug_str:00000000000003e2 .LASF13
     /tmp/ccIlKMw3.s:5178   .debug_str:0000000000000361 .LASF14
     /tmp/ccIlKMw3.s:5578   .debug_str:0000000000001184 .LASF15
     /tmp/ccIlKMw3.s:5234   .debug_str:0000000000000528 .LASF16
     /tmp/ccIlKMw3.s:5562   .debug_str:000000000000101e .LASF17
     /tmp/ccIlKMw3.s:5672   .debug_str:0000000000001445 .LASF111
     /tmp/ccIlKMw3.s:5484   .debug_str:0000000000000dd3 .LASF21
     /tmp/ccIlKMw3.s:5356   .debug_str:0000000000000950 .LASF18
     /tmp/ccIlKMw3.s:5246   .debug_str:00000000000005af .LASF19
     /tmp/ccIlKMw3.s:5692   .debug_str:00000000000014f3 .LASF20
     /tmp/ccIlKMw3.s:5658   .debug_str:00000000000013c8 .LASF22
     /tmp/ccIlKMw3.s:5252   .debug_str:00000000000005ef .LASF23
     /tmp/ccIlKMw3.s:5608   .debug_str:000000000000123f .LASF24
     /tmp/ccIlKMw3.s:5208   .debug_str:000000000000045e .LASF25
     /tmp/ccIlKMw3.s:5302   .debug_str:00000000000007a8 .LASF46
     /tmp/ccIlKMw3.s:5566   .debug_str:0000000000001043 .LASF48
     /tmp/ccIlKMw3.s:5664   .debug_str:00000000000013f2 .LASF64
     /tmp/ccIlKMw3.s:5702   .debug_str:0000000000001544 .LASF26
     /tmp/ccIlKMw3.s:5542   .debug_str:0000000000000f87 .LASF28
     /tmp/ccIlKMw3.s:5406   .debug_str:0000000000000b46 .LASF27
     /tmp/ccIlKMw3.s:5384   .debug_str:0000000000000a6e .LASF29
     /tmp/ccIlKMw3.s:5230   .debug_str:000000000000050b .LASF30
     /tmp/ccIlKMw3.s:5102   .debug_str:000000000000005b .LASF31
     /tmp/ccIlKMw3.s:5388   .debug_str:0000000000000aa5 .LASF38
     /tmp/ccIlKMw3.s:5666   .debug_str:0000000000001403 .LASF40
     /tmp/ccIlKMw3.s:5174   .debug_str:000000000000033d .LASF32
     /tmp/ccIlKMw3.s:5362   .debug_str:000000000000098d .LASF33
     /tmp/ccIlKMw3.s:5224   .debug_str:00000000000004ba .LASF34
     /tmp/ccIlKMw3.s:5186   .debug_str:000000000000038e .LASF35
     /tmp/ccIlKMw3.s:5320   .debug_str:0000000000000837 .LASF36
GAS LISTING /tmp/ccIlKMw3.s 			page 48


     /tmp/ccIlKMw3.s:5202   .debug_str:0000000000000428 .LASF37
     /tmp/ccIlKMw3.s:5152   .debug_str:0000000000000272 .LASF39
     /tmp/ccIlKMw3.s:5272   .debug_str:0000000000000685 .LASF41
     /tmp/ccIlKMw3.s:5534   .debug_str:0000000000000f37 .LASF42
     /tmp/ccIlKMw3.s:5242   .debug_str:000000000000057c .LASF43
     /tmp/ccIlKMw3.s:5314   .debug_str:0000000000000810 .LASF44
     /tmp/ccIlKMw3.s:5684   .debug_str:00000000000014ab .LASF45
     /tmp/ccIlKMw3.s:5648   .debug_str:0000000000001390 .LASF47
     /tmp/ccIlKMw3.s:5634   .debug_str:0000000000001330 .LASF49
     /tmp/ccIlKMw3.s:5502   .debug_str:0000000000000e5c .LASF50
     /tmp/ccIlKMw3.s:5430   .debug_str:0000000000000c20 .LASF51
     /tmp/ccIlKMw3.s:5470   .debug_str:0000000000000d61 .LASF52
     /tmp/ccIlKMw3.s:5478   .debug_str:0000000000000da1 .LASF53
     /tmp/ccIlKMw3.s:5420   .debug_str:0000000000000bb1 .LASF54
     /tmp/ccIlKMw3.s:5338   .debug_str:00000000000008d9 .LASF55
     /tmp/ccIlKMw3.s:5686   .debug_str:00000000000014c5 .LASF56
     /tmp/ccIlKMw3.s:5614   .debug_str:0000000000001261 .LASF57
     /tmp/ccIlKMw3.s:5414   .debug_str:0000000000000b81 .LASF58
     /tmp/ccIlKMw3.s:5428   .debug_str:0000000000000c0c .LASF59
     /tmp/ccIlKMw3.s:5400   .debug_str:0000000000000b21 .LASF60
     /tmp/ccIlKMw3.s:5482   .debug_str:0000000000000dbf .LASF61
     /tmp/ccIlKMw3.s:5736   .debug_str:0000000000001669 .LASF62
     /tmp/ccIlKMw3.s:5318   .debug_str:0000000000000823 .LASF63
     /tmp/ccIlKMw3.s:5708   .debug_str:000000000000156b .LASF65
     /tmp/ccIlKMw3.s:5574   .debug_str:000000000000115b .LASF66
     /tmp/ccIlKMw3.s:5528   .debug_str:0000000000000f15 .LASF67
     /tmp/ccIlKMw3.s:5530   .debug_str:0000000000000f28 .LASF68
     /tmp/ccIlKMw3.s:5228   .debug_str:00000000000004f8 .LASF69
     /tmp/ccIlKMw3.s:5222   .debug_str:00000000000004b4 .LASF70
     /tmp/ccIlKMw3.s:5122   .debug_str:000000000000012b .LASF71
     /tmp/ccIlKMw3.s:5316   .debug_str:000000000000081d .LASF72
     /tmp/ccIlKMw3.s:5212   .debug_str:000000000000047d .LASF73
     /tmp/ccIlKMw3.s:5166   .debug_str:00000000000002e9 .LASF74
     /tmp/ccIlKMw3.s:5536   .debug_str:0000000000000f45 .LASF75
     /tmp/ccIlKMw3.s:5116   .debug_str:00000000000000f2 .LASF76
     /tmp/ccIlKMw3.s:5512   .debug_str:0000000000000e8d .LASF77
     /tmp/ccIlKMw3.s:5504   .debug_str:0000000000000e65 .LASF78
     /tmp/ccIlKMw3.s:5722   .debug_str:00000000000015e4 .LASF79
     /tmp/ccIlKMw3.s:5510   .debug_str:0000000000000e86 .LASF80
     /tmp/ccIlKMw3.s:5176   .debug_str:000000000000034e .LASF81
     /tmp/ccIlKMw3.s:5558   .debug_str:0000000000001009 .LASF82
     /tmp/ccIlKMw3.s:5518   .debug_str:0000000000000ec4 .LASF83
     /tmp/ccIlKMw3.s:5674   .debug_str:000000000000144b .LASF84
     /tmp/ccIlKMw3.s:5698   .debug_str:0000000000001511 .LASF85
     /tmp/ccIlKMw3.s:5668   .debug_str:0000000000001421 .LASF86
     /tmp/ccIlKMw3.s:5390   .debug_str:0000000000000ab5 .LASF87
     /tmp/ccIlKMw3.s:5492   .debug_str:0000000000000e1f .LASF88
     /tmp/ccIlKMw3.s:5292   .debug_str:000000000000076a .LASF89
     /tmp/ccIlKMw3.s:5300   .debug_str:00000000000007a2 .LASF90
     /tmp/ccIlKMw3.s:5204   .debug_str:0000000000000447 .LASF91
     /tmp/ccIlKMw3.s:5296   .debug_str:0000000000000782 .LASF92
     /tmp/ccIlKMw3.s:5304   .debug_str:00000000000007b3 .LASF93
     /tmp/ccIlKMw3.s:5640   .debug_str:0000000000001358 .LASF94
     /tmp/ccIlKMw3.s:5280   .debug_str:00000000000006cb .LASF95
     /tmp/ccIlKMw3.s:5456   .debug_str:0000000000000d0a .LASF96
     /tmp/ccIlKMw3.s:5334   .debug_str:00000000000008a4 .LASF97
     /tmp/ccIlKMw3.s:5146   .debug_str:0000000000000242 .LASF98
GAS LISTING /tmp/ccIlKMw3.s 			page 49


     /tmp/ccIlKMw3.s:5378   .debug_str:0000000000000a30 .LASF99
     /tmp/ccIlKMw3.s:5494   .debug_str:0000000000000e25 .LASF100
     /tmp/ccIlKMw3.s:5108   .debug_str:00000000000000a7 .LASF101
     /tmp/ccIlKMw3.s:5154   .debug_str:000000000000027c .LASF102
     /tmp/ccIlKMw3.s:5638   .debug_str:000000000000134c .LASF103
     /tmp/ccIlKMw3.s:5156   .debug_str:000000000000028b .LASF104
     /tmp/ccIlKMw3.s:5404   .debug_str:0000000000000b34 .LASF105
     /tmp/ccIlKMw3.s:5284   .debug_str:00000000000006f5 .LASF106
     /tmp/ccIlKMw3.s:5326   .debug_str:0000000000000866 .LASF107
     /tmp/ccIlKMw3.s:5172   .debug_str:0000000000000329 .LASF108
     /tmp/ccIlKMw3.s:5602   .debug_str:000000000000121b .LASF109
     /tmp/ccIlKMw3.s:5376   .debug_str:0000000000000a2b .LASF110
     /tmp/ccIlKMw3.s:5444   .debug_str:0000000000000ca8 .LASF112
     /tmp/ccIlKMw3.s:5548   .debug_str:0000000000000fb3 .LASF115
     /tmp/ccIlKMw3.s:5344   .debug_str:0000000000000908 .LASF113
     /tmp/ccIlKMw3.s:5182   .debug_str:0000000000000380 .LASF114
     /tmp/ccIlKMw3.s:5266   .debug_str:000000000000065f .LASF116
     /tmp/ccIlKMw3.s:5348   .debug_str:0000000000000920 .LASF117
     /tmp/ccIlKMw3.s:5354   .debug_str:000000000000093d .LASF118
     /tmp/ccIlKMw3.s:5264   .debug_str:0000000000000656 .LASF119
     /tmp/ccIlKMw3.s:5740   .debug_str:000000000000168f .LASF120
     /tmp/ccIlKMw3.s:5394   .debug_str:0000000000000aea .LASF121
     /tmp/ccIlKMw3.s:5118   .debug_str:00000000000000fd .LASF123
     /tmp/ccIlKMw3.s:5584   .debug_str:00000000000011b2 .LASF122
     /tmp/ccIlKMw3.s:5396   .debug_str:0000000000000af4 .LASF124
     /tmp/ccIlKMw3.s:5662   .debug_str:00000000000013e7 .LASF125
     /tmp/ccIlKMw3.s:5618   .debug_str:000000000000127f .LASF126
     /tmp/ccIlKMw3.s:5580   .debug_str:0000000000001190 .LASF127
     /tmp/ccIlKMw3.s:5110   .debug_str:00000000000000af .LASF128
     /tmp/ccIlKMw3.s:5678   .debug_str:000000000000145a .LASF129
     /tmp/ccIlKMw3.s:5106   .debug_str:0000000000000079 .LASF130
     /tmp/ccIlKMw3.s:5592   .debug_str:00000000000011db .LASF131
     /tmp/ccIlKMw3.s:5290   .debug_str:000000000000073b .LASF132
     /tmp/ccIlKMw3.s:5096   .debug_str:000000000000002b .LASF133
     /tmp/ccIlKMw3.s:5432   .debug_str:0000000000000c35 .LASF134
     /tmp/ccIlKMw3.s:5236   .debug_str:000000000000053e .LASF135
     /tmp/ccIlKMw3.s:5682   .debug_str:0000000000001483 .LASF136
     /tmp/ccIlKMw3.s:5564   .debug_str:0000000000001034 .LASF137
     /tmp/ccIlKMw3.s:5226   .debug_str:00000000000004d1 .LASF138
     /tmp/ccIlKMw3.s:5260   .debug_str:0000000000000642 .LASF139
     /tmp/ccIlKMw3.s:5386   .debug_str:0000000000000a86 .LASF140
     /tmp/ccIlKMw3.s:5128   .debug_str:0000000000000184 .LASF141
     /tmp/ccIlKMw3.s:5434   .debug_str:0000000000000c5f .LASF142
     /tmp/ccIlKMw3.s:5598   .debug_str:0000000000001206 .LASF143
     /tmp/ccIlKMw3.s:5170   .debug_str:0000000000000323 .LASF144
     /tmp/ccIlKMw3.s:5546   .debug_str:0000000000000fab .LASF145
     /tmp/ccIlKMw3.s:5188   .debug_str:00000000000003b2 .LASF146
     /tmp/ccIlKMw3.s:5158   .debug_str:000000000000029e .LASF147
     /tmp/ccIlKMw3.s:5454   .debug_str:0000000000000d02 .LASF148
     /tmp/ccIlKMw3.s:5342   .debug_str:00000000000008ff .LASF149
     /tmp/ccIlKMw3.s:5526   .debug_str:0000000000000f0d .LASF150
     /tmp/ccIlKMw3.s:5294   .debug_str:000000000000077c .LASF151
     /tmp/ccIlKMw3.s:5628   .debug_str:000000000000130e .LASF152
     /tmp/ccIlKMw3.s:5410   .debug_str:0000000000000b60 .LASF320
     /tmp/ccIlKMw3.s:5436   .debug_str:0000000000000c7d .LASF153
     /tmp/ccIlKMw3.s:5676   .debug_str:0000000000001455 .LASF154
     /tmp/ccIlKMw3.s:5718   .debug_str:00000000000015af .LASF155
GAS LISTING /tmp/ccIlKMw3.s 			page 50


     /tmp/ccIlKMw3.s:5712   .debug_str:0000000000001586 .LASF156
     /tmp/ccIlKMw3.s:5612   .debug_str:0000000000001251 .LASF157
     /tmp/ccIlKMw3.s:5216   .debug_str:00000000000004a0 .LASF158
     /tmp/ccIlKMw3.s:5130   .debug_str:000000000000018a .LASF159
     /tmp/ccIlKMw3.s:5352   .debug_str:0000000000000937 .LASF160
     /tmp/ccIlKMw3.s:5440   .debug_str:0000000000000c8c .LASF161
     /tmp/ccIlKMw3.s:5606   .debug_str:0000000000001237 .LASF162
     /tmp/ccIlKMw3.s:5214   .debug_str:000000000000048f .LASF163
     /tmp/ccIlKMw3.s:5382   .debug_str:0000000000000a61 .LASF168
     /tmp/ccIlKMw3.s:5364   .debug_str:00000000000009ab .LASF170
     /tmp/ccIlKMw3.s:5726   .debug_str:0000000000001611 .LASF164
     /tmp/ccIlKMw3.s:5262   .debug_str:000000000000064a .LASF165
     /tmp/ccIlKMw3.s:5310   .debug_str:00000000000007de .LASF166
     /tmp/ccIlKMw3.s:5322   .debug_str:0000000000000849 .LASF167
     /tmp/ccIlKMw3.s:5538   .debug_str:0000000000000f60 .LASF169
     /tmp/ccIlKMw3.s:5210   .debug_str:000000000000046a .LASF171
     /tmp/ccIlKMw3.s:5474   .debug_str:0000000000000d8b .LASF172
     /tmp/ccIlKMw3.s:5570   .debug_str:000000000000107b .LASF173
     /tmp/ccIlKMw3.s:5408   .debug_str:0000000000000b51 .LASF174
     /tmp/ccIlKMw3.s:5098   .debug_str:000000000000003c .LASF175
     /tmp/ccIlKMw3.s:5696   .debug_str:0000000000001502 .LASF176
     /tmp/ccIlKMw3.s:5446   .debug_str:0000000000000cb8 .LASF177
     /tmp/ccIlKMw3.s:5560   .debug_str:0000000000001010 .LASF178
     /tmp/ccIlKMw3.s:5468   .debug_str:0000000000000d55 .LASF179
     /tmp/ccIlKMw3.s:5092   .debug_str:000000000000000f .LASF180
     /tmp/ccIlKMw3.s:5426   .debug_str:0000000000000bfc .LASF181
     /tmp/ccIlKMw3.s:5498   .debug_str:0000000000000e36 .LASF182
     /tmp/ccIlKMw3.s:5704   .debug_str:0000000000001553 .LASF183
     /tmp/ccIlKMw3.s:5330   .debug_str:000000000000088b .LASF184
     /tmp/ccIlKMw3.s:5552   .debug_str:0000000000000fd6 .LASF185
     /tmp/ccIlKMw3.s:5716   .debug_str:0000000000001599 .LASF186
     /tmp/ccIlKMw3.s:5586   .debug_str:00000000000011bb .LASF187
     /tmp/ccIlKMw3.s:5554   .debug_str:0000000000000fe1 .LASF188
     /tmp/ccIlKMw3.s:5532   .debug_str:0000000000000f2f .LASF189
     /tmp/ccIlKMw3.s:5448   .debug_str:0000000000000cd2 .LASF190
     /tmp/ccIlKMw3.s:5418   .debug_str:0000000000000b92 .LASF191
     /tmp/ccIlKMw3.s:5200   .debug_str:0000000000000416 .LASF192
     /tmp/ccIlKMw3.s:5700   .debug_str:0000000000001527 .LASF193
     /tmp/ccIlKMw3.s:5742   .debug_str:0000000000001699 .LASF194
     /tmp/ccIlKMw3.s:5422   .debug_str:0000000000000bb8 .LASF195
     /tmp/ccIlKMw3.s:5516   .debug_str:0000000000000eb1 .LASF196
     /tmp/ccIlKMw3.s:5540   .debug_str:0000000000000f69 .LASF197
     /tmp/ccIlKMw3.s:5654   .debug_str:00000000000013aa .LASF198
     /tmp/ccIlKMw3.s:5738   .debug_str:0000000000001671 .LASF199
     /tmp/ccIlKMw3.s:5724   .debug_str:00000000000015fc .LASF200
     /tmp/ccIlKMw3.s:5568   .debug_str:000000000000105b .LASF201
     /tmp/ccIlKMw3.s:5522   .debug_str:0000000000000efd .LASF202
     /tmp/ccIlKMw3.s:5480   .debug_str:0000000000000db4 .LASF203
     /tmp/ccIlKMw3.s:5616   .debug_str:0000000000001275 .LASF204
     /tmp/ccIlKMw3.s:5442   .debug_str:0000000000000c9c .LASF205
     /tmp/ccIlKMw3.s:5710   .debug_str:0000000000001578 .LASF206
     /tmp/ccIlKMw3.s:5140   .debug_str:00000000000001f9 .LASF207
     /tmp/ccIlKMw3.s:5144   .debug_str:000000000000022d .LASF208
     /tmp/ccIlKMw3.s:5168   .debug_str:00000000000002f7 .LASF209
     /tmp/ccIlKMw3.s:5730   .debug_str:000000000000162d .LASF210
     /tmp/ccIlKMw3.s:5164   .debug_str:00000000000002d8 .LASF211
     /tmp/ccIlKMw3.s:5100   .debug_str:0000000000000056 .LASF212
GAS LISTING /tmp/ccIlKMw3.s 			page 51


     /tmp/ccIlKMw3.s:5650   .debug_str:0000000000001399 .LASF213
     /tmp/ccIlKMw3.s:5370   .debug_str:00000000000009e8 .LASF214
     /tmp/ccIlKMw3.s:5220   .debug_str:00000000000004ae .LASF215
     /tmp/ccIlKMw3.s:5632   .debug_str:0000000000001328 .LASF216
     /tmp/ccIlKMw3.s:5150   .debug_str:0000000000000261 .LASF217
     /tmp/ccIlKMw3.s:5488   .debug_str:0000000000000df2 .LASF218
     /tmp/ccIlKMw3.s:5278   .debug_str:00000000000006b7 .LASF219
     /tmp/ccIlKMw3.s:5138   .debug_str:00000000000001ed .LASF220
     /tmp/ccIlKMw3.s:5486   .debug_str:0000000000000dde .LASF221
     /tmp/ccIlKMw3.s:5218   .debug_str:00000000000004a9 .LASF222
     /tmp/ccIlKMw3.s:5550   .debug_str:0000000000000fbf .LASF223
     /tmp/ccIlKMw3.s:5582   .debug_str:00000000000011ab .LASF224
     /tmp/ccIlKMw3.s:5500   .debug_str:0000000000000e43 .LASF225
     /tmp/ccIlKMw3.s:5094   .debug_str:000000000000001f .LASF226
     /tmp/ccIlKMw3.s:5514   .debug_str:0000000000000ea5 .LASF227
     /tmp/ccIlKMw3.s:5380   .debug_str:0000000000000a4d .LASF228
     /tmp/ccIlKMw3.s:5298   .debug_str:000000000000078d .LASF229
     /tmp/ccIlKMw3.s:5184   .debug_str:0000000000000385 .LASF230
     /tmp/ccIlKMw3.s:5192   .debug_str:00000000000003ca .LASF231
     /tmp/ccIlKMw3.s:5412   .debug_str:0000000000000b78 .LASF232
     /tmp/ccIlKMw3.s:5594   .debug_str:00000000000011f0 .LASF233
     /tmp/ccIlKMw3.s:5090   .debug_str:0000000000000000 .LASF234
     /tmp/ccIlKMw3.s:5288   .debug_str:0000000000000719 .LASF235
     /tmp/ccIlKMw3.s:5630   .debug_str:0000000000001319 .LASF236
     /tmp/ccIlKMw3.s:5576   .debug_str:0000000000001162 .LASF237
     /tmp/ccIlKMw3.s:5372   .debug_str:00000000000009f0 .LASF238
     /tmp/ccIlKMw3.s:5198   .debug_str:00000000000003f2 .LASF239
     /tmp/ccIlKMw3.s:5590   .debug_str:00000000000011cb .LASF240
     /tmp/ccIlKMw3.s:5472   .debug_str:0000000000000d68 .LASF241
     /tmp/ccIlKMw3.s:5350   .debug_str:000000000000092e .LASF242
     /tmp/ccIlKMw3.s:5306   .debug_str:00000000000007cb .LASF243
     /tmp/ccIlKMw3.s:5734   .debug_str:0000000000001651 .LASF244
     /tmp/ccIlKMw3.s:5104   .debug_str:0000000000000071 .LASF245
     /tmp/ccIlKMw3.s:5368   .debug_str:00000000000009ce .LASF246
     /tmp/ccIlKMw3.s:5324   .debug_str:0000000000000856 .LASF247
     /tmp/ccIlKMw3.s:5424   .debug_str:0000000000000bd9 .LASF248
     /tmp/ccIlKMw3.s:5680   .debug_str:0000000000001470 .LASF249
     /tmp/ccIlKMw3.s:5520   .debug_str:0000000000000ed7 .LASF250
     /tmp/ccIlKMw3.s:5714   .debug_str:000000000000158c .LASF251
     /tmp/ccIlKMw3.s:5126   .debug_str:0000000000000160 .LASF252
     /tmp/ccIlKMw3.s:5588   .debug_str:00000000000011c6 .LASF253
     /tmp/ccIlKMw3.s:5690   .debug_str:00000000000014e6 .LASF254
     /tmp/ccIlKMw3.s:5460   .debug_str:0000000000000d28 .LASF255
     /tmp/ccIlKMw3.s:5626   .debug_str:00000000000012fc .LASF256
     /tmp/ccIlKMw3.s:5254   .debug_str:00000000000005fb .LASF257
     /tmp/ccIlKMw3.s:5160   .debug_str:00000000000002a7 .LASF258
     /tmp/ccIlKMw3.s:5124   .debug_str:000000000000013d .LASF259
     /tmp/ccIlKMw3.s:5416   .debug_str:0000000000000b89 .LASF260
     /tmp/ccIlKMw3.s:5274   .debug_str:000000000000069c .LASF261
     /tmp/ccIlKMw3.s:5248   .debug_str:00000000000005b8 .LASF262
     /tmp/ccIlKMw3.s:5438   .debug_str:0000000000000c82 .LASF263
     /tmp/ccIlKMw3.s:5402   .debug_str:0000000000000b29 .LASF264
     /tmp/ccIlKMw3.s:5466   .debug_str:0000000000000d4b .LASF265
     /tmp/ccIlKMw3.s:5656   .debug_str:00000000000013bd .LASF266
     /tmp/ccIlKMw3.s:5596   .debug_str:00000000000011fb .LASF267
     /tmp/ccIlKMw3.s:5652   .debug_str:000000000000139e .LASF268
     /tmp/ccIlKMw3.s:5120   .debug_str:000000000000011e .LASF269
GAS LISTING /tmp/ccIlKMw3.s 			page 52


     /tmp/ccIlKMw3.s:5398   .debug_str:0000000000000b15 .LASF270
     /tmp/ccIlKMw3.s:5464   .debug_str:0000000000000d3f .LASF271
     /tmp/ccIlKMw3.s:5556   .debug_str:0000000000000ff7 .LASF272
     /tmp/ccIlKMw3.s:5240   .debug_str:000000000000055a .LASF273
     /tmp/ccIlKMw3.s:5646   .debug_str:000000000000137e .LASF274
     /tmp/ccIlKMw3.s:5312   .debug_str:00000000000007ee .LASF275
     /tmp/ccIlKMw3.s:5644   .debug_str:000000000000136c .LASF276
     /tmp/ccIlKMw3.s:5490   .debug_str:0000000000000dfd .LASF277
     /tmp/ccIlKMw3.s:5340   .debug_str:00000000000008ec .LASF278
     /tmp/ccIlKMw3.s:5162   .debug_str:00000000000002b5 .LASF279
     /tmp/ccIlKMw3.s:5232   .debug_str:0000000000000515 .LASF280
     /tmp/ccIlKMw3.s:5250   .debug_str:00000000000005cc .LASF281
     /tmp/ccIlKMw3.s:5132   .debug_str:000000000000019d .LASF282
     /tmp/ccIlKMw3.s:5728   .debug_str:000000000000161e .LASF283
     /tmp/ccIlKMw3.s:5392   .debug_str:0000000000000acb .LASF284
     /tmp/ccIlKMw3.s:5688   .debug_str:00000000000014cd .LASF285
     /tmp/ccIlKMw3.s:5374   .debug_str:0000000000000a01 .LASF286
     /tmp/ccIlKMw3.s:5358   .debug_str:0000000000000959 .LASF287
     /tmp/ccIlKMw3.s:5720   .debug_str:00000000000015bb .LASF288
     /tmp/ccIlKMw3.s:5256   .debug_str:0000000000000622 .LASF289
     /tmp/ccIlKMw3.s:5604   .debug_str:0000000000001225 .LASF290
     /tmp/ccIlKMw3.s:5268   .debug_str:0000000000000668 .LASF291
     /tmp/ccIlKMw3.s:5706   .debug_str:000000000000155e .LASF292
     /tmp/ccIlKMw3.s:5286   .debug_str:0000000000000708 .LASF293
     /tmp/ccIlKMw3.s:5332   .debug_str:0000000000000898 .LASF294
     /tmp/ccIlKMw3.s:5360   .debug_str:0000000000000971 .LASF295
     /tmp/ccIlKMw3.s:5142   .debug_str:0000000000000221 .LASF296
     /tmp/ccIlKMw3.s:5136   .debug_str:00000000000001d1 .LASF297
     /tmp/ccIlKMw3.s:5148   .debug_str:0000000000000251 .LASF298
     /tmp/ccIlKMw3.s:5624   .debug_str:00000000000012da .LASF299
     /tmp/ccIlKMw3.s:5452   .debug_str:0000000000000cf9 .LASF321
     /tmp/ccIlKMw3.s:5670   .debug_str:000000000000142b .LASF322
     /tmp/ccIlKMw3.s:5622   .debug_str:00000000000012c5 .LASF300
     /tmp/ccIlKMw3.s:5134   .debug_str:00000000000001b8 .LASF301
     /tmp/ccIlKMw3.s:5732   .debug_str:0000000000001634 .LASF323
     /tmp/ccIlKMw3.s:544    .text:00000000000002a0 .LFB39
     /tmp/ccIlKMw3.s:604    .text:00000000000002e0 .LFE39
     /tmp/ccIlKMw3.s:562    .text:00000000000002c0 .LBB47
     /tmp/ccIlKMw3.s:575    .text:00000000000002c8 .LBE47
     /tmp/ccIlKMw3.s:4888   .debug_loc:0000000000000000 .LLST4
     /tmp/ccIlKMw3.s:588    .text:00000000000002d4 .LBB49
     /tmp/ccIlKMw3.s:600    .text:00000000000002dc .LBE49
     /tmp/ccIlKMw3.s:4897   .debug_loc:0000000000000026 .LLST5
     /tmp/ccIlKMw3.s:491    .text:0000000000000268 .LFB38
     /tmp/ccIlKMw3.s:538    .text:00000000000002a0 .LFE38
     /tmp/ccIlKMw3.s:5636   .debug_str:0000000000001345 .LASF302
     /tmp/ccIlKMw3.s:470    .text:0000000000000258 .LFB37
     /tmp/ccIlKMw3.s:485    .text:0000000000000268 .LFE37
     /tmp/ccIlKMw3.s:268    .text:0000000000000114 .LFB36
     /tmp/ccIlKMw3.s:295    .text:0000000000000134 .LFE36
     /tmp/ccIlKMw3.s:236    .text:00000000000000ec .LFB35
     /tmp/ccIlKMw3.s:262    .text:0000000000000114 .LFE35
     /tmp/ccIlKMw3.s:4906   .debug_loc:000000000000004c .LLST2
     /tmp/ccIlKMw3.s:251    .text:0000000000000104 .LVL11
     /tmp/ccIlKMw3.s:10     .text:0000000000000000 .LFB34
     /tmp/ccIlKMw3.s:36     .text:0000000000000028 .LFE34
     /tmp/ccIlKMw3.s:25     .text:0000000000000018 .LVL0
GAS LISTING /tmp/ccIlKMw3.s 			page 53


     /tmp/ccIlKMw3.s:440    .text:0000000000000258 .LFE33
     /tmp/ccIlKMw3.s:5276   .debug_str:00000000000006af .LASF303
     /tmp/ccIlKMw3.s:4920   .debug_loc:0000000000000085 .LLST3
     /tmp/ccIlKMw3.s:332    .text:0000000000000170 .LVL13
     /tmp/ccIlKMw3.s:337    .text:000000000000017c .LVL14
     /tmp/ccIlKMw3.s:342    .text:000000000000018c .LVL15
     /tmp/ccIlKMw3.s:351    .text:00000000000001ac .LVL16
     /tmp/ccIlKMw3.s:358    .text:00000000000001b8 .LVL17
     /tmp/ccIlKMw3.s:362    .text:00000000000001c0 .LVL18
     /tmp/ccIlKMw3.s:366    .text:00000000000001c8 .LVL19
     /tmp/ccIlKMw3.s:373    .text:00000000000001d4 .LVL20
     /tmp/ccIlKMw3.s:379    .text:00000000000001e0 .LVL21
     /tmp/ccIlKMw3.s:392    .text:00000000000001fc .LVL22
     /tmp/ccIlKMw3.s:400    .text:0000000000000210 .LVL23
     /tmp/ccIlKMw3.s:407    .text:000000000000021c .LVL24
     /tmp/ccIlKMw3.s:411    .text:0000000000000224 .LVL25
     /tmp/ccIlKMw3.s:433    .text:000000000000024c .LVL27
     /tmp/ccIlKMw3.s:437    .text:0000000000000258 .LVL28
     /tmp/ccIlKMw3.s:610    .text:00000000000002e0 .LFB32
     /tmp/ccIlKMw3.s:1285   .text:00000000000005d0 .LFE32
     /tmp/ccIlKMw3.s:5112   .debug_str:00000000000000e4 .LASF304
     /tmp/ccIlKMw3.s:4927   .debug_loc:00000000000000a8 .LLST6
     /tmp/ccIlKMw3.s:5062   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccIlKMw3.s:5610   .debug_str:000000000000124c .LASF305
     /tmp/ccIlKMw3.s:5544   .debug_str:0000000000000fa3 .LASF306
     /tmp/ccIlKMw3.s:795    .text:00000000000003e4 .LBB61
     /tmp/ccIlKMw3.s:811    .text:00000000000003f0 .LBE61
     /tmp/ccIlKMw3.s:815    .text:00000000000003f4 .LBB63
     /tmp/ccIlKMw3.s:830    .text:0000000000000400 .LBE63
     /tmp/ccIlKMw3.s:835    .text:0000000000000404 .LBB65
     /tmp/ccIlKMw3.s:847    .text:000000000000040c .LBE65
     /tmp/ccIlKMw3.s:4954   .debug_loc:000000000000012a .LLST10
     /tmp/ccIlKMw3.s:869    .text:0000000000000448 .LBB67
     /tmp/ccIlKMw3.s:877    .text:000000000000044c .LBE67
     /tmp/ccIlKMw3.s:4962   .debug_loc:000000000000014e .LLST11
     /tmp/ccIlKMw3.s:887    .text:0000000000000458 .LBB69
     /tmp/ccIlKMw3.s:898    .text:000000000000045c .LBE69
     /tmp/ccIlKMw3.s:4969   .debug_loc:0000000000000171 .LLST12
     /tmp/ccIlKMw3.s:903    .text:0000000000000460 .LBB71
     /tmp/ccIlKMw3.s:914    .text:0000000000000464 .LBE71
     /tmp/ccIlKMw3.s:4976   .debug_loc:0000000000000194 .LLST13
     /tmp/ccIlKMw3.s:863    .text:000000000000043c .LVL54
     /tmp/ccIlKMw3.s:918    .text:000000000000046c .LVL61
     /tmp/ccIlKMw3.s:947    .text:000000000000048c .LVL62
     /tmp/ccIlKMw3.s:4983   .debug_loc:00000000000001b7 .LLST7
     /tmp/ccIlKMw3.s:5496   .debug_str:0000000000000e2c .LASF307
     /tmp/ccIlKMw3.s:4994   .debug_loc:00000000000001ed .LLST8
     /tmp/ccIlKMw3.s:5001   .debug_loc:0000000000000210 .LLST9
     /tmp/ccIlKMw3.s:963    .text:00000000000004a8 .LVL64
     /tmp/ccIlKMw3.s:783    .text:00000000000003d8 .LVL48
     /tmp/ccIlKMw3.s:785    .text:00000000000003e0 .LVL49
     /tmp/ccIlKMw3.s:5012   .debug_loc:0000000000000246 .LLST14
     /tmp/ccIlKMw3.s:994    .text:00000000000004bc .LBB76
     /tmp/ccIlKMw3.s:1009   .text:00000000000004c8 .LBE76
     /tmp/ccIlKMw3.s:1015   .text:00000000000004d0 .LBB78
     /tmp/ccIlKMw3.s:1030   .text:00000000000004dc .LBE78
     /tmp/ccIlKMw3.s:1128   .text:0000000000000510 .LBB80
GAS LISTING /tmp/ccIlKMw3.s 			page 54


     /tmp/ccIlKMw3.s:1139   .text:0000000000000514 .LBE80
     /tmp/ccIlKMw3.s:5019   .debug_loc:0000000000000269 .LLST15
     /tmp/ccIlKMw3.s:1144   .text:0000000000000518 .LBB82
     /tmp/ccIlKMw3.s:1155   .text:000000000000051c .LBE82
     /tmp/ccIlKMw3.s:5026   .debug_loc:000000000000028c .LLST16
     /tmp/ccIlKMw3.s:1121   .text:000000000000050c .LVL70
     /tmp/ccIlKMw3.s:1159   .text:0000000000000524 .LVL75
     /tmp/ccIlKMw3.s:1174   .text:0000000000000530 .LVL76
     /tmp/ccIlKMw3.s:1182   .text:000000000000053c .LVL77
     /tmp/ccIlKMw3.s:1190   .text:0000000000000548 .LVL78
     /tmp/ccIlKMw3.s:1198   .text:0000000000000554 .LVL79
     /tmp/ccIlKMw3.s:1206   .text:0000000000000560 .LVL80
     /tmp/ccIlKMw3.s:1214   .text:000000000000056c .LVL81
     /tmp/ccIlKMw3.s:1222   .text:0000000000000578 .LVL82
     /tmp/ccIlKMw3.s:1230   .text:0000000000000584 .LVL83
     /tmp/ccIlKMw3.s:1238   .text:0000000000000590 .LVL84
     /tmp/ccIlKMw3.s:1246   .text:000000000000059c .LVL85
     /tmp/ccIlKMw3.s:1254   .text:00000000000005a8 .LVL86
     /tmp/ccIlKMw3.s:1262   .text:00000000000005b4 .LVL87
     /tmp/ccIlKMw3.s:1270   .text:00000000000005c0 .LVL88
     /tmp/ccIlKMw3.s:1278   .text:00000000000005cc .LVL89
     /tmp/ccIlKMw3.s:644    .text:0000000000000318 .LBB51
     /tmp/ccIlKMw3.s:660    .text:0000000000000324 .LBE51
     /tmp/ccIlKMw3.s:677    .text:000000000000034c .LVL36
     /tmp/ccIlKMw3.s:692    .text:0000000000000360 .LVL38
     /tmp/ccIlKMw3.s:975    .text:00000000000004b4 .LVL66
     /tmp/ccIlKMw3.s:201    .text:00000000000000cc .LFB31
     /tmp/ccIlKMw3.s:230    .text:00000000000000ec .LFE31
     /tmp/ccIlKMw3.s:132    .text:0000000000000084 .LFB30
     /tmp/ccIlKMw3.s:164    .text:00000000000000a4 .LFE30
     /tmp/ccIlKMw3.s:143    .text:0000000000000090 .LBB45
     /tmp/ccIlKMw3.s:155    .text:0000000000000098 .LBE45
     /tmp/ccIlKMw3.s:5033   .debug_loc:00000000000002af .LLST1
     /tmp/ccIlKMw3.s:94     .text:0000000000000064 .LFB29
     /tmp/ccIlKMw3.s:126    .text:0000000000000084 .LFE29
     /tmp/ccIlKMw3.s:105    .text:0000000000000070 .LBB43
     /tmp/ccIlKMw3.s:117    .text:0000000000000078 .LBE43
     /tmp/ccIlKMw3.s:5041   .debug_loc:00000000000002d3 .LLST0
     /tmp/ccIlKMw3.s:170    .text:00000000000000a4 .LFB28
     /tmp/ccIlKMw3.s:195    .text:00000000000000cc .LFE28
     /tmp/ccIlKMw3.s:184    .text:00000000000000bc .LVL9
     /tmp/ccIlKMw3.s:42     .text:0000000000000028 .LFB27
     /tmp/ccIlKMw3.s:88     .text:0000000000000064 .LFE27
     /tmp/ccIlKMw3.s:57     .text:0000000000000040 .LBB41
     /tmp/ccIlKMw3.s:69     .text:0000000000000044 .LBE41
     /tmp/ccIlKMw3.s:73     .text:000000000000004c .LVL3
     /tmp/ccIlKMw3.s:77     .text:0000000000000054 .LVL4
     /tmp/ccIlKMw3.s:5206   .debug_str:0000000000000459 .LASF324
     /tmp/ccIlKMw3.s:5642   .debug_str:0000000000001367 .LASF308
     /tmp/ccIlKMw3.s:5694   .debug_str:00000000000014fc .LASF309
     /tmp/ccIlKMw3.s:5238   .debug_str:000000000000054e .LASF310
     /tmp/ccIlKMw3.s:5508   .debug_str:0000000000000e7e .LASF312
     /tmp/ccIlKMw3.s:5476   .debug_str:0000000000000d94 .LASF311
     /tmp/ccIlKMw3.s:5458   .debug_str:0000000000000d1f .LASF313
     /tmp/ccIlKMw3.s:5660   .debug_str:00000000000013d7 .LASF314
     /tmp/ccIlKMw3.s:5600   .debug_str:000000000000120c .LASF325
     /tmp/ccIlKMw3.s:5244   .debug_str:0000000000000597 .LASF326
GAS LISTING /tmp/ccIlKMw3.s 			page 55


     /tmp/ccIlKMw3.s:5366   .debug_str:00000000000009c3 .LASF315
     /tmp/ccIlKMw3.s:5190   .debug_str:00000000000003bc .LASF316
     /tmp/ccIlKMw3.s:561    .text:00000000000002c0 .LVL31
     /tmp/ccIlKMw3.s:571    .text:00000000000002c8 .LVL32
     /tmp/ccIlKMw3.s:587    .text:00000000000002d4 .LVL33
     /tmp/ccIlKMw3.s:597    .text:00000000000002dc .LVL34
     /tmp/ccIlKMw3.s:239    .text:00000000000000ec .LVL10
     /tmp/ccIlKMw3.s:421    .text:0000000000000230 .LVL26
     /tmp/ccIlKMw3.s:658    .text:0000000000000324 .LVL35
     /tmp/ccIlKMw3.s:680    .text:0000000000000350 .LVL37
     /tmp/ccIlKMw3.s:695    .text:0000000000000364 .LVL39
     /tmp/ccIlKMw3.s:714    .text:000000000000038c .LVL40
     /tmp/ccIlKMw3.s:788    .text:00000000000003e4 .LVL50
     /tmp/ccIlKMw3.s:804    .text:00000000000003e8 .LVL51
     /tmp/ccIlKMw3.s:965    .text:00000000000004ac .LVL65
     /tmp/ccIlKMw3.s:978    .text:00000000000004b8 .LVL67
     /tmp/ccIlKMw3.s:991    .text:00000000000004bc .LVL68
     /tmp/ccIlKMw3.s:834    .text:0000000000000404 .LVL52
     /tmp/ccIlKMw3.s:844    .text:000000000000040c .LVL53
     /tmp/ccIlKMw3.s:868    .text:0000000000000448 .LVL55
     /tmp/ccIlKMw3.s:875    .text:000000000000044c .LVL56
     /tmp/ccIlKMw3.s:886    .text:0000000000000458 .LVL57
     /tmp/ccIlKMw3.s:895    .text:000000000000045c .LVL58
     /tmp/ccIlKMw3.s:902    .text:0000000000000460 .LVL59
     /tmp/ccIlKMw3.s:911    .text:0000000000000464 .LVL60
     /tmp/ccIlKMw3.s:716    .text:0000000000000390 .LVL41
     /tmp/ccIlKMw3.s:734    .text:000000000000039c .LVL42
     /tmp/ccIlKMw3.s:748    .text:00000000000003b0 .LVL44
     /tmp/ccIlKMw3.s:772    .text:00000000000003c8 .LVL46
     /tmp/ccIlKMw3.s:740    .text:00000000000003a0 .LVL43
     /tmp/ccIlKMw3.s:768    .text:00000000000003c0 .LVL45
     /tmp/ccIlKMw3.s:776    .text:00000000000003d0 .LVL47
     /tmp/ccIlKMw3.s:949    .text:0000000000000490 .LVL63
     /tmp/ccIlKMw3.s:1037   .text:00000000000004ec .LVL69
     /tmp/ccIlKMw3.s:1127   .text:0000000000000510 .LVL71
     /tmp/ccIlKMw3.s:1136   .text:0000000000000514 .LVL72
     /tmp/ccIlKMw3.s:1143   .text:0000000000000518 .LVL73
     /tmp/ccIlKMw3.s:1152   .text:000000000000051c .LVL74
     /tmp/ccIlKMw3.s:142    .text:0000000000000090 .LVL7
     /tmp/ccIlKMw3.s:152    .text:0000000000000098 .LVL8
     /tmp/ccIlKMw3.s:104    .text:0000000000000070 .LVL5
     /tmp/ccIlKMw3.s:114    .text:0000000000000078 .LVL6
     /tmp/ccIlKMw3.s:1317   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccIlKMw3.s:710    .text:0000000000000384 .LBB55
     /tmp/ccIlKMw3.s:790    .text:00000000000003e4 .LBE55
     /tmp/ccIlKMw3.s:952    .text:0000000000000490 .LBB74
     /tmp/ccIlKMw3.s:969    .text:00000000000004ac .LBE74
     /tmp/ccIlKMw3.s:743    .text:00000000000003a4 .LBB57
     /tmp/ccIlKMw3.s:778    .text:00000000000003d0 .LBE57
     /tmp/ccIlKMw3.s:954    .text:0000000000000490 .LBB58
     /tmp/ccIlKMw3.s:967    .text:00000000000004ac .LBE58
     /tmp/ccIlKMw3.s:793    .text:00000000000003e4 .LBB60
     /tmp/ccIlKMw3.s:921    .text:000000000000046c .LBE60
     /tmp/ccIlKMw3.s:940    .text:0000000000000480 .LBB73
     /tmp/ccIlKMw3.s:951    .text:0000000000000490 .LBE73
     /tmp/ccIlKMw3.s:983    .text:00000000000004b8 .LBB75
     /tmp/ccIlKMw3.s:1161   .text:0000000000000524 .LBE75
GAS LISTING /tmp/ccIlKMw3.s 			page 56


     /tmp/ccIlKMw3.s:1169   .text:0000000000000528 .LBB84
     /tmp/ccIlKMw3.s:1281   .text:00000000000005d0 .LBE84
     /tmp/ccIlKMw3.s:443    .gcc_except_table:0000000000000000 .LLSDA33

UNDEFINED SYMBOLS
_Z8userMainv
_ZN5Riscv14supervisorTrapEv
_ZN3PCB10initializeEv
_ZN8KConsole10initializeEv
_Z7myTestsv
_ZN15MemoryAllocator7kmallocEm
_ZN3PCBnwEm
_ZN3PCBC1EPFvPvES0_S0_m
_ZN3PCB5startEv
_ZN3PCB10isFinishedEv
thread_dispatch
_ZN3PCB10consolePCBE
_ZN3PCBdlEPv
_Unwind_Resume
__gxx_personality_v0
_ZN3PCB7runningE
_ZN3PCB10savedRegA4E
_ZN3PCB17threadExitHandlerEv
CONSOLE_STATUS
CONSOLE_TX_DATA
_ZN8KConsole11pendingGetcE
plic_claim
plic_complete
_ZN3PCB16timeSliceCounterE
_ZN12SleepPCBList13tryToWakePCBsEv
_ZN3PCB8dispatchEv
_ZN8KConsole17putCharacterInputEc
_ZN15MemoryAllocator15memAllocHandlerEv
_ZN15MemoryAllocator14memFreeHandlerEv
_ZN3PCB20threadMakePCBHandlerEv
_ZN3PCB19threadCreateHandlerEv
_ZN3PCB18threadStartHandlerEv
_ZN3PCB21threadDispatchHandlerEv
_ZN3PCB18threadSleepHandlerEv
_ZN10KSemaphore14semOpenHandlerEv
_ZN10KSemaphore14semWaitHandlerEv
_ZN10KSemaphore16semSignalHandlerEv
_ZN10KSemaphore15semCloseHandlerEv
_ZN8KConsole11getcHandlerEv
_ZN8KConsole11putcHandlerEv
_ZN8KConsole14getCharHandlerEv
